<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>COURSES [INTERACTIVE_BRUTALISM]</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Archivo+Black&family=IBM+Plex+Mono:wght@400;700&display=swap" rel="stylesheet">

    <style>
        :root {
            --color-black: #000000;
            --color-white: #FFFFFF;
            --color-background: #f0f0f0;
            --color-grey-medium: #e0e0e0;
            --color-grey-dark: #555;
            --color-accent-primary: #ffff00; /* Yellow */
            --color-accent-free: #00ff00;   /* Green */
            --color-tag-1: #0000ff;       /* Blue */
            --color-tag-2: #ff00ff;       /* Magenta */
            --border-style: 2px solid var(--color-black);
            --shadow-hard: 6px 6px 0px var(--color-black);
            --shadow-hard-small: 3px 3px 0px var(--color-black);
            --shadow-hard-hover: 10px 10px 0px var(--color-black);
            --font-heading: 'Archivo Black', sans-serif;
            --font-body: 'IBM Plex Mono', monospace;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            border-radius: 0 !important;
        }

        body {
            font-family: var(--font-body);
            background-color: var(--color-background);
            color: var(--color-black);
            line-height: 1.6;
            overflow-x: hidden;
        }

        h1, h2, h3, h4, button, legend, a, span { font-weight: 700; }
        h1, h2, h3, h4 { font-family: var(--font-heading); text-transform: uppercase; }
        img { max-width: 100%; display: block; }

        .btn {
            display: inline-block;
            font-family: var(--font-body);
            font-size: 1rem;
            font-weight: 700;
            text-transform: uppercase;
            text-decoration: none;
            text-align: center;
            cursor: pointer;
            padding: 0.75rem 1.25rem;
            border: var(--border-style);
            background-color: var(--color-accent-primary);
            color: var(--color-black);
            box-shadow: var(--shadow-hard-small);
            transition: all 0.15s ease-out;
        }
        .btn:hover {
            background-color: var(--color-white);
            transform: translate(-2px, -2px);
            box-shadow: 5px 5px 0px var(--color-black);
        }
        .btn:active {
            background-color: var(--color-accent-primary);
            transform: translate(3px, 3px);
            box-shadow: none;
        }

        .form-input {
            width: 100%;
            padding: 0.75rem 1rem;
            font-family: var(--font-body);
            font-size: 1rem;
            border: var(--border-style);
            background: var(--color-white);
        }
        .form-input:focus {
            outline: var(--border-style);
            outline-color: var(--color-accent-primary);
            outline-offset: 2px;
        }

        .page-header {
            background: var(--color-black);
            color: var(--color-white);
            padding: 2.5rem 2rem;
            border-bottom: var(--border-style);
            text-align: center;
        }
        .page-header h1 { margin: 0; font-size: 3rem; letter-spacing: 2px; }

        .page-layout {
            max-width: 1200px;
            margin: 2rem auto;
            padding: 0 2rem;
        }

        .content-area { width: 100%; }

        .search-container {
            display: flex;
            margin-bottom: 2rem;
            border: var(--border-style);
            background: var(--color-white);
            box-shadow: var(--shadow-hard);
        }
        .search-container input[type="search"] {
            flex-grow: 1;
            border: none;
            padding: 0.75rem 1rem;
            font-size: 1.1rem;
        }
        .search-container .btn {
            border: none;
            border-left: var(--border-style);
            box-shadow: none;
        }

        .grid-container { position: relative; }

        .course-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 2.5rem;
            opacity: 1;
            transition: opacity 0.3s ease-in;
        }
        .course-grid.hidden { display: grid; opacity: 0; }
        
        .course-card {
            background: var(--color-white);
            border: var(--border-style);
            box-shadow: var(--shadow-hard);
            display: flex;
            flex-direction: column;
            opacity: 0;
            transition: all 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275);
        }
        
        @keyframes animate-in { 
            from { opacity: 0; transform: translateY(50px); } 
            to { opacity: 1; transform: translateY(0); } 
        }
        .course-card.is-visible { 
            animation: animate-in 0.5s cubic-bezier(0.175, 0.885, 0.32, 1.275) forwards;
        }
        
        .course-card:hover {
            transform: translate(-8px, -8px);
            box-shadow: var(--shadow-hard-hover);
        }

        .course-card-image-wrapper {
            overflow: hidden;
            border-bottom: var(--border-style);
            height: 200px;
        }

        .course-card-image {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: all 0.3s ease-out;
        }
        
        .course-card-content {
            padding: 1.25rem;
            flex-grow: 1;
            display: flex;
            flex-direction: column;
        }
        
        .course-tag {
            align-self: flex-start;
            padding: 0.25rem 0.75rem;
            font-size: 0.75rem;
            font-family: var(--font-body);
            border: var(--border-style);
            margin-bottom: 0.75rem;
            text-transform: uppercase;
        }
        .tag-1 { background-color: var(--color-tag-1); color: var(--color-white); }
        .tag-2 { background-color: var(--color-tag-2); color: var(--color-white); }

        .course-card-content h3 { font-size: 1.5rem; line-height: 1.3; }
        .course-card-content p { 
            font-size: 0.9rem; 
            margin: 0.5rem 0 1rem; 
            flex-grow: 1; /* Pushes meta info down */
        }
        
        /* --- NEW: COURSE META INFO (PRICE, DURATION, ENROLLED) --- */
        .course-meta-info {
            display: flex;
            flex-wrap: wrap;
            justify-content: space-between;
            gap: 1rem;
            padding: 1rem 0;
            border-top: var(--border-style);
            border-bottom: var(--border-style);
            margin-bottom: 1rem;
        }
        .meta-item {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.85rem;
            font-weight: 700;
        }
        .meta-icon {
            width: 20px;
            height: 20px;
        }
        .price-tag {
            font-size: 1.1rem;
            font-weight: 700;
        }
        .price-tag .original-price {
            font-size: 0.9rem;
            color: var(--color-grey-dark);
            text-decoration: line-through;
            margin-left: 0.25rem;
        }
        .price-tag.free {
            color: var(--color-accent-free);
            border: 2px solid var(--color-accent-free);
            padding: 0.1rem 0.4rem;
        }
        /* --- END NEW --- */
        
        .course-instructor {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }
        
        .instructor-avatar { 
            width: 40px; 
            height: 40px; 
            object-fit: cover; 
            border: var(--border-style); 
            background: #ccc;
        }
        
        .instructor-info {
            display: flex;
            flex-direction: column;
            line-height: 1.2;
        }
        .instructor-name { 
            font-size: 1rem; 
            font-weight: 700; 
        }
        .instructor-username {
            font-size: 0.8rem;
            font-weight: 400;
            color: var(--color-grey-dark);
        }

        /* --- SKELETON LOADER (Updated for new fields) --- */
        @keyframes brutal-pulse { 0% { background-color: var(--color-grey-medium); } 50% { background-color: #cccccc; } 100% { background-color: var(--color-grey-medium); } }
        .skeleton-grid { grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: 2.5rem; }
        .skeleton-card { background: var(--color-white); border: var(--border-style); box-shadow: var(--shadow-hard); padding: 1.25rem; }
        .skeleton-block { animation: brutal-pulse 1.2s linear infinite; }
        .skeleton-image { height: 185px; margin-bottom: 1rem; }
        .skeleton-line { height: 16px; margin-bottom: 0.75rem; }
        .skeleton-line.tag { width: 30%; height: 20px; }
        .skeleton-line.title { width: 70%; height: 24px; }
        .skeleton-line.text { width: 100%; margin-bottom: 1rem; }
        .skeleton-meta {
            display: flex;
            justify-content: space-between;
            padding: 1rem 0;
            border-top: var(--border-style);
            border-bottom: var(--border-style);
            margin-bottom: 1rem;
        }
        .skeleton-meta .skeleton-line { width: 30%; height: 20px; margin-bottom: 0; }
        .skeleton-instructor { display: flex; align-items: center; gap: 0.75rem; }
        .skeleton-avatar { width: 40px; height: 40px; }
        .skeleton-line.name { width: 50%; height: 20px; margin-bottom: 0; }
        
        @media (max-width: 900px) { 
            .page-layout { margin: 1rem auto; padding: 0 1rem; } 
        }
    </style>
</head>
<body>

    <svg width="0" height="0" style="display:none;">
        <symbol id="icon-clock" viewBox="0 0 24 24">
            <path d="M12 2C6.486 2 2 6.486 2 12s4.486 10 10 10 10-4.486 10-10S17.514 2 12 2zm0 18c-4.411 0-8-3.589-8-8s3.589-8 8-8 8 3.589 8 8-3.589 8-8 8z" fill="currentColor"></path><path d="M13 7h-2v6l5.25 3.15.75-1.23-4-2.42V7z" fill="currentColor"></path>
        </symbol>
        <symbol id="icon-users" viewBox="0 0 24 24">
            <path d="M12 12c2.206 0 4-1.794 4-4s-1.794-4-4-4-4 1.794-4 4 1.794 4 4 4zm0-6c1.103 0 2 .897 2 2s-.897 2-2 2-2-.897-2-2 .897-2 2-2zM12 14c-4.33 0-8 2.801-8 5.125V20h16v-.875C20 16.801 16.33 14 12 14zm-6 4.111C6.471 16.963 8.958 16 12 16s5.529.963 6 2.111V18H6v.111zM18 10c1.103 0 2-.897 2-2s-.897-2-2-2-2 .897-2 2 .897 2 2 2zM20 14c-1.54 0-2.903.45-4.021 1.181A4.998 4.998 0 0 1 18 10c0-1.103-.897-2-2-2s-2 .897-2 2a4.998 4.998 0 0 1 1.181 3.021C14.45 15.097 14 16.46 14 18v2h6v-.875C20 17.062 19.333 14 20 14z" fill="currentColor"></path>
        </symbol>
    </svg>

    <header class="page-header">
        <h1>COURSE CATALOG</h1>
    </header>

    <div class="page-layout">

        <main class="content-area">
            
            <form class="search-container" id="search-form">
                <input type="search" class="form-input" placeholder="SEARCH..." id="search-input">
                <button type="submit" class="btn">GO</button>
            </form>

            <div class="grid-container">

                <div class="skeleton-grid" id="skeleton-loader" style="display: none;">
                    <article class="skeleton-card">
                        <div class="skeleton-image skeleton-block"></div>
                        <div class="skeleton-line tag skeleton-block"></div>
                        <div class="skeleton-line title skeleton-block"></div>
                        <div class="skeleton-line text skeleton-block"></div>
                        <div class="skeleton-meta">
                            <div class="skeleton-line skeleton-block"></div>
                            <div class="skeleton-line skeleton-block"></div>
                        </div>
                        <div class="skeleton-instructor">
                            <div class="skeleton-avatar skeleton-block"></div>
                            <div class="skeleton-line name skeleton-block"></div>
                        </div>
                    </article>
                    </div>
                
                <div class="course-grid" id="course-grid">
                    
                    <% courses.forEach(course => { %>
                        
                        <%
                            const tagClass = course.category.toLowerCase().includes('design') ? 'tag-2' : 'tag-1';
                            
                            // Duration Formatter
                            const hours = Math.floor(course.duration / 60);
                            const minutes = course.duration % 60;
                            const durationText = `${hours > 0 ? hours + 'h' : ''} ${minutes > 0 ? minutes + 'm' : ''}`.trim();
                        %>

                        <article class="course-card">
                            <div class="course-card-image-wrapper">
                                <img src="<%= course.thumbnailUrl %>" alt="<%= course.title %>" class="course-card-image">
                            </div>
                            <div class="course-card-content">
                                <span class="course-tag <%= tagClass %>"><%= course.category %></span>
                                <h3><%= course.title %></h3>
                                <p><%= course.description %></p>
                                
                                <div class="course-meta-info">
                                    <div class="meta-item price-tag">
                                        <% if (course.isFree) { %>
                                            <span class="price-tag free">FREE</span>
                                        <% } else if (course.discountPrice) { %>
                                            $<%= course.discountPrice %>
                                            <span class="original-price">$<%= course.price %></span>
                                        <% } else { %>
                                            $<%= course.price %>
                                        <% } %>
                                    </div>
                                    <div class="meta-item">
                                        <svg class="meta-icon" aria-hidden="true"><use href="#icon-clock"></use></svg>
                                        <span><%= durationText %></span>
                                    </div>
                                    <div class="meta-item">
                                        <svg class="meta-icon" aria-hidden="true"><use href="#icon-users"></use></svg>
                                        <span><%= course.enrollCount %></span>
                                    </div>
                                </div>
                                <div class="course-instructor">
                                    <img src="<%= course.userId.profilePicUrl %>" alt="<%= course.userId.fullName %>" class="instructor-avatar">
                                    <div class="instructor-info">
                                        <span class="instructor-name"><%= course.userId.fullName %></span>
                                        <span class="instructor-username">@<%= course.userId.username %></span>
                                    </div>
                                </div>
                            </div>
                        </article>
                    <% }); %>
                    </div>

            </div>
        </main>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', () => {
        
        const skeletonLoader = document.getElementById('skeleton-loader');
        const courseGrid = document.getElementById('course-grid');
        const searchForm = document.getElementById('search-form');
        const searchInput = document.getElementById('search-input');
        
        // --- NEW: JS Duration Formatter ---
        function formatDuration(totalMinutes) {
            const hours = Math.floor(totalMinutes / 60);
            const minutes = totalMinutes % 60;
            return `${hours > 0 ? hours + 'h' : ''} ${minutes > 0 ? minutes + 'm' : ''}`.trim();
        }

        // --- NEW: JS Price Formatter ---
        function formatPrice(course) {
            if (course.isFree) {
                return `<span class="price-tag free">FREE</span>`;
            }
            if (course.discountPrice) {
                return `$${course.discountPrice} <span class="original-price">$${course.price}</span>`;
            }
            return `$${course.price}`;
        }

        // --- UPDATED createCourseCard function ---
        function createCourseCard(course) {
            const card = document.createElement('article');
            card.className = 'course-card';

            const tagClass = course.category.toLowerCase().includes('design') ? 'tag-2' : 'tag-1';
            const durationText = formatDuration(course.duration);
            const priceText = formatPrice(course);
            
            card.innerHTML = `
                <div class="course-card-image-wrapper">
                    <img src="${course.thumbnailUrl}" alt="${course.title}" class="course-card-image">
                </div>
                <div class="course-card-content">
                    <span class="course-tag ${tagClass}">${course.category}</span>
                    <h3>${course.title}</h3>
                    <p>${course.description}</p>
                    
                    <div class="course-meta-info">
                        <div class="meta-item price-tag">
                            ${priceText}
                        </div>
                        <div class="meta-item">
                            <svg class="meta-icon" aria-hidden="true"><use href="#icon-clock"></use></svg>
                            <span>${durationText}</span>
                        </div>
                        <div class="meta-item">
                            <svg class="meta-icon" aria-hidden="true"><use href="#icon-users"></use></svg>
                            <span>${course.enrollCount}</span>
                        </div>
                    </div>
                    <div class="course-instructor">
                        <img src="${course.userId.profilePicUrl}" alt="${course.userId.fullName}" class="instructor-avatar">
                        <div class="instructor-info">
                            <span class="instructor-name">${course.userId.fullName}</span>
                            <span class="instructor-username">@${course.userId.username}</span>
                        </div>
                    </div>
                </div>
            `;
            return card;
        }
        
        let scrollObserver;
        function setupScrollAnimation() {
            const courseCards = document.querySelectorAll('.course-card');
            if (scrollObserver) {
                scrollObserver.disconnect();
            }
            scrollObserver = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('is-visible');
                        scrollObserver.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.1 }); 
            
            courseCards.forEach(card => {
                scrollObserver.observe(card);
            });
        }

        async function fetchCourses(query) {
            skeletonLoader.style.display = 'grid';
            courseGrid.classList.add('hidden');
            courseGrid.innerHTML = '';

            let url = `/courses?search=${encodeURIComponent(query)}`;

            try {
                const response = await fetch(url);
                if (!response.ok) throw new Error(`HTTP error!`);
                const courses = await response.json();

                skeletonLoader.style.display = 'none';

                if (courses.length === 0) {
                    courseGrid.innerHTML = '<p>NO_COURSES_FOUND.</p>';
                } else {
                    courses.forEach(course => {
                        const newCard = createCourseCard(course);
                        courseGrid.appendChild(newCard);
                    });
                }

                courseGrid.classList.remove('hidden');
                setupScrollAnimation();
                
            } catch (error) {
                console.error('Fetch error:', error);
                skeletonLoader.style.display = 'none';
                courseGrid.classList.remove('hidden');
                courseGrid.innerHTML = `<p>ERROR_LOADING_COURSES.</p>`;
            }
        }

        searchForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const query = searchInput.value;
            fetchCourses(query);
        });

        setupScrollAnimation();
    });
    </script>

</body>
</html>