<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>HLS Manual Quality Selector</title>
</head>
<body>
<video id="video" controls width="800" height="450"></video>
<select id="qualitySelector"></select>
<span id="currentQuality">Current: Auto</span>

<script src="https://cdn.jsdelivr.net/npm/hls.js@latest"></script>
<script>
const video = document.getElementById("video");
const qualitySelector = document.getElementById("qualitySelector");
const currentQuality = document.getElementById("currentQuality");
const videoSrc = "https://d1iz17ohzrj8rc.cloudfront.net/hls-output/1757830693120/f86b88bc52b1bdcb1d263d1d27ebc902-crack.m3u8";

if (Hls.isSupported()) {
  const hls = new Hls();
  hls.loadSource(videoSrc);
  hls.attachMedia(video);

  hls.on(Hls.Events.MANIFEST_PARSED, () => {
    // Add Auto option
    const autoOption = document.createElement("option");
    autoOption.value = -1;
    autoOption.text = "Auto";
    qualitySelector.appendChild(autoOption);

    // Filter and add specific quality levels: 360p, 480p, 720p, and 1080p
    const desiredQualities = [360, 480, 720, 1080];
    hls.levels.forEach((level, index) => {
      if (desiredQualities.includes(level.height)) {
        const option = document.createElement("option");
        option.value = index;
        option.text = level.height + "p (" + Math.round(level.bitrate/1000) + " kbps)";
        qualitySelector.appendChild(option);
      }
    });

    // Sort options by quality (height)
    const options = Array.from(qualitySelector.options);
    options.sort((a, b) => {
      if (a.value === "-1") return -1;
      if (b.value === "-1") return 1;
      return parseInt(a.text) - parseInt(b.text);
    });
    options.forEach(option => qualitySelector.appendChild(option));

    // Default to Auto
    qualitySelector.value = -1;
  });

  // Change quality manually
  qualitySelector.addEventListener("change", () => {
    const level = parseInt(qualitySelector.value);
    hls.currentLevel = level; // -1 = Auto
  });

  // Show current playing quality
  hls.on(Hls.Events.FRAG_CHANGED, () => {
    const level = hls.levels[hls.currentLevel];
    currentQuality.textContent = level ? "Current: " + level.height + "p" : "Current: Auto";
  });

} else if (video.canPlayType('application/vnd.apple.mpegurl')) {
  video.src = videoSrc;
}
</script>
</body>
</html>