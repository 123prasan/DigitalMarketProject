<button class="report-button" id="reportButton">
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path>
        <polyline points="14 2 14 8 20 8"></polyline>
        <line x1="12" y1="18" x2="12" y2="12"></line>
        <line x1="12" y1="12" x2="12" y2="12"></line>
    </svg>
    <span>Report File</span>
</button>

<div class="modal-backdrop" id="reportModalBackdrop">
    <div class="modal-content" id="reportModalContent">
        <div class="modal-header">
            <h3 class="modal-title">Report Content</h3>
            <button class="modal-close-button" id="closeReportModal">&times;</button>
        </div>
        <div class="modal-body" id="reportModalBody">
            </div>
    </div>
</div>


<style>
    /* --- General Button Styling --- */
    .report-button {
        display: inline-flex;
        align-items: center;
        gap: 8px;
        padding: 10px 18px;
        font-family: sans-serif;
        font-size: 16px;
        font-weight: 600;
        color: #dc3545;
        background-color: transparent;
        border: 1px solid #dc3545;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
    }
    .report-button:hover {
        background-color: #dc3545;
        color: #fff;
    }
    .report-button svg {
        width: 20px;
        height: 20px;
    }

    /* --- Modal Styling --- */
    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }
    .modal-backdrop.visible {
        opacity: 1;
        visibility: visible;
    }
    .modal-content {
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        width: 90%;
        max-width: 500px;
        transform: scale(0.95);
        transition: transform 0.3s ease;
        /* UPDATED: Make modal a flex container and limit its height */
        display: flex;
        flex-direction: column;
        max-height: 85vh; 
    }
    .modal-backdrop.visible .modal-content {
        transform: scale(1);
    }
    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1px solid #e9ecef;
        padding: 15px 20px;
    }
    /* UPDATED: Add rule for the modal body to make it scrollable */
    .modal-body {
        padding: 20px;
        overflow-y: auto;
    }
    .modal-title {
        font-size: 20px;
        font-weight: 600;
        margin: 0;
        color: #212529;
    }
    .modal-close-button {
        background: none;
        border: none;
        font-size: 28px;
        font-weight: 300;
        cursor: pointer;
        color: #6c757d;
        padding: 0;
        line-height: 1;
    }

    /* --- Form Styling within Modal --- */
    .report-reason-label {
        display: block;
        padding: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 0.5rem;
        cursor: pointer;
        transition: all 0.2s ease-in-out;
        margin-bottom: 10px;
    }
    .report-reason-label:hover {
        background-color: #f8f9fa;
    }
    .report-reason-input {
        display: none;
    }
    .report-reason-input:checked + .report-reason-label {
        border-color: #0d6efd;
        box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.25);
        background-color: #e7f1ff;
    }
    #otherDetails {
        width: 100%;
        padding: 8px;
        font-size: 14px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        box-sizing: border-box;
    }
    #submitReportBtn {
        width: 100%;
        padding: 12px;
        font-size: 16px;
        font-weight: 600;
        color: #fff;
        background-color: #0d6efd;
        border: none;
        border-radius: 6px;
        cursor: pointer;
        margin-top: 15px;
    }
    #submitReportBtn:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }

    /* --- Success Message Styling --- */
    @keyframes draw-check {
        from { stroke-dashoffset: 32; }
        to { stroke-dashoffset: 0; }
    }
    .success-checkmark {
        stroke-dasharray: 32;
        animation: draw-check 0.5s ease-in-out forwards;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const reportButton = document.getElementById('reportButton');
        const reportModalBackdrop = document.getElementById('reportModalBackdrop');
        const reportModalBody = document.getElementById('reportModalBody');
        const closeReportModalBtn = document.getElementById('closeReportModal');
        
        // --- Modal Control ---
        const openModal = () => {
            reportModalBackdrop.classList.add('visible');
            document.body.style.overflow = 'hidden';
        };
        const closeModal = () => {
            reportModalBackdrop.classList.remove('visible');
            document.body.style.overflow = '';
        };

        reportButton.addEventListener('click', () => {
            reportModalBody.innerHTML = getFormHtml();
            attachFormListeners();
            openModal();
        });
        
        closeReportModalBtn.addEventListener('click', closeModal);
        reportModalBackdrop.addEventListener('click', (event) => {
            if (event.target === reportModalBackdrop) {
                closeModal();
            }
        });

        // --- HTML Content Templates ---
        const getFormHtml = () => `
            <form id="reportForm" novalidate>
                <p style="color: #6c757d; margin-top:0; margin-bottom: 20px;">Please select a reason for your report. Your feedback helps us maintain a safe community.</p>
                <div>
                    ${getRadioOption('copyright', 'Copyright Infringement', 'Unauthorized use of copyrighted material.')}
                    ${getRadioOption('infringement', 'Trademark Infringement', 'Content that violates a trademark.')}
                    ${getRadioOption('fraud', 'Fraud or Scam', 'Content that is deceptive or fraudulent.')}
                    ${getRadioOption('empty', 'Empty or Low-Quality Content', 'The file contains no valuable content.')}
                    ${getRadioOption('other', 'Other', 'Issues not covered by the options above.')}
                </div>
                <div id="otherReasonContainer" style="margin-top: 15px; display: none;">
                    <label for="otherDetails" style="display: block; margin-bottom: 5px;">Please provide more details:</label>
                    <textarea id="otherDetails" name="details" rows="3" placeholder="Explain your reason..."></textarea>
                </div>
                <div style="color: #dc3545; font-size: 14px; margin-top: 10px; height: 1.2em;" id="error-message"></div>
                <button type="submit" id="submitReportBtn">Submit Report</button>
            </form>
        `;
        const getRadioOption = (id, title, description) => `
            <div>
                <input class="report-reason-input" type="radio" name="reason" id="${id}" value="${id}" required>
                <label class="report-reason-label" for="${id}">
                    <span style="font-weight: 600; color: #212529;">${title}</span>
                    <p style="font-size: 14px; color: #6c757d; margin: 5px 0 0 0;">${description}</p>
                </label>
            </div>
        `;
        const getSuccessHtml = () => `
            <div style="text-align: center; padding: 20px 0;">
                <div style="margin: 0 auto; background-color: #d1e7dd; border-radius: 50%; width: 64px; height: 64px; display: flex; align-items: center; justify-content: center;">
                    <svg style="color: #0f5132;" width="40" height="40" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                        <path class="success-checkmark" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                </div>
                <h3 style="font-size: 22px; font-weight: 600; color: #212529; margin-top: 20px;">Report Submitted</h3>
                <p style="color: #6c757d; margin-top: 10px;">Thank you for your feedback. We will review your report shortly.</p>
            </div>
        `;

        // --- Form Logic ---
        const handleFormSubmit = async (event) => {
            event.preventDefault();
            const submitButton = document.getElementById('submitReportBtn');
            const errorMessage = document.getElementById('error-message');
            const formData = new FormData(event.target);
            const reason = formData.get('reason');
            const details = formData.get('details') || "";

            errorMessage.textContent = '';
            if (!reason) {
                errorMessage.textContent = 'Please select a reason.'; return;
            }
            if (reason === 'other' && !details.trim()) {
                errorMessage.textContent = 'Please provide details for the "Other" reason.'; return;
            }

            submitButton.disabled = true;
            submitButton.textContent = 'Submitting...';
            
            const fileId = "<%= file._id %>";
            const reportUrl = `/report/?file_id=${fileId}`;

            try {
                const response = await fetch(reportUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ reason, details }),
                });
                if (response.ok) {
                    reportModalBody.innerHTML = getSuccessHtml();
                    setTimeout(closeModal, 3000);
                } else { throw new Error('Server responded with an error.'); }
            } catch (error) {
                console.error('Submission failed:', error);
                errorMessage.textContent = 'An error occurred. Please try again.';
                submitButton.disabled = false;
                submitButton.textContent = 'Submit Report';
            }
        };
        
        const attachFormListeners = () => {
            const form = document.getElementById('reportForm');
            if (!form) return;
            form.addEventListener('submit', handleFormSubmit);

            const otherReasonContainer = document.getElementById('otherReasonContainer');
            form.querySelectorAll('input[name="reason"]').forEach(radio => {
                radio.addEventListener('change', () => {
                    otherReasonContainer.style.display = radio.value === 'other' ? 'block' : 'none';
                });
            });
        };
    });
</script>