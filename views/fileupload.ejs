<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
<script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

<div class="upload-form-scope-xyz">

  <div id="upload-form-app-container">
  </div>

  <template id="template-upload-form">
    <main class="upload-form__main">
      <div class="upload-form__card">
        <h1 class="upload-form__main-title">Upload Study Material</h1>
        <form class="upload-form__form" id="upload-form-main">
          <div class="upload-form__input-group">
            <label for="uploadFormTitle" class="upload-form__label"><span
                class="upload-form__required-indicator">*</span>Title</label>
            <input id="uploadFormTitle" required placeholder="e.g., Advanced JavaScript Notes"
              class="upload-form__input" maxlength="100" />
          </div>
          <div class="upload-form__input-group">
            <label class="upload-form__label"><span class="upload-form__required-indicator">*</span>Description</label>
            <div id="descriptionEditorContainer" class="upload-form__editor-container"></div>
            <div id="descriptionCharCounter" class="upload-form__char-counter">0 / 500</div>
          </div>
          <div class="upload-form__grid-container">
            <div class="upload-form__input-group">
              <label for="uploadFormPrice" class="upload-form__label"><span
                  class="upload-form__required-indicator">*</span>Price (â‚¹) <span class="upload-form__label-muted">Set 0 for Free</span></label>
              <input id="uploadFormPrice" required type="number" placeholder="e.g., 99" class="upload-form__input"
                min="0" max="100000" />
            </div>
            <div class="upload-form__input-group">
              <label for="uploadFormCategory" class="upload-form__label"><span
                  class="upload-form__required-indicator">*</span>Category</label>
              <div class="upload-form__select-wrapper">
                <input id="uploadFormCategory" placeholder="e.g., Engineering" required class="upload-form__input">
              </div>
            </div>
          </div>
          <div class="upload-form__coupon-section">
            <div class="upload-form__checkbox-group">
              <input type="checkbox" id="couponToggleCheckbox" class="upload-form__checkbox-input" />
              <label for="couponToggleCheckbox" class="upload-form__checkbox-label">Add a discount coupon</label>
            </div>
            <div id="couponDetailsContainer" class="upload-form__coupon-details">
              <div class="upload-form__grid-container">
                <div class="upload-form__input-group">
                  <label for="couponCode" class="upload-form__label">Coupon Code</label>
                  <input id="couponCode" placeholder="e.g., FIRST100" class="upload-form__input" />
                </div>
                <div class="upload-form__input-group">
                  <label for="couponPercentage" class="upload-form__label">Discount (%)</label>
                  <input id="couponPercentage" type="number" placeholder="e.g., 25" class="upload-form__input" min="1"
                    max="100" />
                </div>
              </div>
              <div class="upload-form__input-group" style="margin-top: 1.5rem;">
                <label for="couponExpiry" class="upload-form__label">Expiration Date</label>
                <input id="couponExpiry" type="date" class="upload-form__input" />
              </div>
            </div>
          </div>
          <div class="upload-form__grid-container">
            <div class="upload-form__input-group">
              <label class="upload-form__label"><span class="upload-form__required-indicator">*</span>Cover
                Image</label>
              <div id="imageUploadArea" class="upload-form__drop-area">
                <div class="upload-form__drop-area-content">
                  <i class="fa-solid fa-image upload-form__drop-area-icon"></i>
                  <p id="imageUploadText" class="upload-form__drop-area-text">Click or drag & drop</p>
                </div>
              </div>
              <input type="file" id="imageUploadInput" hidden accept="image/*" required />
            </div>
            <div class="upload-form__input-group">
              <label class="upload-form__label"><span class="upload-form__required-indicator">*</span>Main File</label>
              <div id="fileUploadArea" class="upload-form__drop-area">
                <div class="upload-form__drop-area-content">
                  <i class="fa-solid fa-file-arrow-up upload-form__drop-area-icon"></i>
                  <p id="fileUploadText" class="upload-form__drop-area-text">PDF, ZIP, PPT, DOCS</p>
                </div>
              </div>
              <input type="file" id="fileUploadInput" hidden accept=".pdf,.mp4,.ppt,.docs,.zip" required />
            </div>
          </div>
          <div class="upload-form__checkbox-group upload-form__checkbox-group--agreement">
            <input type="checkbox" id="copyrightCheck" required class="upload-form__checkbox-input" />
            <label for="copyrightCheck" class="upload-form__checkbox-label upload-form__checkbox-label--small">I confirm
              I have the rights to upload this content and it does not violate copyright laws.</label>
          </div>
          <button id="reviewUploadBtn" disabled class="upload-form__action-btn">
            Review & Upload
          </button>
        </form>
      </div>
    </main>
  </template>

  <template id="template-preview">
    <main class="upload-form__main">
      <div class="upload-form__card">
        <div class="upload-form__preview-header">
          <button id="backToFormBtn" class="upload-form__back-btn">
            <i class="fa-solid fa-arrow-left"></i>
          </button>
          <h1 class="upload-form__main-title upload-form__main-title--preview">Review & Publish</h1>
        </div>

        <section class="upload-form__section">
          <h3 class="upload-form__section-title">Preview</h3>
          <div class="upload-form__preview-box">
            <div id="previewImage" class="upload-form__preview-image"></div>
            <div class="upload-form__preview-file-info">
              <p class="upload-form__preview-file-title">Main File</p>
              <p id="previewFileName" class="upload-form__preview-file-name"></p>
            </div>
          </div>
        </section>

        <section class="upload-form__section">
          <h3 class="upload-form__section-title">Metadata</h3>
          <div class="upload-form__metadata-grid">
            <p class="upload-form__metadata-key">Title</p>
            <p id="previewTitle" class="upload-form__metadata-value"></p>
            <p class="upload-form__metadata-key">Description</p>
            <div id="previewDescription"
              class="upload-form__metadata-value upload-form__metadata-value--description ql-snow">
              <div class="ql-editor"></div>
            </div>
            <p class="upload-form__metadata-key">Price</p>
            <p id="previewPrice" class="upload-form__metadata-value"></p>
            <p class="upload-form__metadata-key">Category</p>
            <p id="previewCategory" class="upload-form__metadata-value"></p>
            
            <div id="previewCouponSection" class="upload-form__metadata-coupon-row">
              <p class="upload-form__metadata-key">Coupon</p>
              <p id="previewCoupon" class="upload-form__metadata-value"></p>
              <p class="upload-form__metadata-key">Expiry Date</p>
              <p id="previewCouponExpiry" class="upload-form__metadata-value"></p>
            </div>
          </div>
        </section>

        <button id="publishBtn" class="upload-form__action-btn">
          Publish
        </button>
      </div>
    </main>
  </template>

  <template id="template-upload-progress">
    <main class="upload-form__main upload-form__main--centered">
      <div class="upload-form__card upload-form__card--progress">
        <div class="upload-form__progress-loader">
          <svg class="upload-form__progress-spinner" viewBox="25 25 50 50">
            <circle class="upload-form__progress-spinner-circle" r="20" cy="50" cx="50"></circle>
          </svg>
        </div>
        <h1 id="uploadHeading" class="upload-form__main-title">Uploading...</h1>
        <p id="uploadStatusMessage" class="upload-form__progress-status">Initializing...</p>
        <div class="upload-form__progress-bar-wrapper">
          <div class="upload-form__progress-bar-info">
            <span id="uploadProgressText" class="upload-form__progress-bar-text">0%</span>
            <span id="uploadBytesText" class="upload-form__progress-bar-bytes">0 B / 0 B</span>
          </div>
          <progress id="uploadProgressBar" value="0" max="100" class="upload-form__progress-bar"></progress>
        </div>
        <div class="upload-form__progress-stats-grid">
          <p>Speed: <span id="uploadSpeed">0 B/s</span></p>
          <p>Time Left: <span id="uploadTime">--:--</span></p>
        </div>
        <div class="upload-form__progress-controls">
          <button id="pauseResumeBtn" class="upload-form__progress-btn">Pause</button>
          <button id="cancelBtn" class="upload-form__progress-btn upload-form__progress-btn--danger">Cancel</button>
        </div>
      </div>
    </main>
  </template>
  
  <template id="template-modal">
    <div id="successModalContainer" class="upload-form__modal-container">
      <div id="successModalContent" class="upload-form__modal-content">
        <div class="upload-form__modal-icon-wrapper">
          <svg viewBox="0 0 52 52" class="upload-form__modal-svg" xmlns="http://www.w3.org/2000/svg">
            <circle cx="26" cy="26" r="25" class="upload-form__modal-circle" />
            <path d="M14.1 27.2l7.1 7.2 16.7-16.8" class="upload-form__modal-tick" />
          </svg>
        </div>
        <h2 class="upload-form__modal-title">Success!</h2>
        <p class="upload-form__modal-text">Your files have been uploaded successfully.</p>
        <button id="dismissModalBtn" class="upload-form__modal-btn">Back to Home</button>
      </div>
    </div>
  </template>
</div>

<style>
  .upload-form-scope-xyz {
    --font-main: 'Montserrat', sans-serif;
    --color-bg: #fff;
    --color-black: #000000;
    --color-primary: #ff66a3;
    --color-secondary: #4ade80;
    --color-accent: #ffd60a;
    --color-focus: #1ac2ff;
    --transition-fast: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    
    font-family: var(--font-main); 
    background: var(--color-primary); 
    color: var(--color-black);
    /* padding: 2rem; */
  }
  .upload-form-scope-xyz *, .upload-form-scope-xyz *::before, .upload-form-scope-xyz *::after { 
      margin: 0; padding: 0; box-sizing: border-box; 
  }
  .upload-form-scope-xyz .upload-form__main { 
      width: 100%; display: flex; justify-content: center; 
  }
  .upload-form-scope-xyz .upload-form__main--centered { align-items: center; }
  .upload-form-scope-xyz .upload-form__card { 
      width: 100%; max-width: 800px;
      background: var(--color-primary); 
      padding: 2.5rem; 
      
      border: 4px solid var(--color-black);
      box-shadow: 12px 12px 0 var(--color-black);
  }
  .upload-form-scope-xyz .upload-form__main-title { 
      font-size: 2rem; font-weight: 900; 
      text-align: center; margin-bottom: 2.5rem;
      text-transform: uppercase;
  }
  .upload-form-scope-xyz .upload-form__form { display: flex; flex-direction: column; gap: 1.75rem; }
  .upload-form-scope-xyz .upload-form__input-group { display: flex; flex-direction: column; gap: 0.5rem; }
  .upload-form-scope-xyz .upload-form__label { 
      font-size: 0.875rem; font-weight: 700; 
      text-transform: uppercase; color: #555;
  }
  .upload-form-scope-xyz .upload-form__label-muted { text-transform: none; color: #777; }
  .upload-form-scope-xyz .upload-form__required-indicator { color: var(--color-primary); margin-right: 0.25rem; }
  
  .upload-form-scope-xyz .upload-form__input, 
  .upload-form-scope-xyz .upload-form__select { 
      width: 100%; padding: 0.875rem 1rem; 
      background: var(--color-bg); 
      border: 3px solid var(--color-black);
      box-shadow: 4px 4px 0 var(--color-black);
      color: var(--color-black); font-size: 1rem; font-weight: 600;
      transition: var(--transition-fast);
  }
  .upload-form-scope-xyz .upload-form__input::placeholder { color: #999; }
  .upload-form-scope-xyz .upload-form__input:focus, 
  .upload-form-scope-xyz .upload-form__select:focus, 
  .upload-form-scope-xyz .upload-form__editor-container:focus-within { 
      outline: none; border-color: var(--color-primary); 
      box-shadow: 0 0 0 var(--color-black); 
  }

  .upload-form-scope-xyz .upload-form__grid-container { display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem; }
  @media (max-width: 768px) { .upload-form-scope-xyz .upload-form__grid-container { grid-template-columns: 1fr; gap: 1rem; } }
  
  .upload-form-scope-xyz .upload-form__editor-container { 
      background: var(--color-bg); border: 3px solid var(--color-black); 
      box-shadow: 4px 4px 0 var(--color-black);
      transition: var(--transition-fast); 
  }
  .upload-form-scope-xyz .upload-form__editor-container .ql-toolbar { 
      border: none; border-bottom: 3px solid var(--color-black); 
      background: #f0f0f0;
  }
  .upload-form-scope-xyz .upload-form__editor-container .ql-container { border: none; min-height: 150px; font-size: 1rem; }
  .upload-form-scope-xyz .ql-snow .ql-stroke { stroke: var(--color-black); } 
  .upload-form-scope-xyz .ql-snow .ql-fill { fill: var(--color-black); } 
  .upload-form-scope-xyz .ql-snow .ql-picker-label { color: var(--color-black); }
  
  .upload-form-scope-xyz .upload-form__char-counter { text-align: right; font-size: 0.75rem; color: #555; font-weight: 600; }
  
  .upload-form-scope-xyz .upload-form__coupon-section { 
      background: #f0f0f0; padding: 1rem; 
      border: 3px solid var(--color-black);
  }
  .upload-form-scope-xyz .upload-form__coupon-details { display: none; margin-top: 1rem; }
  .upload-form-scope-xyz .upload-form__coupon-details.visible { display: block; }
  
  .upload-form-scope-xyz .upload-form__checkbox-group { display: flex; align-items: center; gap: 0.75rem; }
  .upload-form-scope-xyz .upload-form__checkbox-input { 
      height: 1.5rem; width: 1.5rem; flex-shrink: 0; 
      border: 3px solid var(--color-black); appearance: none;
      background-color: var(--color-bg); cursor: pointer;
  }
  .upload-form-scope-xyz .upload-form__checkbox-input:checked {
      background-color: var(--color-primary);
      background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='black' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z'/%3e%3c/svg%3e");
  }
  .upload-form-scope-xyz .upload-form__checkbox-label { color: var(--color-black); font-weight: 700; cursor: pointer; }
  .upload-form-scope-xyz .upload-form__checkbox-label--small { font-size: 0.875rem; font-weight: 600; }
  
  .upload-form-scope-xyz .upload-form__drop-area { 
      border: 3px dashed var(--color-black); padding: 2rem; 
      text-align: center; cursor: pointer; transition: var(--transition-fast); 
  }
  .upload-form-scope-xyz .upload-form__drop-area:hover, .upload-form-scope-xyz .upload-form__drop-area.dragover { 
      border-color: var(--color-primary); background-color: #fafafa; 
  }
  .upload-form-scope-xyz .upload-form__drop-area-content { display: flex; flex-direction: column; align-items: center; gap: 0.5rem; color: #555; }
  .upload-form-scope-xyz .upload-form__drop-area-icon { font-size: 2rem; }
  .upload-form-scope-xyz .upload-form__drop-area-text { font-weight: 700; }
  .upload-form-scope-xyz .upload-form__drop-area.file-selected { 
      border-color: var(--color-secondary); border-style: solid; 
      background-color: #f0fff4;
  }

  .upload-form-scope-xyz .upload-form__action-btn { 
      width: 100%; height: 3.5rem; padding: 0 1.25rem; 
      font-size: 1.25rem; font-weight: 900; 
      transition: var(--transition-fast); 
      background: var(--color-secondary); color: var(--color-black); 
      border: 3px solid var(--color-black); 
      box-shadow: 6px 6px 0 var(--color-black);
      cursor: pointer; text-transform: uppercase;
  }
  .upload-form-scope-xyz .upload-form__action-btn:hover { 
      background: var(--color-focus); transform: translate(3px, 3px); 
      box-shadow: 3px 3px 0 var(--color-black);
  }
  .upload-form-scope-xyz .upload-form__action-btn:disabled { 
      background: #ccc; color: #777; cursor: not-allowed;
      box-shadow: 4px 4px 0 #999; border-color: #999;
  }
  
  .upload-form-scope-xyz .upload-form__preview-header { 
      display: flex; align-items: center; margin-bottom: 2rem;
      border-bottom: 4px solid var(--color-black); padding-bottom: 1rem;
  }
  .upload-form-scope-xyz .upload-form__back-btn { 
      background: none; border: 3px solid var(--color-black);
      box-shadow: 3px 3px 0 var(--color-black);
      color: var(--color-black); cursor: pointer; font-size: 1.5rem; 
      width: 50px; height: 50px; transition: var(--transition-fast);
  }
  .upload-form-scope-xyz .upload-form__back-btn:hover { 
      background: var(--color-accent); 
  }
  .upload-form-scope-xyz .upload-form__main-title--preview { 
      margin-bottom: 0; flex-grow: 1; text-align: center; padding-right: 50px; 
  }
  .upload-form-scope-xyz .upload-form__section { margin-bottom: 2rem; }
  .upload-form-scope-xyz .upload-form__section-title { 
      font-size: 1.25rem; font-weight: 900; text-transform: uppercase;
      margin-bottom: 1rem; border-bottom: 3px solid var(--color-black); 
      padding-bottom: 0.5rem; 
  }
  .upload-form-scope-xyz .upload-form__preview-box { display: flex; gap: 1rem; border: 3px solid var(--color-black); padding: 1rem; }
  .upload-form-scope-xyz .upload-form__preview-image { width: 120px; height: 70px; background-size: cover; background-position: center; flex-shrink: 0; border: 3px solid var(--color-black); }
  .upload-form-scope-xyz .upload-form__preview-file-title { font-weight: 700; }
  .upload-form-scope-xyz .upload-form__preview-file-name { color: #555; font-size: 0.875rem; }
  .upload-form-scope-xyz .upload-form__metadata-grid { display: grid; grid-template-columns: 120px 1fr; gap: 1rem; font-weight: 600; }
  .upload-form-scope-xyz .upload-form__metadata-key { font-weight: 900; color: #555; }
  .upload-form-scope-xyz .upload-form__metadata-value--description { border: 3px solid var(--color-black); padding: 0.5rem; max-height: 150px; overflow-y: auto; }
  .upload-form-scope-xyz .upload-form__metadata-coupon-row { display: contents; }
  
  .upload-form-scope-xyz .upload-form__card--progress { max-width: 500px; text-align: center; }
  .upload-form-scope-xyz .upload-form__progress-loader { margin: 0 auto 1.5rem auto; width: 4rem; height: 4rem; color: var(--color-primary); }
  .upload-form-scope-xyz .upload-form__progress-btn {
      padding: 0.5rem 1.5rem;
      background: var(--color-bg); border: 3px solid var(--color-black);
      color: var(--color-black); font-weight: 700; cursor: pointer;
      transition: var(--transition-fast); box-shadow: 3px 3px 0 var(--color-black);
  }
  .upload-form-scope-xyz .upload-form__progress-btn:hover { background: var(--color-accent); }
  .upload-form-scope-xyz .upload-form__progress-btn--danger { background: var(--color-primary); }
  .upload-form-scope-xyz .upload-form__progress-btn--danger:hover { background: #d63384; }

  .upload-form__modal-container { 
      position: fixed; inset: 0; z-index: 999; display: flex; 
      align-items: center; justify-content: center; 
      background: rgba(0, 0, 0, 0.5); backdrop-filter: blur(4px); 
      opacity: 0; visibility: hidden; transition: opacity 0.3s ease;
  }
  .upload-form__modal-container.visible { opacity: 1; visibility: visible; }
  .upload-form__modal-content { 
      background: var(--color-bg); padding: 2.5rem; text-align: center; 
      max-width: 400px; width: 100%;
      border: 4px solid var(--color-black); box-shadow: 12px 12px 0 var(--color-black);
      transform: scale(0.9); opacity: 0; transition: transform 0.3s ease, opacity 0.3s ease;
  }
  .upload-form__modal-container.visible .upload-form__modal-content { transform: scale(1); opacity: 1; }
  .upload-form__modal-title { font-size: 2rem; font-weight: 900; text-transform: uppercase; margin-bottom: 0.5rem; }
  .upload-form__modal-text { color: #555; margin-bottom: 1.5rem; font-weight: 600; }
  .upload-form__modal-btn {
      background: var(--color-accent); color: var(--color-black); 
      border: 3px solid var(--color-black); box-shadow: 4px 4px 0 var(--color-black);
      padding: 0.625rem 1.5rem; font-weight: 700; cursor: pointer; 
      transition: var(--transition-fast); text-transform: uppercase;
  }
  .upload-form__modal-btn:hover { background: var(--color-focus); }
  .upload-form__modal-icon-wrapper { margin: 0 auto 1rem auto; width: 6rem; height: 6rem; }
  .upload-form__modal-svg { color: var(--color-secondary); }
  .upload-form__modal-circle { stroke-dasharray: 157; stroke-dashoffset: 157; animation: upload-form-drawCircle 0.9s cubic-bezier(0.65, 0, 0.45, 1) forwards; fill: none; stroke: currentColor; stroke-width: 3; }
  .upload-form__modal-tick { stroke-dasharray: 48; stroke-dashoffset: 48; animation: upload-form-drawTick 0.8s cubic-bezier(0.65, 0, 0.45, 1) 0.9s forwards; fill: none; stroke: currentColor; stroke-width: 4; stroke-linecap: round; }
  @keyframes upload-form-drawCircle { to { stroke-dashoffset: 0; } }
  @keyframes upload-form-drawTick { to { stroke-dashoffset: 0; } }
</style>


<script>
  (function() {
    if (!document.querySelector('.upload-form-scope-xyz')) return;

    document.addEventListener('DOMContentLoaded', () => {
      if (typeof Quill === 'undefined') {
        const quillJs = document.createElement('script');
        quillJs.src = 'https://cdn.quilljs.com/1.3.6/quill.js';
        quillJs.onload = () => initializeComponent(true);
        document.body.appendChild(quillJs);
      } else {
        initializeComponent(true);
      }
    });

    function initializeComponent(isQuillAvailable) {
      
      class UIHandler {
        constructor(containerId) { this.appContainer = document.getElementById(containerId); }
        render(templateId, onRender) {
          this.appContainer.innerHTML = '';
          const template = document.getElementById(templateId);
          if (!template) return;
          const clone = template.content.cloneNode(true);
          this.appContainer.appendChild(clone);
          if (onRender) onRender();
        }
        // CORRECTED: showModal function
        showModal(onDismiss) {
            const template = document.getElementById('template-modal');
            if (!template) return;
            // Prevent multiple modals from being added
            if (document.getElementById('successModalContainer')) return;
            
            const clone = template.content.cloneNode(true);
            document.body.appendChild(clone);
            
            const modalContainer = document.getElementById('successModalContainer');
            const dismissBtn = document.getElementById('dismissModalBtn');
            
            // Trigger fade in animation
            setTimeout(() => modalContainer.classList.add('visible'), 10);
            
            const dismiss = () => {
                modalContainer.classList.remove('visible');
                setTimeout(() => {
                    modalContainer.remove();
                    if (onDismiss) onDismiss();
                }, 300); // Wait for fade out animation to finish
            };

            dismissBtn.addEventListener('click', dismiss);
            modalContainer.addEventListener('click', (e) => {
                if (e.target === modalContainer) {
                    dismiss();
                }
            });
        }
      }

      class Uploader {
        constructor() { this.CHUNK_SIZE_MB = 5; this.queue = []; this.currentIndex = 0; this.state = this._resetState(); }
        _resetState() { return { file: null, fileType: null, fileId: null, key: null, generatedFileName: null, uploadId: null, completedParts: [], bytesUploadedFromCompletedParts: 0, isUploading: false, isPaused: false, currentXhr: null, uploadStartTime: null }; }
        enqueueFiles(files) { this.queue = files; this.currentIndex = 0; }
        async startNext(onSuccess, onFail, onProgressUpdate) { if (this.currentIndex >= this.queue.length) { if (onSuccess) onSuccess(); return; } this.state = this._resetState(); const currentFile = this.queue[this.currentIndex]; this.state.file = currentFile.file; this.state.fileType = currentFile.type; this.state.fileId = currentFile.id; try { onProgressUpdate({ type: 'status', message: `Preparing to upload ${this.state.file.name}...` }); const response = await fetch(`/start-multipart-upload`, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ fileName: this.state.file.name, contentType: this.state.file.type, fileType: this.state.fileType, fileId: this.state.fileId }) }); if (!response.ok) throw new Error("Failed to initiate multipart upload."); const data = await response.json(); this.state.uploadId = data.uploadId; this.state.key = data.key; this.state.generatedFileName = data.generatedFileName; this.state.uploadStartTime = Date.now(); await this._uploadChunks(onProgressUpdate); if (this.state.isPaused) { return; } await this._completeUpload(onProgressUpdate); this.currentIndex++; await this.startNext(onSuccess, onFail, onProgressUpdate); } catch (error) { if (onFail) onFail(error); } }
        _uploadChunks(onProgressUpdate) { return new Promise(async (resolve, reject) => { this.state.isUploading = true; const chunkSize = this.CHUNK_SIZE_MB * 1024 * 1024; const totalChunks = Math.ceil(this.state.file.size / chunkSize); for (let partNumber = this.state.completedParts.length + 1; partNumber <= totalChunks; partNumber++) { if (this.state.isPaused) { this.state.isUploading = false; return resolve(); } const start = (partNumber - 1) * chunkSize; const end = Math.min(start + chunkSize, this.state.file.size); const chunk = this.state.file.slice(start, end); onProgressUpdate({ type: 'status', message: `Uploading ${this.state.file.name} (part ${partNumber} of ${totalChunks})...` }); try { await this._uploadPart(partNumber, chunk, onProgressUpdate); } catch (error) { this.state.isUploading = false; return reject(error); } } this.state.isUploading = false; resolve(); }); }
        _uploadPart(partNumber, chunk, onProgressUpdate) { return new Promise(async (resolve, reject) => { try { const queryString = `?key=${encodeURIComponent(this.state.key)}&uploadId=${this.state.uploadId}&partNumber=${partNumber}&fileType=${this.state.fileType}`; const response = await fetch(`/get-presigned-part-url${queryString}`); if (!response.ok) return reject(new Error("Failed to get presigned URL.")); const { url } = await response.json(); const xhr = new XMLHttpRequest(); this.state.currentXhr = xhr; xhr.upload.onprogress = (e) => { const totalBytesUploaded = this.state.bytesUploadedFromCompletedParts + e.loaded; const totalProgress = (totalBytesUploaded / this.state.file.size) * 100; const elapsedTime = (Date.now() - this.state.uploadStartTime) / 1000; const speed = totalBytesUploaded / elapsedTime; const timeRemaining = speed > 0 ? (this.state.file.size - totalBytesUploaded) / speed : Infinity; onProgressUpdate({ type: 'progress', progress: totalProgress, speed, timeRemaining, uploadedBytes: totalBytesUploaded, totalBytes: this.state.file.size }); }; xhr.onload = () => { if (xhr.status === 200) { this.state.completedParts.push({ ETag: xhr.getResponseHeader("ETag"), PartNumber: partNumber }); this.state.bytesUploadedFromCompletedParts += chunk.size; resolve(); } else { reject(new Error(`Part upload failed with status ${xhr.status}.`)); } }; xhr.onerror = () => reject(new Error("Network error during part upload.")); xhr.onabort = () => resolve(); xhr.open("PUT", url); xhr.setRequestHeader("Content-Type", "application/octet-stream"); xhr.send(chunk); } catch (error) { reject(error); } }); }
        async _completeUpload(onProgressUpdate) { onProgressUpdate({ type: 'status', message: "Finalizing upload..." }); const response = await fetch("/complete-multipart-upload", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ key: this.state.key, uploadId: this.state.uploadId, parts: this.state.completedParts, fileType: this.state.fileType, fileId: this.state.fileId, generatedFileName: this.state.generatedFileName, fileSize: this.state.file.size }), }); if (!response.ok) throw new Error("Failed to complete upload."); }
        togglePause(onProgressUpdate) { this.state.isPaused = !this.state.isPaused; if(this.state.isPaused) { if (this.state.currentXhr) this.state.currentXhr.abort(); onProgressUpdate({ type: 'status', message: 'Upload paused.' }); } else { onProgressUpdate({ type: 'status', message: 'Resuming upload...' }); this._uploadChunks(onProgressUpdate); } }
        cancel(onCancel) { if (this.state.currentXhr) this.state.currentXhr.abort(); this.state = this._resetState(); this.queue = []; this.currentIndex = 0; if(onCancel) onCancel(); }
      }

      const ui = new UIHandler('upload-form-app-container');
      const uploader = new Uploader();
      let formData = {};
      let imageFile, mainFile, quillEditor;

      const formatBytes = (bytes) => (bytes === 0 ? '0 B' : ( (k=1024, sizes=['B', 'KB', 'MB', 'GB'], i=Math.floor(Math.log(bytes)/Math.log(k))) => `${parseFloat((bytes/Math.pow(k,i)).toFixed(2))} ${sizes[i]}`)() );
      const formatRate = (bytes) => `${formatBytes(bytes)}/s`;
      const formatTime = (seconds) => (seconds === Infinity || seconds < 0 ? "--:--" : `${Math.floor(seconds/60)}m ${Math.floor(seconds%60)}s`);

      const updateProgressUI = (event) => {
        const status=document.getElementById('uploadStatusMessage'), progressText=document.getElementById('uploadProgressText'), progressBar=document.getElementById('uploadProgressBar'), bytesText=document.getElementById('uploadBytesText'), speedText=document.getElementById('uploadSpeed'), timeText=document.getElementById('uploadTime');
        if (event.type === 'status' && status) status.textContent = event.message;
        if (event.type === 'progress') {
          if(progressBar) progressBar.value = event.progress;
          if(progressText) progressText.textContent = `${event.progress.toFixed(1)}%`;
          if(bytesText) bytesText.textContent = `${formatBytes(event.uploadedBytes)} / ${formatBytes(event.totalBytes)}`;
          if(speedText) speedText.textContent = formatRate(event.speed);
          if(timeText) timeText.textContent = formatTime(event.timeRemaining);
        }
      };
      
      const initializeFormStage = () => {
        ui.render('template-upload-form', () => {
          if (isQuillAvailable) { quillEditor = new Quill('#descriptionEditorContainer', { theme: 'snow', modules: { toolbar: [['bold', 'italic', 'underline'], [{ 'list': 'ordered'}, { 'list': 'bullet' }]] } }); }
          const form = document.getElementById('upload-form-main'), reviewBtn = document.getElementById('reviewUploadBtn'), imageInput = document.getElementById('imageUploadInput'), fileInput = document.getElementById('fileUploadInput'), couponToggle = document.getElementById('couponToggleCheckbox'), couponDetails = document.getElementById('couponDetailsContainer'), charCounter = document.getElementById('descriptionCharCounter');
          const truncateFilename = (name, max=25) => name.length <= max ? name : `${name.slice(0, max-4)}...${name.split('.').pop()}`;
          const checkFormValidity = () => {
            let isValid = true;
            form.querySelectorAll('[required]').forEach(input => { if ((input.type === 'checkbox' && !input.checked) || (input.type !== 'checkbox' && !input.value.trim())) isValid = false; });
            if (quillEditor && quillEditor.getLength() <= 1) isValid = false;
            reviewBtn.disabled = !isValid;
          };
          form.addEventListener('input', checkFormValidity);
          if (quillEditor) {
            quillEditor.on('text-change', () => {
              const len = quillEditor.getLength() - 1;
              charCounter.textContent = `${len} / 500`;
              if (len > 500) { quillEditor.deleteText(500, len); charCounter.style.color = 'var(--danger-color)'; } else { charCounter.style.color = 'var(--text-secondary)'; }
              checkFormValidity();
            });
          }
          couponToggle.addEventListener('change', () => couponDetails.classList.toggle('visible', couponToggle.checked));
          const setupDropArea = (areaId, inputId, textId) => {
            const area = document.getElementById(areaId), input = document.getElementById(inputId), text = document.getElementById(textId);
            const MAX_FILE_SIZE_BYTES = 8 * 1024 * 1024 * 1024; // 8 GB
            area.addEventListener('click', () => input.click());
            ['dragenter', 'dragover'].forEach(eName => area.addEventListener(eName, e => { e.preventDefault(); area.classList.add('dragover'); }));
            ['dragleave', 'drop'].forEach(eName => area.addEventListener(eName, e => { e.preventDefault(); area.classList.remove('dragover'); }));
            area.addEventListener('drop', e => { input.files = e.dataTransfer.files; input.dispatchEvent(new Event('change')); });
            input.addEventListener('change', () => {
              if (input.files.length > 0) {
                const file = input.files[0];
                if (inputId === 'fileUploadInput' && file.size > MAX_FILE_SIZE_BYTES) {
                  alert(`File is too large (${formatBytes(file.size)}). The maximum allowed size is 8 GB.`);
                  input.value = ''; area.classList.remove('file-selected'); text.textContent = 'PDF, ZIP, PPT, DOCS';
                  return;
                }
                text.textContent = truncateFilename(file.name);
                area.classList.add('file-selected');
              }
              checkFormValidity();
            });
          };
          setupDropArea('imageUploadArea', 'imageUploadInput', 'imageUploadText');
          setupDropArea('fileUploadArea', 'fileUploadInput', 'fileUploadText');
          
          reviewBtn.addEventListener('click', (e) => {
            e.preventDefault(); if (reviewBtn.disabled) return;
            formData = {
              title: document.getElementById('uploadFormTitle').value,
              descriptionHTML: isQuillAvailable ? quillEditor.root.innerHTML : "Description not available.",
              price: document.getElementById('uploadFormPrice').value,
              category: document.getElementById('uploadFormCategory').value,
              fileSize: document.getElementById('fileUploadInput').files[0].size,
              couponCode: couponToggle.checked ? document.getElementById('couponCode').value : null,
              couponPercentage: couponToggle.checked ? document.getElementById('couponPercentage').value : null,
              couponExpiry: couponToggle.checked ? document.getElementById('couponExpiry').value : null,
              imageType: document.getElementById('imageUploadInput').files[0].type.split('/')[1]
            };
            imageFile = imageInput.files[0]; mainFile = fileInput.files[0];
            goToPreviewStage();
          });
        });
      };

      const goToPreviewStage = () => {
        ui.render('template-preview', () => {
          document.getElementById('backToFormBtn').addEventListener('click', initializeFormStage);
          document.getElementById('previewImage').style.backgroundImage = `url(${URL.createObjectURL(imageFile)})`;
          document.getElementById('previewFileName').textContent = mainFile.name;
          document.getElementById('previewTitle').textContent = formData.title;
          document.getElementById('previewDescription').querySelector('.ql-editor').innerHTML = formData.descriptionHTML;
          document.getElementById('previewPrice').textContent = `â‚¹ ${formData.price}`;
          document.getElementById('previewCategory').textContent = formData.category;
          const couponSection = document.getElementById('previewCouponSection');
          if (formData.couponCode) {
            couponSection.style.display = 'contents';
            document.getElementById('previewCoupon').textContent = `${formData.couponCode} (${formData.couponPercentage}%)`;
            document.getElementById('previewCouponExpiry').textContent = formData.couponExpiry ? new Date(formData.couponExpiry).toLocaleDateString() : 'No expiry date';
          } else {
            couponSection.style.display = 'none';
          }
          const publishBtn = document.getElementById('publishBtn');
          publishBtn.addEventListener('click', async () => {
            try {
              publishBtn.disabled = true; publishBtn.textContent = 'Preparing...';
              const response = await fetch('/api/create-file-record', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json'},
                body: JSON.stringify(formData)
              });
              if (!response.ok) {
                const errData = await response.json();
                throw new Error(errData.error || 'Could not create file record on server.');
              }
              const { fileId } = await response.json();
              uploader.enqueueFiles([
                { type: 'main', file: mainFile, id: fileId },
                { type: 'image', file: imageFile, id: fileId }
              ]);
              goToUploadProgressStage();
            } catch (error) {
              alert(`Error: ${error.message}`);
              publishBtn.disabled = false; publishBtn.textContent = 'Publish';
            }
          });
        });
      };

const goToUploadProgressStage = () => {
        ui.render('template-upload-progress', () => {
          document.getElementById('pauseResumeBtn').addEventListener('click', (e) => {
            uploader.togglePause(updateProgressUI);
            e.target.textContent = uploader.state.isPaused ? 'Resume' : 'Pause';
          });
          document.getElementById('cancelBtn').addEventListener('click', () => uploader.cancel(() => {
            alert("Upload cancelled.");
            initializeFormStage();
          }));
          
          // CORRECTED: On success, the modal's dismiss button now resets the form.
          uploader.startNext(
            () => ui.showModal(initializeFormStage), 
            (err) => { alert(`Upload failed: ${err.message}`); initializeFormStage(); },
            updateProgressUI
          );
        });
      };
      
      initializeFormStage();
    }
  })();
</script>