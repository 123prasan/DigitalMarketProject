<%-include("header")%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vidyari: Find Your Edge</title>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3321203820490717" crossorigin="anonymous"></script>
    <meta name="google-site-verification" content="Hcnu9BHn9udbxOrSebP2NCm4kTf0IwYg9mStgcwI0BU" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Anton&family=Space+Mono:wght@400;700&display=swap" rel="stylesheet">

    <link rel="icon" type="image/svg+xml" href="/images/logo.svg">
    <link rel="alternate icon" type="image/png" href="/images/logo.png">
    <link rel="manifest" href="/manifest.json">
    <meta property="og:title" content="Vidyari">
    <meta property="og:type" content="website">
    <meta property="og:url" content="https://www.vidyari.com/">
    <meta property="og:image" content="https://www.vidyari.com/images/logo.svg">
    <meta property="og:description" content="Vidyari - Study materials, courses, and resources for learners">
    <meta property="og:site_name" content="Vidyari">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:title" content="Vidyari">
    <meta name="twitter:description" content="Vidyari - Study materials, courses, and resources for learners">
    <meta name="twitter:image" content="https://www.vidyari.com/images/logo.svg">
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": "Vidyari",
      "url": "https://www.vidyari.com",
      "logo": "https://www.vidyari.com/images/logo.svg"
    }
    </script>

    <style>
        :root {
            --font-heading: 'Anton', 'Arial Black', sans-serif;
            --font-body: 'Space Mono', monospace;
            --color-bg: #ffffff;
            --color-text: #000000;
            --color-black: #000000;
            --color-white: #ffffff;
            --color-border: #000000;
            --color-fieldset-bg: #f0f0f0;
            --color-accent-1: #00cc00; /* Green */
            --color-accent-2: #ff00ff; /* Pink */
            --color-accent-3: #ff9900; /* Orange */
            --border-width: 3px;
            --border-style: var(--border-width) solid var(--color-border);
            --transition-speed: 0.1s ease-out;
            --shadow-offset: 5px;
            --grid-gap: 1rem;
            --skeleton-base: #e0e0e0;
            --skeleton-wave: rgba(255, 255, 255, 0.6);
        }

        /* --- Animations --- */
        @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
        @keyframes slideInUpStagger {
            from { opacity: 0; transform: translateY(15px); }
            to { opacity: 1; transform: translateY(0); }
        }
        @keyframes spin { 100% { transform: rotate(360deg); } }
        @keyframes blink-cursor { 50% { opacity: 0; } }

        /* --- Global Reset & Layout --- */
        body {
            font-family: var(--font-body); background-color: var(--color-bg); color: var(--color-text);
            margin: 0; padding: 0; font-weight: 400; cursor: crosshair; overflow-x: hidden;
            background-image:
                linear-gradient(rgba(0, 0, 0, 0.07) 1px, transparent 1px),
                linear-gradient(90deg, rgba(0, 0, 0, 0.07) 1px, transparent 1px);
            background-size: 25px 25px;
        }
        * { box-sizing: border-box; border-radius: 0 !important; }
        h1, h2, h3, h4, h5, h6 { font-family: var(--font-heading); font-weight: 400; text-transform: uppercase; color: var(--color-text); margin: 0; padding: 0; }
        a { color: var(--color-accent-2); transition: color var(--transition-speed); text-decoration: none; }
        a:hover { color: var(--color-accent-1); text-decoration: underline; }

        /* --- Page Container Grid --- */
        .page-container { display: grid; grid-template-columns: 1fr; grid-template-areas: "main"; gap: var(--grid-gap); padding: var(--grid-gap); min-height: calc(100vh - 60px); }
        @media (min-width: 992px) { .page-container { grid-template-columns: 320px 1fr; grid-template-areas: "sidebar main"; } }

        /* --- Header --- */
        .site-header { background-color: var(--color-bg); border-bottom: var(--border-width) solid var(--color-black); position: sticky; top: 0; z-index: 1020; padding: 0.75rem 1.5rem; }
        .brand-name { font-family: var(--font-heading); font-size: 2rem; font-weight: 400; color: var(--color-black); line-height: 1; letter-spacing: -1px; text-shadow: 2px 2px 0 var(--color-accent-1); transition: text-shadow var(--transition-speed); display: inline-block; vertical-align: middle; }
        .brand-name:hover { text-shadow: 4px 4px 0 var(--color-accent-2); }
        .header-actions { gap: 0.75rem; }
        .action-button { display: inline-flex; width: auto; align-items: center; justify-content: center; gap: 0.75rem; background: var(--color-accent-3); border: var(--border-width) solid var(--color-black); color: var(--color-black); font-family: var(--font-heading); padding: 8px 15px; font-size: 1rem; text-transform: uppercase; text-align: center; text-decoration: none; cursor: cell; transition: all var(--transition-speed); box-shadow: var(--shadow-offset) var(--shadow-offset) 0 var(--color-black); }
        .action-button:hover { transform: translate(2px, 2px); box-shadow: calc(var(--shadow-offset) - 2px) calc(var(--shadow-offset) - 2px) 0 var(--color-black); background: var(--color-bg); color: var(--color-accent-3); border-color: var(--color-accent-3); }
        .action-button:active { transform: translate(var(--shadow-offset), var(--shadow-offset)); box-shadow: 0 0 0 var(--color-black); filter: brightness(1.1); } /* Enhanced Active State */
        .action-button.icon-btn { width: 40px; height: 40px; padding: 0; font-size: 1.2rem; }
        .header-icon-btn { width: 40px; height: 40px; display: inline-flex; align-items: center; justify-content: center; padding: 0; background: transparent; border: 2px solid var(--color-black); box-shadow: 3px 3px 0 var(--color-black); color: var(--color-black); cursor: pointer; transition: all var(--transition-speed); font-size: 1.1rem; }
        .header-icon-btn:hover { background-color: var(--color-fieldset-bg); transform: translate(1px, 1px); box-shadow: 2px 2px 0 var(--color-black); }
        .header-icon-btn:active { transform: translate(3px, 3px); box-shadow: 0 0 0 var(--color-black); background-color: var(--color-accent-1); }
        .user-avatar { width: 40px; height: 40px; cursor: pointer; border: 2px solid var(--color-black); object-fit: cover; }

        /* --- Main Content Area --- */
        .main-content { grid-area: main; animation: fadeIn 0.5s 0.1s ease-out backwards; display: flex; flex-direction: column; }
        .page-title { font-size: 2rem; color: var(--color-accent-2); border-bottom: 4px solid var(--color-accent-2); display: inline-block; margin-bottom: 1rem; }
        #resultsCounter { font-family: var(--font-body); font-weight: 700; color: #555; margin-bottom: 1rem; font-size: 0.9rem; }

        /* --- Integrated Search Bar --- */
        .search-section { margin-bottom: 1.5rem; position: relative; }
        .search-input-wrapper { display: flex; border: var(--border-style); box-shadow: var(--shadow-offset) var(--shadow-offset) 0 var(--color-black); position: relative; transition: border-color var(--transition-speed), box-shadow var(--transition-speed); }
        #inlineSearchInput { flex-grow: 1; border: none; outline: none; font-size: 1.1rem; font-family: var(--font-body); font-weight: 700; padding: 0.75rem 1rem; background: var(--color-white); color: var(--color-text); }
        #inlineSearchInput::placeholder { color: #aaa; font-weight: 400; }
        /* Focus State for Search Wrapper */
        .search-input-wrapper:focus-within { border-color: var(--color-accent-2); box-shadow: var(--shadow-offset) var(--shadow-offset) 0 var(--color-accent-2); }
        /* Blinking Cursor Effect */
        .search-input-wrapper::after { content: ''; display: block; width: var(--border-width); background-color: var(--color-accent-2); position: absolute; right: calc(40px + 1.2rem + 10px); /* Adjust based on button width/padding */ top: 25%; bottom: 25%; opacity: 0; animation: blink-cursor 1s step-end infinite; transition: opacity var(--transition-speed); }
        .search-input-wrapper:focus-within::after { opacity: 1; }
        #searchSubmitBtn { display: inline-flex; width: auto; align-items: center; justify-content: center; gap: 0.5rem; background: var(--color-accent-3); border: none; border-left: var(--border-style); color: var(--color-black); font-family: var(--font-heading); padding: 0 1.2rem; font-size: 1rem; text-transform: uppercase; cursor: pointer; transition: all var(--transition-speed); }
        #searchSubmitBtn:hover { background: var(--color-black); color: var(--color-accent-3); }
        /* Search Suggestions Dropdown */
        #inlineSuggestions { display: none; position: absolute; top: calc(100% + 5px); left: 0; right: 0; background: var(--color-bg); border: var(--border-style); box-shadow: var(--shadow-offset) var(--shadow-offset) 0 var(--color-black); max-height: 300px; overflow-y: auto; z-index: 1000; padding: 0.5rem; /* Animation */ opacity: 0; transform: translateY(-10px); transition: opacity 0.2s ease-out, transform 0.2s ease-out; }
        #inlineSuggestions.is-open { display: block; opacity: 1; transform: translateY(0); }
        .suggestion-item { display: flex; align-items: center; gap: 0.75rem; padding: 0.75rem; text-decoration: none; color: var(--color-black); transition: background-color 0.2s ease; border-bottom: 2px solid var(--color-fieldset-bg); cursor: pointer; }
        .suggestion-item:last-child { border-bottom: none; }
        .suggestion-item:hover { background-color: var(--color-fieldset-bg); }
        .suggestion-thumb { width: 35px; height: 35px; object-fit: cover; border: 2px solid var(--color-black); flex-shrink: 0; }
        .suggestion-info { display: flex; flex-direction: column; overflow: hidden; }
        .suggestion-title { font-family: var(--font-body); font-weight: 700; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; font-size: 0.9rem; }
        .suggestion-title strong { color: var(--color-accent-2); }
        .suggestion-user { font-size: 0.75rem; color: #555; }

        /* --- Filter Sidebar & Mobile Button --- */
        .sidebar-filters { grid-area: sidebar; background: var(--color-bg); border-right: var(--border-width) solid var(--color-black); padding: 1.5rem; position: sticky; top: calc(60px + var(--grid-gap)); height: calc(100vh - 60px - 2 * var(--grid-gap)); overflow-y: auto; display: none; -ms-overflow-style: none; scrollbar-width: none; }
        .sidebar-filters::-webkit-scrollbar { display: none; }
        .filter-btn-mobile { display: inline-flex; align-items: center; justify-content: center; gap: 0.5rem; width: auto; background: var(--color-accent-3); border: var(--border-width) solid var(--color-black); color: var(--color-black); font-family: var(--font-heading); padding: 8px 15px; font-size: 1rem; text-transform: uppercase; text-align: center; text-decoration: none; cursor: cell; transition: all var(--transition-speed); box-shadow: var(--shadow-offset) var(--shadow-offset) 0 var(--color-black); }
        .filter-btn-mobile .filter-count { background: var(--color-black); color: var(--color-white); font-family: var(--font-body); font-size: 0.8rem; font-weight: 700; padding: 0 5px; min-width: 20px; height: 20px; line-height: 18px; text-align: center; display: inline-block; }
        .filter-btn-mobile:hover { transform: translate(2px, 2px); box-shadow: calc(var(--shadow-offset) - 2px) calc(var(--shadow-offset) - 2px) 0 var(--color-black); background: var(--color-bg); color: var(--color-accent-3); border-color: var(--color-accent-3); }
        .filter-btn-mobile:active { transform: translate(var(--shadow-offset), var(--shadow-offset)); box-shadow: 0 0 0 var(--color-black); }
        @media (min-width: 992px) { .sidebar-filters { display: block; } .filter-btn-mobile { display: none; } }
        /* Filter Fieldset Styling */
        .sidebar-filters fieldset, .filter-modal-body fieldset { border-color: var(--color-accent-1); margin-bottom: 1.5rem; background: var(--color-fieldset-bg); border: var(--border-style); padding: 1rem; transition: border-color 0.2s ease; }
        .sidebar-filters fieldset.filter-active, .filter-modal-body fieldset.filter-active { border-color: var(--color-accent-2); /* Pink border if active */ border-width: 4px; }
        .sidebar-filters legend, .filter-modal-body legend { color: var(--color-text); background: var(--color-fieldset-bg); font-family: var(--font-body); font-weight: 700; font-size: 0.9rem; padding: 0 0.5rem; margin-left: 0.5rem; text-transform: uppercase; transition: color 0.2s ease; }
        .sidebar-filters fieldset.filter-active legend, .filter-modal-body fieldset.filter-active legend { color: var(--color-accent-2); }
        .sidebar-filters .form-label, .filter-modal-body .form-label { font-family: var(--font-body); font-weight: 700; text-transform: uppercase; font-size: 0.8rem; margin-bottom: 0.5rem; color: var(--color-text); }
        .sidebar-filters .form-select, .sidebar-filters .form-control, .filter-modal-body .form-select, .filter-modal-body .form-control { border: 2px solid var(--color-black) !important; box-shadow: none !important; background: var(--color-white); color: var(--color-black); font-family: var(--font-body); font-weight: 700; padding: 0.5rem 0.75rem; font-size: 0.9rem; }
        .sidebar-filters .form-check-label, .filter-modal-body .form-check-label { font-family: var(--font-body); font-weight: 700; font-size: 0.9rem; }
        /* Enhanced Checkbox Styling */
        .sidebar-filters .form-check-input, .filter-modal-body .form-check-input { border: 2px solid var(--color-black) !important; box-shadow: none !important; margin-top: 0.2em; appearance: none; -webkit-appearance: none; width: 1.1em; height: 1.1em; position: relative; cursor: pointer; }
        .sidebar-filters .form-check-input:checked, .filter-modal-body .form-check-input:checked { background-color: var(--color-accent-2); border-color: var(--color-black) !important; }
        .sidebar-filters .form-check-input:checked::before, .filter-modal-body .form-check-input:checked::before { content: ''; display: block; width: 0.6em; height: 0.6em; background-color: var(--color-black); position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); }
        .filter-group-range { display: flex; align-items: center; gap: 0.5rem; }
        .sidebar-filters .action-button { width: 100%; margin-top: 0.5rem; }
        #clearFiltersBtnSidebar, #clearFiltersBtnMobile { background-color: var(--color-fieldset-bg); color: var(--color-black); }
        #clearFiltersBtnSidebar:hover, #clearFiltersBtnMobile:hover { background: #ccc; border-color: #ccc; color: var(--color-black); box-shadow: calc(var(--shadow-offset) - 2px) calc(var(--shadow-offset) - 2px) 0 var(--color-black); }
        .filter-scrollable { max-height: 150px; overflow-y: auto; padding-right: 5px; }
         /* Desktop Filter Count */
         .sidebar-title-wrapper { display: flex; align-items: center; justify-content: space-between; margin-bottom: 1rem; border-bottom: 4px solid var(--color-accent-1); padding-bottom: 0.5rem; }
         .sidebar-title { font-size: 1.8rem; color: var(--color-accent-1); margin: 0; padding: 0; border: none; }
         #filterCountBadgeDesktop { /* Style similar to mobile badge */ background: var(--color-black); color: var(--color-white); font-family: var(--font-body); font-size: 0.9rem; font-weight: 700; padding: 2px 8px; display: inline-block; }


        /* --- File Card Grid --- */
        .file-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: var(--grid-gap); margin-bottom: auto; }
        .file-card { display: block; border: var(--border-style); text-decoration: none; color: var(--color-text); background: var(--color-bg); transition: all var(--transition-speed); position: relative; cursor: alias; height: 100%; display: flex; flex-direction: column; opacity: 0; /* Initial state for stagger */ }
        .file-card.stagger-in { animation: slideInUpStagger 0.4s ease-out forwards; } /* Stagger animation */
        .file-card:hover { transform: translate(3px, 3px); border-color: var(--color-accent-1); }
        .card-image-container { display: block; width: 100%; aspect-ratio: 3 / 4; /* Book cover */ background-color: #eee; border-bottom: var(--border-style); padding: 5px; overflow: hidden; flex-shrink: 0; position: relative; } /* Added position relative */
        .file-card:hover .card-image-container { border-bottom-color: var(--color-accent-1); }
        .card-thumbnail { width: 100%; height: 100%; object-fit: cover; /* Fill container */ display: block; transition: transform 0.3s ease; }
        .file-card:hover .card-thumbnail { transform: scale(1.03); }
        /* Card Category Tag Overlay */
        .card-category-tag { position: absolute; top: 0; left: 0; background: var(--color-accent-1); color: var(--color-black); font-family: var(--font-body); font-weight: 700; font-size: 0.7rem; padding: 2px 6px; border-right: var(--border-style); border-bottom: var(--border-style); z-index: 2; }
        .file-card:hover .card-category-tag { background: var(--color-accent-1); border-color: var(--color-black); }
        .card-info { padding: 0.6rem; background: var(--color-bg); flex-grow: 1; display: flex; flex-direction: column; justify-content: space-between; min-height: 65px; }
        .file-card:hover .card-info { background: var(--color-bg); }
        .card-title { font-family: var(--font-body); font-weight: 700; font-size: 0.85rem; color: var(--color-text); text-transform: none; word-wrap: break-word; margin: 0 0 0.4rem 0; display: -webkit-box; -webkit-line-clamp: 2; -webkit-box-orient: vertical; overflow: hidden; line-height: 1.3; }
        .file-card:hover .card-title { color: var(--color-text); }
        .card-price { font-family: var(--font-body); font-weight: 700; font-size: 0.75rem; padding: 0.15rem 0.5rem; border: 2px solid var(--color-black); text-transform: uppercase; align-self: flex-start; }
        .badge-free { background: var(--color-accent-1); color: var(--color-black); }
        .badge-paid { background: var(--color-accent-2); color: var(--color-black); }
        .file-card:hover .card-price { border-color: var(--color-black); }

        /* --- Skeleton Loading --- */
         .skeleton-card .card-image-container { background-color: var(--skeleton-base) !important; border-bottom-color: var(--skeleton-base); position: relative; overflow: hidden; aspect-ratio: 3 / 4; }
         .skeleton-card .card-image-container::before { content: ''; position: absolute; top: 0; left: -100%; width: 100%; height: 100%; background: linear-gradient(90deg, transparent, var(--skeleton-wave), transparent); animation: wave-bg 1.5s infinite; }
         .skeleton-card .card-info { background-color: var(--color-white); min-height: 65px; }
         .skeleton-text { height: 10px; margin-bottom: 6px; width: 85%; background-color: var(--skeleton-base); animation: pulse-bg-light 1.5s infinite; }
         .skeleton-price { height: 18px; width: 45px; background-color: var(--skeleton-base); animation: pulse-bg-light 1.5s infinite; }
         /* ASCII Loader */
         #loadingIndicator pre { font-family: var(--font-body); font-size: 1.5rem; color: var(--color-accent-1); animation: spin 1s linear infinite; display: inline-block; }


        /* --- Pagination --- */
        .pagination-controls { display: flex; justify-content: space-between; align-items: center; margin-top: 2.5rem; color: var(--color-text); border-top: var(--border-width) solid var(--color-black); padding-top: 1.5rem; }
        .pagination-btn { display: inline-flex; background: var(--color-accent-3); border: var(--border-width) solid var(--color-black); color: var(--color-black); font-family: var(--font-heading); padding: 8px 20px; font-size: 1rem; text-transform: uppercase; cursor: pointer; transition: all var(--transition-speed); box-shadow: 4px 4px 0 var(--color-black); }
        .pagination-btn:hover { transform: translate(1px, 1px); box-shadow: 3px 3px 0 var(--color-black); background: var(--color-bg); color: var(--color-accent-3); border-color: var(--color-accent-3); }
        .pagination-btn:active { transform: translate(4px, 4px); box-shadow: 0 0 0 var(--color-black); filter: brightness(1.1); }
        .pagination-btn:disabled { background-color: #aaa; color: #555; border-color: #aaa; cursor: not-allowed; transform: none; box-shadow: none; }
        .pagination-numbers { display: flex; gap: 5px; }
        .page-number-btn { border: 2px solid var(--color-black); background: var(--color-bg); color: var(--color-black); padding: 4px 10px; font-size: 0.9rem; font-family: var(--font-body); font-weight: 700; cursor: pointer; transition: all var(--transition-speed); line-height: 1.5; }
        .page-number-btn.active { background: var(--color-accent-2); color: var(--color-black); border-color: var(--color-black); }
        .page-number-btn:hover:not(.active) { background: var(--color-fieldset-bg); }
        .page-number-btn:active { transform: translate(2px, 2px); }
        @media (max-width: 767px) { .pagination-controls { padding: 15px 5px; gap: 5px; } .pagination-btn { padding: 5px 10px; font-size: 0.8rem; box-shadow: 3px 3px 0 var(--color-black); } .pagination-btn:active { transform: translate(3px, 3px); box-shadow: 0 0 0 var(--color-black); } .pagination-numbers { gap: 2px; } .page-number-btn { padding: 3px 6px; font-size: 0.7rem; line-height: 1.2; } }

        /* --- Modals --- */
        /* Filter Modal */
        .filter-modal-overlay { position: fixed; inset: 0; background-color: rgba(0,0,0,0.5); display: none; align-items: center; justify-content: center; z-index: 3000; opacity: 0; visibility: hidden; transition: opacity 0.3s ease, visibility 0.3s ease; backdrop-filter: blur(3px); -webkit-backdrop-filter: blur(3px); }
        .filter-modal-overlay.is-open { opacity: 1; visibility: visible; display: flex; }
        .filter-modal-content { background: var(--color-bg); border: var(--border-style); box-shadow: 8px 8px 0 var(--color-black); width: 90%; max-width: 500px; transform: scale(0.95); transition: transform 0.3s ease; color: var(--color-text); }
        .filter-modal-overlay.is-open .filter-modal-content { transform: scale(1); }
        .filter-modal-header { display: flex; justify-content: space-between; align-items: center; padding: 1rem 1.5rem; border-bottom: var(--border-style); }
        .filter-modal-title { font-family: var(--font-heading); font-weight: 400; text-transform: uppercase; font-size: 1.5rem; color: var(--color-accent-2); margin: 0; }
        .filter-modal-close { font-size: 1.5rem; background: none; border: none; cursor: pointer; color: var(--color-text); font-weight: 700; }
        .filter-modal-close:hover { color: var(--color-accent-2); }
        .filter-modal-body { padding: 1.5rem; max-height: 70vh; overflow-y: auto; }
        .filter-modal-footer { display: flex; justify-content: flex-end; gap: 0.5rem; padding: 1rem 1.5rem; border-top: var(--border-style); }

        /* Notification Modal */
         .notification-modal-content { border: var(--border-style) !important; box-shadow: 8px 8px 0 var(--color-black) !important; border-radius: 0 !important; font-family: var(--font-body); background-color: var(--color-bg); overflow: hidden; color: var(--color-text); }
         .modal-title-custom { font-family: var(--font-heading); font-size: 1.4rem; color: var(--color-accent-2); }
         .notify-gif-wrapper { border-radius: 0; width: 90px; height: 90px; display: flex; align-items: center; justify-content: center; overflow: hidden; animation: pulse-border 1.5s infinite; margin: 0 auto 1rem auto; border: 2px solid var(--color-black); }
         .animated-notification-gif { width: 100%; height: 100%; object-fit: cover; animation: slight-zoom 3s ease-in-out infinite alternate; }
         .chunky-btn-animated { display: inline-flex; width: 100%; align-items: center; justify-content: center; gap: 0.75rem; background: var(--color-accent-1); border: var(--border-width) solid var(--color-black); color: var(--color-black); font-family: var(--font-heading); padding: 10px 20px; font-size: 1rem; text-transform: uppercase; text-align: center; text-decoration: none; cursor: pointer; transition: all var(--transition-speed); box-shadow: 4px 4px 0 var(--color-black); position: relative; overflow: hidden; }
         .chunky-btn-animated:hover { transform: scale(1.02); box-shadow: 6px 6px 0 var(--color-black); }
         .chunky-btn-animated::before { content: ''; position: absolute; top: 0; left: -75%; width: 50%; height: 100%; background: linear-gradient(to right, rgba(255,255,255,0) 0%, rgba(255,255,255,0.6) 50%, rgba(255,255,255,0) 100%); transform: skewX(-20deg); animation: shimmer 1.5s infinite; }
         @keyframes shimmer { 0% { left: -75%; } 100% { left: 100%; } }
         @keyframes pulse-border { 0% { box-shadow: 0 0 0 0 rgba(255, 0, 255, 0.7); } 70% { box-shadow: 0 0 0 10px rgba(255, 0, 255, 0); } 100% { box-shadow: 0 0 0 0 rgba(255, 0, 255, 0); } }
         @keyframes slight-zoom { 0% { transform: scale(1); } 100% { transform: scale(1.05); } }
         .notification-modal-content .btn-link { color: #777; font-family: var(--font-body); }

         /* Bootstrap Modal Backdrop Fix */
         .modal-backdrop { z-index: 1040 !important; }
         .filter-modal-overlay { z-index: 1050 !important; }

    </style>
</head>
<body>
    <div class="page-wrapper">
      <main>
        <div class="page-container">

            <aside class="sidebar-filters d-none d-lg-block">
                <div class="sidebar-title-wrapper">
                    <h2 class="sidebar-title">Filters</h2>
                    <span id="filterCountBadgeDesktop" style="display: none;">0</span>
                </div>
                <fieldset class="brutal-fieldset" id="fs-sort">
                     <legend>// SORT BY</legend>
                     <select class="form-select" id="sortBySidebar">
                         <option value="popular">Popularity</option>
                         <option value="newest">Newest</option>
                         <option value="price-asc">Price: Low to High</option>
                         <option value="price-desc">Price: High to Low</option>
                     </select>
                </fieldset>

                <fieldset class="brutal-fieldset" id="fs-price">
                    <legend>// PRICE</legend>
                    <div class="filter-group-range mb-2">
                      <input type="number" id="minPriceSidebar" class="form-control" placeholder="Min ₹" min="0">
                      <span class="d-inline-block p-1 fw-bold">-</span>
                      <input type="number" id="maxPriceSidebar" class="form-control" placeholder="Max ₹" min="0">
                    </div>
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" name="priceFilterSidebar" id="priceFreeOnlySidebar" value="free">
                      <label class="form-check-label" for="priceFreeOnlySidebar">Show FREE only</label>
                    </div>
                </fieldset>

                <fieldset class="brutal-fieldset" id="fs-rating">
                    <legend>// RATING</legend>
                    <select class="form-select" id="minRatingSidebar">
                        <option value="">Any Rating</option>
                        <option value="4">4 Stars & Up</option>
                        <option value="3">3 Stars & Up</option>
                        <option value="2">2 Stars & Up</option>
                    </select>
                 </fieldset>

                 <fieldset class="brutal-fieldset" id="fs-date">
                     <legend>// UPLOAD DATE</legend>
                     <select class="form-select" id="uploadDateSidebar">
                         <option value="">Any Time</option>
                         <option value="7">Last 7 Days</option>
                         <option value="30">Last 30 Days</option>
                         <option value="90">Last 90 Days</option>
                     </select>
                 </fieldset>

                 <fieldset class="brutal-fieldset" id="fs-seller">
                    <legend>// SELLER STATUS</legend>
                    <div class="form-check">
                      <input class="form-check-input" type="checkbox" name="sellerStatusSidebar" id="verifiedOnlySidebar" value="verified">
                      <label class="form-check-label" for="verifiedOnlySidebar">Verified Sellers Only</label>
                    </div>
                </fieldset>

                <fieldset class="brutal-fieldset" id="fs-category">
                    <legend>// CATEGORY</legend>
                    <div id="categoryFiltersSidebar" class="filter-scrollable">
                        <p class="text-muted small">Loading categories...</p>
                    </div>
                </fieldset>

                 <fieldset class="brutal-fieldset" id="fs-type">
                    <legend>// FILE TYPE</legend>
                    <div id="fileTypeFiltersSidebar" class="filter-scrollable">
                         <p class="text-muted small">Loading types...</p>
                    </div>
                </fieldset>

                <div class="mt-4 d-flex flex-column gap-2">
                     <button type="button" class="action-button" id="applyFiltersBtnSidebar">Apply Filters</button>
                     <button type="button" class="action-button" id="clearFiltersBtnSidebar">Clear All</button>
                </div>
            </aside>

            <div class="main-content">
                <section class="search-section">
                    <div class="search-input-wrapper">
                        <input type="search" id="inlineSearchInput" placeholder="Search Docs..." autocomplete="off">
                        <button id="searchSubmitBtn" aria-label="Submit Search">
                             <i class="fas fa-search"></i>
                        </button>
                    </div>
                     <div id="inlineSuggestions">
                        </div>
                </section>

                <section>
                    <h1 class="page-title" id="grid-main-title">Explore Featured Docs 🚀</h1>
                    <p id="resultsCounter" class="mb-4">Loading...</p>

                    <button class="action-button filter-btn-mobile d-lg-none mb-3" id="openFilterModalBtnMobile">
                        <i class="fas fa-filter"></i>
                        <span>Filter</span>
                        <span class="filter-count" id="filterCountBadgeMobile" style="display: none;">0</span>
                    </button>

                    <div class="file-grid" id="fileGrid">
                        </div>

                    <div id="loadingIndicator" class="text-center py-5 my-5" style="display: none;">
                         <pre></pre>
                    </div>
                    <div id="noResultsBlock" class="text-center py-5 my-5" style="display: none;">
                        <h4 class="mt-4" style="color: var(--color-black);">No Notes Found</h4>
                        <p style="color:#555;">Try a different keyword or adjust your filters.</p>
                    </div>

                    <div id="pagination-controls" class="pagination-controls" style="display: none;">
                        <button id="prevButton" class="pagination-btn">Previous</button>
                        <div id="paginationNumbers" class="pagination-numbers"></div>
                        <button id="nextButton" class="pagination-btn">Next</button>
                    </div>
                </section>
            </div>

        </div>
      </main>
    </div>

    <div class="filter-modal-overlay" id="filterModal">
      <div class="filter-modal-content">
          <div class="filter-modal-header">
            <h5 class="filter-modal-title">Filter & Sort</h5>
            <button type="button" class="filter-modal-close" id="closeFilterModalBtn">&times;</button>
          </div>
          <div class="filter-modal-body">
             <fieldset class="brutal-fieldset" id="fs-sort-mobile">
                 <legend>// SORT BY</legend>
                 <select class="form-select" id="sortByMobile">
                     <option value="popular">Popularity</option><option value="newest">Newest</option>
                     <option value="price-asc">Price: Low to High</option><option value="price-desc">Price: High to Low</option>
                 </select>
            </fieldset>

            <fieldset class="brutal-fieldset" id="fs-price-mobile">
                <legend>// PRICE</legend>
                <div class="filter-group-range mb-2">
                  <input type="number" id="minPriceMobile" class="form-control" placeholder="Min ₹" min="0">
                  <span class="d-inline-block p-1 fw-bold">-</span>
                  <input type="number" id="maxPriceMobile" class="form-control" placeholder="Max ₹" min="0">
                </div>
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" name="priceFilterMobile" id="priceFreeOnlyMobile" value="free">
                  <label class="form-check-label" for="priceFreeOnlyMobile">Show FREE only</label>
                </div>
            </fieldset>

            <fieldset class="brutal-fieldset" id="fs-rating-mobile">
                <legend>// RATING</legend>
                 <select class="form-select" id="minRatingMobile">
                     <option value="">Any Rating</option>
                     <option value="4">4 Stars & Up</option>
                     <option value="3">3 Stars & Up</option>
                     <option value="2">2 Stars & Up</option>
                 </select>
            </fieldset>

             <fieldset class="brutal-fieldset" id="fs-date-mobile">
                 <legend>// UPLOAD DATE</legend>
                 <select class="form-select" id="uploadDateMobile">
                     <option value="">Any Time</option>
                     <option value="7">Last 7 Days</option>
                     <option value="30">Last 30 Days</option>
                     <option value="90">Last 90 Days</option>
                 </select>
            </fieldset>

            <fieldset class="brutal-fieldset" id="fs-seller-mobile">
                <legend>// SELLER STATUS</legend>
                 <div class="form-check">
                   <input class="form-check-input" type="checkbox" name="sellerStatusMobile" id="verifiedOnlyMobile" value="verified">
                   <label class="form-check-label" for="verifiedOnlyMobile">Verified Sellers Only</label>
                 </div>
            </fieldset>


            <fieldset class="brutal-fieldset" id="fs-category-mobile">
                <legend>// CATEGORY</legend>
                <div id="categoryFiltersMobile" class="filter-scrollable"><p class="text-muted small">Loading...</p></div>
            </fieldset>

            <fieldset class="brutal-fieldset" id="fs-type-mobile">
                <legend>// FILE TYPE</legend>
                <div id="fileTypeFiltersMobile" class="filter-scrollable"><p class="text-muted small">Loading...</p></div>
            </fieldset>

          </div>
          <div class="filter-modal-footer">
            <button type="button" class="action-button" id="clearFiltersBtnMobile">Clear</button>
            <button type="button" class="action-button" id="applyFiltersBtnMobile">Apply</button>
          </div>
      </div>
    </div>

    <% if(isLoggedin) { %>
    <div id="notifyModal" class="modal fade" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content notification-modal-content">
                 <div class="modal-header text-center justify-content-center p-4" style="border-bottom: none;">
                    <div class="notify-gif-wrapper">
                        <img src="/kiss.gif" alt="Excited notification" class="animated-notification-gif">
                    </div>
                </div>
                <div class="modal-body text-center p-4 pt-2">
                    <h5 class="modal-title-custom mb-3">Don't Miss a Beat! Get <span style="color: var(--color-accent-2);">Real-Time</span> Updates.</h5>
                    <p class="mb-3" style="font-size: 0.95rem; color: #555;">
                        Be the first to know about **new content**, **exclusive offers**, and **important news** – delivered instantly!
                    </p>
                </div>
                <div class="modal-footer justify-content-center border-top-0 pt-0 pb-3">
                    <button type="button" id="allowNotifications" class="chunky-btn-animated">
                        Yes, Enable Notifications!
                    </button>
                    <button type="button" class="btn btn-sm btn-link" data-bs-dismiss="modal" style="font-size: 0.8rem; color: #777; text-decoration: none;">
                        No thanks, maybe later
                    </button>
                </div>
            </div>
        </div>
    </div>
    <% } %>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            let allCategories = [], allFileTypes = [];
            let currentPage = 1, filesPerPage = 50, totalPages = 1;
            let searchDebounceTimeout;
            let currentFilters = {
                search: '', sort: 'popular', minPrice: null, maxPrice: null, isFree: false,
                categories: [], fileTypes: [], minRating: '', uploadDate: '', verifiedOnly: false
            };
            let lastSuggestions = [];
            let asciiLoaderInterval = null; // Interval timer for ASCII loader

            // --- DOM Element References ---
            const inlineSearchInput = document.getElementById('inlineSearchInput');
            const searchSubmitBtn = document.getElementById('searchSubmitBtn');
            const inlineSuggestionsContainer = document.getElementById('inlineSuggestions');
            const fileCardsContainer = document.getElementById('fileGrid');
            const resultsCounter = document.getElementById('resultsCounter');
            const noResultsBlock = document.getElementById('noResultsBlock');
            const paginationControls = document.getElementById('pagination-controls');
            const prevButton = document.getElementById('prevButton');
            const nextButton = document.getElementById('nextButton');
            const paginationNumbersContainer = document.getElementById('paginationNumbers');
            const loadingIndicator = document.getElementById('loadingIndicator');

            // Filter Sidebar (Desktop)
            const sidebarFilters = document.querySelector('.sidebar-filters'); // Reference to the sidebar itself
            const filterCountBadgeDesktop = document.getElementById('filterCountBadgeDesktop'); // Desktop count
            const sortBySidebar = document.getElementById('sortBySidebar');
            const minPriceSidebar = document.getElementById('minPriceSidebar');
            const maxPriceSidebar = document.getElementById('maxPriceSidebar');
            const priceFreeOnlySidebar = document.getElementById('priceFreeOnlySidebar');
            const minRatingSidebar = document.getElementById('minRatingSidebar');
            const uploadDateSidebar = document.getElementById('uploadDateSidebar');
            const verifiedOnlySidebar = document.getElementById('verifiedOnlySidebar');
            const categoryFiltersSidebar = document.getElementById('categoryFiltersSidebar');
            const fileTypeFiltersSidebar = document.getElementById('fileTypeFiltersSidebar');
            const applyFiltersBtnSidebar = document.getElementById('applyFiltersBtnSidebar');
            const clearFiltersBtnSidebar = document.getElementById('clearFiltersBtnSidebar');

             // Filter Modal (Mobile)
            const filterModalOverlay = document.getElementById('filterModal');
            const openFilterModalBtnMobile = document.getElementById('openFilterModalBtnMobile');
            const filterCountBadgeMobile = document.getElementById('filterCountBadgeMobile');
            const closeFilterModalBtn = document.getElementById('closeFilterModalBtn');
            const applyFiltersBtnMobile = document.getElementById('applyFiltersBtnMobile');
            const clearFiltersBtnMobile = document.getElementById('clearFiltersBtnMobile');
            const sortByMobile = document.getElementById('sortByMobile');
            const minPriceMobile = document.getElementById('minPriceMobile');
            const maxPriceMobile = document.getElementById('maxPriceMobile');
            const priceFreeOnlyMobile = document.getElementById('priceFreeOnlyMobile');
            const minRatingMobile = document.getElementById('minRatingMobile');
            const uploadDateMobile = document.getElementById('uploadDateMobile');
            const verifiedOnlyMobile = document.getElementById('verifiedOnlyMobile');
            const categoryFiltersMobile = document.getElementById('categoryFiltersMobile');
            const fileTypeFiltersMobile = document.getElementById('fileTypeFiltersMobile');

            const slugifyJS = (text) => text ? text.toString().toLowerCase().trim().replace(/\s+/g, '-').replace(/[^\w\-]+/g, '').replace(/\-\-+/g, '-') : 'file';

            // --- ASCII Loader Functions ---
            const startAsciiLoader = () => {
                if (!loadingIndicator) return;
                const loaderElement = loadingIndicator.querySelector('pre') || document.createElement('pre');
                loadingIndicator.innerHTML = ''; // Clear previous content
                loadingIndicator.appendChild(loaderElement);
                loadingIndicator.style.display = 'block';
                const frames = ['|', '/', '-', '\\'];
                let frameIndex = 0;
                loaderElement.textContent = frames[frameIndex];
                clearInterval(asciiLoaderInterval); // Clear any existing interval
                asciiLoaderInterval = setInterval(() => {
                    frameIndex = (frameIndex + 1) % frames.length;
                    loaderElement.textContent = frames[frameIndex];
                }, 150); // Adjust speed as needed
            };

            const stopAsciiLoader = () => {
                 clearInterval(asciiLoaderInterval);
                 if (loadingIndicator) loadingIndicator.style.display = 'none';
            };


            // --- File Card HTML Function ---
            const createFileCardHTML = (file) => {
                 const wrapper = document.createElement('div'); // Grid item container
                 const fileSlug = file.slug || slugifyJS(file.filename);
                 const fileUrl = `/file/${fileSlug}/${file._id}`;
                 const priceBadgeText = file.price > 0 ? `₹${file.price}` : `FREE`;
                 const priceBadgeClass = file.price > 0 ? `badge-paid` : `badge-free`;
                 const categoryTag = file.category || 'General'; // Get category or default

                 wrapper.innerHTML = `
                     <a href="${fileUrl}" class="file-card">
                         <div class="card-image-container">
                              <span class="card-category-tag">${categoryTag}</span>
                              <img
                                  class="card-thumbnail"
                                  src="${file.previewUrl || './images/File_Demo.svg'}"
                                  alt="${file.filename}"
                                  loading="lazy"
                                  onerror="this.onerror=null; this.src='./images/File_Demo.svg';"
                              >
                         </div>
                         <div class="card-info">
                             <h3 class="card-title" title="${file.filename}">${file.filename}</h3>
                             <span class="card-price ${priceBadgeClass}">${priceBadgeText}</span>
                         </div>
                     </a>
                 `;
                 return wrapper; // Return the outer div
             };

            // --- Pagination Helper Functions ---
            const updatePaginationControls = () => {
                if (!paginationNumbersContainer || !paginationControls || !prevButton || !nextButton) return;
                paginationNumbersContainer.innerHTML = '';
                if (totalPages > 1) {
                    const maxButtons = window.innerWidth > 767 ? 5 : 3;
                    let startPage = Math.max(1, currentPage - Math.floor(maxButtons / 2));
                    let endPage = Math.min(totalPages, startPage + maxButtons - 1);
                    if (endPage - startPage + 1 < maxButtons) startPage = Math.max(1, endPage - maxButtons + 1);
                    if (startPage > 1) { paginationNumbersContainer.appendChild(createPageButton(1)); if (startPage > 2) paginationNumbersContainer.insertAdjacentHTML('beforeend', '<span class="px-1 fw-bold" style="color:var(--color-text);">...</span>'); }
                    for (let i = startPage; i <= endPage; i++) paginationNumbersContainer.appendChild(createPageButton(i));
                    if (endPage < totalPages) { if (endPage < totalPages - 1) paginationNumbersContainer.insertAdjacentHTML('beforeend', '<span class="px-1 fw-bold" style="color:var(--color-text);">...</span>'); paginationNumbersContainer.appendChild(createPageButton(totalPages)); }
                    paginationControls.style.display = 'flex';
                    prevButton.disabled = currentPage === 1;
                    nextButton.disabled = currentPage === totalPages;
                } else {
                    paginationControls.style.display = 'none';
                }
            };

            const createPageButton = (pageNumber) => {
                const btn = document.createElement('button'); btn.textContent = pageNumber; btn.className = 'page-number-btn';
                if (pageNumber === currentPage) btn.classList.add('active');
                btn.addEventListener('click', () => { if (pageNumber !== currentPage) { currentPage = pageNumber; fetchAndRenderFiles(); } });
                return btn;
            };

            // --- Search Suggestions ---
            const updateSuggestions = async () => {
                 if (!inlineSearchInput || !inlineSuggestionsContainer) return;
                 const query = inlineSearchInput.value.trim();

                 if (query.length < 2) {
                     inlineSuggestionsContainer.innerHTML = ''; inlineSuggestionsContainer.style.display = 'none'; inlineSuggestionsContainer.classList.remove('is-open'); lastSuggestions = []; return;
                 }

                 try {
                     const response = await fetch(`/suggestions?q=${encodeURIComponent(query)}`);
                     if (!response.ok) throw new Error('Suggestion fetch failed');
                     const suggestions = await response.json();
                     lastSuggestions = suggestions;

                     if (suggestions.length > 0) {
                         inlineSuggestionsContainer.innerHTML = suggestions.slice(0, 5).map(file => {
                             const fileUrl = `/file/${file.slug || slugifyJS(file.filename)}/${file._id}`;
                             const title = file.filename.replace(new RegExp(query, 'gi'), (match) => `<strong>${match}</strong>`);
                             return `<div class="suggestion-item" data-url="${fileUrl}" data-title="${file.filename}"> <img src="${file.previewUrl || './images/File_Demo.svg'}" class="suggestion-thumb" alt=""> <div class="suggestion-info"> <span class="suggestion-title">${title}</span> <span class="suggestion-user">by ${file.user || 'Admin'}</span> </div> </div>`;
                         }).join('');
                         inlineSuggestionsContainer.classList.add('is-open'); // Use class for animation
                     } else {
                         inlineSuggestionsContainer.innerHTML = '<p style="font-weight: 600; color: #777; text-align: center; padding: 0.5rem;">No suggestions found.</p>';
                         inlineSuggestionsContainer.classList.add('is-open');
                     }
                 } catch (error) {
                     console.error("Suggestion fetch error:", error);
                     inlineSuggestionsContainer.innerHTML = '<p style="font-weight: 600; color: var(--color-accent-2); text-align: center; padding: 0.5rem;">Could not fetch suggestions.</p>';
                     inlineSuggestionsContainer.classList.add('is-open');
                 }
            };

            // --- Core Fetch and Render ---
             const fetchAndRenderFiles = async (isInitialLoad = false) => {
                 //renderSkeletonLoader(); // Use ASCII loader instead
                 startAsciiLoader();
                 if(noResultsBlock) noResultsBlock.style.display = 'none'; // Hide no results initially
                 if(paginationControls) paginationControls.style.display = 'none'; // Hide pagination

                 const gridTitleEl = document.getElementById('grid-main-title');
                 if(gridTitleEl) gridTitleEl.textContent = currentFilters.search ? `Results for "${currentFilters.search}"` : "Explore Featured Docs 🚀";

                 const params = new URLSearchParams({ page: currentPage, limit: filesPerPage, search: currentFilters.search, sort: currentFilters.sort, minRating: currentFilters.minRating, dateRange: currentFilters.uploadDate, verified: currentFilters.verifiedOnly });
                 if (currentFilters.isFree) { params.append('price', 'free'); } else { if (currentFilters.minPrice !== null) params.append('minPrice', currentFilters.minPrice); if (currentFilters.maxPrice !== null) params.append('maxPrice', currentFilters.maxPrice); }
                 currentFilters.categories.forEach(cat => params.append('category', cat));
                 currentFilters.fileTypes.forEach(type => params.append('fileType', type));

                 try {
                     const response = await fetch(`/files?${params.toString()}`);
                     if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                     const data = await response.json();

                     stopAsciiLoader();
                     if (!fileCardsContainer) return;
                     fileCardsContainer.innerHTML = ''; // Clear ASCII loader/previous results


                     if (isInitialLoad) {
                         const populateFilters = (catContainer, typeContainer, cats, types) => {
                             if (catContainer) { catContainer.innerHTML = cats.length > 0 ? cats.map(cat => `<div class="form-check"><input class="form-check-input category-checkbox" type="checkbox" value="${cat.toLowerCase()}" id="cat-${cat.toLowerCase().replace(/\s+/g, '-')}${catContainer === categoryFiltersMobile ? '-mobile' : ''}"><label class="form-check-label" for="cat-${cat.toLowerCase().replace(/\s+/g, '-')}${catContainer === categoryFiltersMobile ? '-mobile' : ''}">${cat}</label></div>`).join('') : '<p class="text-muted small">No categories.</p>'; }
                             if (typeContainer) { typeContainer.innerHTML = types.length > 0 ? types.map(type => `<div class="form-check"><input class="form-check-input file-type-checkbox" type="checkbox" value="${type.toLowerCase()}" id="type-${type.toLowerCase()}${typeContainer === fileTypeFiltersMobile ? '-mobile' : ''}"><label class="form-check-label" for="type-${type.toLowerCase()}${typeContainer === fileTypeFiltersMobile ? '-mobile' : ''}">${type.toUpperCase()}</label></div>`).join('') : '<p class="text-muted small">No file types.</p>'; }
                         };
                         if (data.allCategories) allCategories = data.allCategories; else allCategories = [];
                         if (data.allFileTypes) allFileTypes = data.allFileTypes; else allFileTypes = [];
                         populateFilters(categoryFiltersSidebar, fileTypeFiltersSidebar, allCategories, allFileTypes);
                         populateFilters(categoryFiltersMobile, fileTypeFiltersMobile, allCategories, allFileTypes);
                     }

                     if (!data.files || data.files.length === 0) {
                         if(noResultsBlock) noResultsBlock.style.display = 'block';
                         if(resultsCounter) resultsCounter.textContent = 'No results found.'; totalPages = 1;
                         updatePaginationControls(); return;
                     }

                     // Apply stagger animation
                     data.files.forEach((file, index) => {
                        const cardWrapper = createFileCardHTML(file);
                        const cardElement = cardWrapper.querySelector('.file-card'); // Get the card itself
                        if (cardElement) {
                             cardElement.style.animationDelay = `${index * 50}ms`; // Stagger delay
                             cardElement.classList.add('stagger-in');
                        }
                        fileCardsContainer.appendChild(cardWrapper);
                     });

                     totalPages = data.totalPages || 1;
                     updatePaginationControls();
                     if(resultsCounter) resultsCounter.textContent = `Showing ${data.files.length} of ${data.totalFiles} results`;
                     // Scroll handled by browser on navigation/pagination usually, can re-add if needed

                 } catch (error) {
                     stopAsciiLoader();
                     if(fileCardsContainer) fileCardsContainer.innerHTML = '';
                     if(noResultsBlock) { /* Error display */ }
                     console.error('Fetch error:', error);
                 }
             };

             // --- Filter Application Logic (Unified & Updated) ---
             const applyFilters = (source = 'sidebar') => {
                 const sortEl = source === 'sidebar' ? sortBySidebar : sortByMobile;
                 const minEl = source === 'sidebar' ? minPriceSidebar : minPriceMobile;
                 const maxEl = source === 'sidebar' ? maxPriceSidebar : maxPriceMobile;
                 const freeEl = source === 'sidebar' ? priceFreeOnlySidebar : priceFreeOnlyMobile;
                 const ratingEl = source === 'sidebar' ? minRatingSidebar : minRatingMobile;
                 const dateEl = source === 'sidebar' ? uploadDateSidebar : uploadDateMobile;
                 const verifiedEl = source === 'sidebar' ? verifiedOnlySidebar : verifiedOnlyMobile;
                 const catSelector = source === 'sidebar' ? '#categoryFiltersSidebar .category-checkbox:checked' : '#categoryFiltersMobile .category-checkbox:checked';
                 const typeSelector = source === 'sidebar' ? '#fileTypeFiltersSidebar .file-type-checkbox:checked' : '#fileTypeFiltersMobile .file-type-checkbox:checked';

                 if(sortEl) currentFilters.sort = sortEl.value;
                 if(freeEl) currentFilters.isFree = freeEl.checked;
                 if (currentFilters.isFree) { currentFilters.minPrice = null; currentFilters.maxPrice = null; if(minEl) minEl.value = ''; if(maxEl) maxEl.value = ''; }
                 else { const min = minEl ? parseFloat(minEl.value) : NaN; const max = maxEl ? parseFloat(maxEl.value) : NaN; currentFilters.minPrice = isNaN(min) ? null : min; currentFilters.maxPrice = isNaN(max) ? null : max; }
                 if(ratingEl) currentFilters.minRating = ratingEl.value;
                 if(dateEl) currentFilters.uploadDate = dateEl.value;
                 if(verifiedEl) currentFilters.verifiedOnly = verifiedEl.checked;
                 currentFilters.categories = Array.from(document.querySelectorAll(catSelector)).map(cb => cb.value);
                 currentFilters.fileTypes = Array.from(document.querySelectorAll(typeSelector)).map(cb => cb.value);

                 currentPage = 1;
                 fetchAndRenderFiles();
                 updateFilterVisualState(); // Update badges and fieldset styles
                 if (source === 'mobile' && filterModalOverlay) { filterModalOverlay.classList.remove('is-open'); document.body.classList.remove('modal-is-open'); }
                 syncFilterInputs();
             };

             const clearFilters = (source = 'sidebar') => {
                 const sortEl = source === 'sidebar' ? sortBySidebar : sortByMobile;
                 const minEl = source === 'sidebar' ? minPriceSidebar : minPriceMobile;
                 const maxEl = source === 'sidebar' ? maxPriceSidebar : maxPriceMobile;
                 const freeEl = source === 'sidebar' ? priceFreeOnlySidebar : priceFreeOnlyMobile;
                 const ratingEl = source === 'sidebar' ? minRatingSidebar : minRatingMobile;
                 const dateEl = source === 'sidebar' ? uploadDateSidebar : uploadDateMobile;
                 const verifiedEl = source === 'sidebar' ? verifiedOnlySidebar : verifiedOnlyMobile;
                 const catSelector = source === 'sidebar' ? '#categoryFiltersSidebar .category-checkbox' : '#categoryFiltersMobile .category-checkbox';
                 const typeSelector = source === 'sidebar' ? '#fileTypeFiltersSidebar .file-type-checkbox' : '#fileTypeFiltersMobile .file-type-checkbox';

                 if(sortEl) sortEl.value = 'popular'; if(minEl) minEl.value = ''; if(maxEl) maxEl.value = ''; if(freeEl) freeEl.checked = false;
                 if(ratingEl) ratingEl.value = ''; if(dateEl) dateEl.value = ''; if(verifiedEl) verifiedEl.checked = false;
                 document.querySelectorAll(catSelector).forEach(cb => cb.checked = false); document.querySelectorAll(typeSelector).forEach(cb => cb.checked = false);

                 currentFilters = { search: currentFilters.search, sort: 'popular', minPrice: null, maxPrice: null, isFree: false, categories: [], fileTypes: [], minRating: '', uploadDate: '', verifiedOnly: false };
                 currentPage = 1;
                 fetchAndRenderFiles();
                 updateFilterVisualState();
                 if (source === 'mobile' && filterModalOverlay) { filterModalOverlay.classList.remove('is-open'); document.body.classList.remove('modal-is-open'); }
                 syncFilterInputs();
             };

            // Updates filter count badges and fieldset active states
            const updateFilterVisualState = () => {
                 let count = 0;
                 const checkFilter = (value, elementId) => {
                     const fieldset = document.getElementById(elementId);
                     if (value) {
                         count++;
                         if(fieldset) fieldset.classList.add('filter-active');
                     } else {
                         if(fieldset) fieldset.classList.remove('filter-active');
                     }
                 };
                 const checkListFilter = (list, elementId) => {
                      const fieldset = document.getElementById(elementId);
                      if (list.length > 0) {
                         count += list.length; // Count each item
                         if(fieldset) fieldset.classList.add('filter-active');
                     } else {
                          if(fieldset) fieldset.classList.remove('filter-active');
                     }
                 };

                 // Check each filter type
                 checkFilter(currentFilters.sort !== 'popular', 'fs-sort'); // Sort counts if not default
                 checkFilter(currentFilters.minPrice !== null || currentFilters.maxPrice !== null || currentFilters.isFree, 'fs-price');
                 checkFilter(currentFilters.minRating !== '', 'fs-rating');
                 checkFilter(currentFilters.uploadDate !== '', 'fs-date');
                 checkFilter(currentFilters.verifiedOnly, 'fs-seller');
                 checkListFilter(currentFilters.categories, 'fs-category');
                 checkListFilter(currentFilters.fileTypes, 'fs-type');

                // Update mobile badge
                 if (filterCountBadgeMobile) {
                    if (count > 0) { filterCountBadgeMobile.textContent = count; filterCountBadgeMobile.style.display = 'inline-block'; }
                    else { filterCountBadgeMobile.style.display = 'none'; }
                 }
                 // Update desktop badge (if element exists)
                if (filterCountBadgeDesktop) {
                    if (count > 0) { filterCountBadgeDesktop.textContent = count; filterCountBadgeDesktop.style.display = 'inline-block'; }
                    else { filterCountBadgeDesktop.style.display = 'none'; }
                }

                 // Apply active class to mobile fieldsets as well
                 checkFilter(currentFilters.sort !== 'popular', 'fs-sort-mobile');
                 checkFilter(currentFilters.minPrice !== null || currentFilters.maxPrice !== null || currentFilters.isFree, 'fs-price-mobile');
                 checkFilter(currentFilters.minRating !== '', 'fs-rating-mobile');
                 checkFilter(currentFilters.uploadDate !== '', 'fs-date-mobile');
                 checkFilter(currentFilters.verifiedOnly, 'fs-seller-mobile');
                 checkListFilter(currentFilters.categories, 'fs-category-mobile');
                 checkListFilter(currentFilters.fileTypes, 'fs-type-mobile');
            };

            const syncFilterInputs = () => {
                 if (sortBySidebar) sortBySidebar.value = currentFilters.sort;
                 if (minPriceSidebar) minPriceSidebar.value = currentFilters.minPrice ?? '';
                 if (maxPriceSidebar) maxPriceSidebar.value = currentFilters.maxPrice ?? '';
                 if (priceFreeOnlySidebar) priceFreeOnlySidebar.checked = currentFilters.isFree;
                 if (minRatingSidebar) minRatingSidebar.value = currentFilters.minRating;
                 if (uploadDateSidebar) uploadDateSidebar.value = currentFilters.uploadDate;
                 if (verifiedOnlySidebar) verifiedOnlySidebar.checked = currentFilters.verifiedOnly;
                 document.querySelectorAll('#categoryFiltersSidebar .category-checkbox').forEach(cb => cb.checked = currentFilters.categories.includes(cb.value));
                 document.querySelectorAll('#fileTypeFiltersSidebar .file-type-checkbox').forEach(cb => cb.checked = currentFilters.fileTypes.includes(cb.value));

                 if (sortByMobile) sortByMobile.value = currentFilters.sort;
                 if (minPriceMobile) minPriceMobile.value = currentFilters.minPrice ?? '';
                 if (maxPriceMobile) maxPriceMobile.value = currentFilters.maxPrice ?? '';
                 if (priceFreeOnlyMobile) priceFreeOnlyMobile.checked = currentFilters.isFree;
                 if (minRatingMobile) minRatingMobile.value = currentFilters.minRating;
                 if (uploadDateMobile) uploadDateMobile.value = currentFilters.uploadDate;
                 if (verifiedOnlyMobile) verifiedOnlyMobile.checked = currentFilters.verifiedOnly;
                 document.querySelectorAll('#categoryFiltersMobile .category-checkbox').forEach(cb => cb.checked = currentFilters.categories.includes(cb.value));
                 document.querySelectorAll('#fileTypeFiltersMobile .file-type-checkbox').forEach(cb => cb.checked = currentFilters.fileTypes.includes(cb.value));
            };

            // --- Event Listeners ---
            if (inlineSearchInput) {
                inlineSearchInput.addEventListener('input', () => { clearTimeout(searchDebounceTimeout); searchDebounceTimeout = setTimeout(updateSuggestions, 300); });
                inlineSearchInput.addEventListener('keydown', (e) => { if (e.key === 'Enter') { e.preventDefault(); currentFilters.search = inlineSearchInput.value.trim(); currentPage = 1; if(inlineSuggestionsContainer) inlineSuggestionsContainer.classList.remove('is-open'); fetchAndRenderFiles(); } });
                document.addEventListener('click', (e) => { if (inlineSuggestionsContainer && !inlineSearchInput.contains(e.target) && !inlineSuggestionsContainer.contains(e.target)) { inlineSuggestionsContainer.classList.remove('is-open'); } });
            }
            if (searchSubmitBtn) { searchSubmitBtn.addEventListener('click', (e) => { e.preventDefault(); currentFilters.search = inlineSearchInput ? inlineSearchInput.value.trim() : ''; currentPage = 1; if(inlineSuggestionsContainer) inlineSuggestionsContainer.classList.remove('is-open'); fetchAndRenderFiles(); }); }
             if(inlineSuggestionsContainer) { inlineSuggestionsContainer.addEventListener('click', (e) => { const suggestionItem = e.target.closest('.suggestion-item'); if (suggestionItem) { e.preventDefault(); const url = suggestionItem.dataset.url; window.location.href = url; } }); } // Navigate directly on suggestion click
             if(openFilterModalBtnMobile) openFilterModalBtnMobile.addEventListener('click', () => { syncFilterInputs(); if(filterModalOverlay) filterModalOverlay.classList.add('is-open'); document.body.classList.add('modal-is-open'); });
             if(closeFilterModalBtn) closeFilterModalBtn.addEventListener('click', () => { if(filterModalOverlay) filterModalOverlay.classList.remove('is-open'); document.body.classList.remove('modal-is-open'); });
             if(applyFiltersBtnSidebar) applyFiltersBtnSidebar.addEventListener('click', () => applyFilters('sidebar'));
             if(clearFiltersBtnSidebar) clearFiltersBtnSidebar.addEventListener('click', () => clearFilters('sidebar'));
             if(applyFiltersBtnMobile) applyFiltersBtnMobile.addEventListener('click', () => applyFilters('mobile'));
             if(clearFiltersBtnMobile) clearFiltersBtnMobile.addEventListener('click', () => clearFilters('mobile'));
             if(filterModalOverlay) filterModalOverlay.addEventListener('click', (e) => { if (e.target === filterModalOverlay) { filterModalOverlay.classList.remove('is-open'); document.body.classList.remove('modal-is-open'); }});
            if(prevButton) prevButton.addEventListener('click', () => { if (currentPage > 1) { currentPage--; fetchAndRenderFiles(); } });
            if(nextButton) nextButton.addEventListener('click', () => { if (currentPage < totalPages) { currentPage++; fetchAndRenderFiles(); } });

            // Initial load
            fetchAndRenderFiles(true);
            updateFilterVisualState(); // Initial visual state check
        });
    </script>

    <% if(isLoggedin) { %>
     <div id="notifyModal" class="modal fade" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-sm">
            <div class="modal-content notification-modal-content">
                 <div class="modal-header text-center justify-content-center p-4" style="border-bottom: none;">
                    <div class="notify-gif-wrapper">
                        <img src="/kiss.gif" alt="Excited notification" class="animated-notification-gif">
                    </div>
                </div>
                <div class="modal-body text-center p-4 pt-2">
                    <h5 class="modal-title-custom mb-3">Don't Miss a Beat! Get <span style="color: var(--color-accent-2);">Real-Time</span> Updates.</h5>
                    <p class="mb-3" style="font-size: 0.95rem; color: #555;">
                        Be the first to know about **new content**, **exclusive offers**, and **important news** – delivered instantly!
                    </p>
                </div>
                <div class="modal-footer justify-content-center border-top-0 pt-0 pb-3">
                    <button type="button" id="allowNotifications" class="chunky-btn-animated">
                        Yes, Enable Notifications!
                    </button>
                    <button type="button" class="btn btn-sm btn-link" data-bs-dismiss="modal" style="font-size: 0.8rem; color: #777; text-decoration: none;">
                        No thanks, maybe later
                    </button>
                </div>
            </div>
        </div>
     </div>
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-app.js";
        import { getMessaging, getToken, onMessage } from "https://www.gstatic.com/firebasejs/12.4.0/firebase-messaging.js";

        console.log('Firebase script module started.');

        const firebaseConfig = {
          apiKey: "AIzaSyCewKKaSGXDAiBPQRYqOtFJ_DV6A-OborA",
          authDomain: "vidyari-notification.firebaseapp.com",
          projectId: "vidyari-notification",
          storageBucket: "vidyari-notification.appspot.com",
          messagingSenderId: "1061582963767",
          appId: "1:1061582963767:web:f97da1a865022e6d172bb2"
        };

        try {
            const app = initializeApp(firebaseConfig); console.log('Firebase App initialized.');
            const messaging = getMessaging(app); console.log('Firebase Messaging initialized.');

            if ('serviceWorker' in navigator) {
              navigator.serviceWorker.register('/firebase-messaging-sw.js')
                .then(reg => console.log('SW registered:', reg))
                .catch(err => console.error('SW registration failed:', err));
            } else { console.warn('Service workers not supported.'); }

            const modalElement = document.getElementById('notifyModal');
            const allowBtn = document.getElementById('allowNotifications');
            let notifyModal;

            if (modalElement && allowBtn) {
                 notifyModal = new bootstrap.Modal(modalElement, {backdrop: 'static', keyboard: false});
                 console.log('Bootstrap Modal instance created.');

                 console.log('Current Notification permission:', Notification.permission);
                 if (Notification.permission === 'default') {
                    console.log('Showing notification modal.');
                    try { notifyModal.show(); } catch(modalShowError) { console.error("Error showing Bootstrap modal:", modalShowError); }
                 } else if (Notification.permission === 'denied') { console.warn('Notification permission denied.'); }
                 else { console.log('Notification permission already granted.'); }

                 allowBtn.addEventListener('click', async () => {
                  console.log('Allow button clicked.');
                  const hideModal = () => { if (notifyModal) { try { notifyModal.hide(); } catch (hideError) { console.error("Error hiding modal:", hideError); }}};
                  try {
                    console.log('Requesting notification permission...');
                    const permission = await Notification.requestPermission(); console.log('Permission result:', permission);
                    if (permission !== 'granted') { console.log('Permission not granted.'); hideModal(); return; }

                    console.log('Permission granted. Getting FCM token...');
                    const vapidKey = "BHsfuRpT67uCNIc_2p6h5cj0Ze6y09HsR0ZTZsvHaWDz9OjFLC6k2LlVWW7nWZuuBX90IAjwTMSFgQ5Mz2V_pt8";
                    const token = await getToken(messaging, { vapidKey });

                    if (!token) { console.error('No FCM token received.'); throw new Error('No token generated.'); }
                    console.log('FCM Token received:', token);
                    console.log('Registering token with server...');

                    const response = await fetch('/register-token', {
                      method: 'POST', headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ userId: '<%=uId%>', token })
                    });
                     if (!response.ok) { const errorBody = await response.text(); console.error('Failed to register token:', response.status, errorBody); throw new Error(`Server registration failed: ${response.status}`); }
                     console.log('Token registered successfully.');
                     hideModal();
                  } catch (err) { console.error('Error during notification setup:', err); alert(`Could not enable notifications. Error: ${err.message}`); hideModal(); }
                 });
                 console.log('Event listener attached.');
            } else {
                 if (!modalElement) console.error('#notifyModal not found!');
                 if (!allowBtn) console.error('#allowNotifications not found!');
            }

            onMessage(messaging, payload => {
              console.log('💬 Foreground message received:', payload);
              if (payload.notification) { alert(`Notification: ${payload.notification.title}\n${payload.notification.body}`); }
            });

        } catch (initError) { console.error('FATAL: Firebase init error:', initError); alert('Error setting up notifications.'); }
    <% } %>
    </script>

</body>
</html>
<%-include("footer")%>