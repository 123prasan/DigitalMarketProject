<%-include("header")%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vidyari: Find Your Edge</title>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3321203820490717"
      crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700;900&display=swap" rel="stylesheet">

<style>
    /* ðŸŽ¨ COLOR PALETTE & TYPOGRAPHY */
    :root {
        --font-main: 'Montserrat', sans-serif;
        --color-bg: #f8f9fa;
        --color-black: #000000;
        --color-primary: #ff66a3;
        --color-secondary: #4ade80; 
        --color-accent: #ffd60a;   
        --color-focus: #1ac2ff;    
        --color-free: #30B45E;     
        --color-paid: #E84C86;     
        --color-detail-bar: #fff; 
        --card-spacing: 0px;
        --skeleton-base: #e0e0e0; /* Light gray for skeleton */
        --skeleton-wave: rgba(255, 255, 255, 0.5); /* White highlight */
    }
    body {
        font-family: var(--font-main); 
        background-color: var(--color-bg);
        position: relative;
        overflow-x: hidden;
    }
    body.search-modal-open, body.modal-is-open { overflow: hidden; }

    /* --- BACKGROUND EFFECT --- */
    .page-wrapper { position: relative; z-index: 1; }
    body::before {
        content: ''; position: fixed; top: 0; left: 0; right: 0; bottom: 0;
        background: linear-gradient(135deg, rgba(255, 102, 163, 0.1), rgba(74, 222, 128, 0.1), rgba(255, 214, 10, 0.1), rgba(26, 194, 255, 0.1));
        background-size: 400% 400%; animation: gradient-animation 25s ease infinite; z-index: -1; opacity: 0.9; 
    }
    @keyframes gradient-animation {
        0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; }
    }
    .page-wrapper::after {
        content: ''; position: fixed; top: 0; left: 0; right: 0; bottom: 0;
        background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='1.2' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)' opacity='0.05'/%3E%3C/svg%3E");
        z-index: -1; pointer-events: none;
    }
    
    /* --- HERO & MAIN WRAPPER --- */
    .hero-section { padding: 4rem 2rem; text-align: center; background: var(--color-bg); border-bottom: 4px solid var(--color-black); box-shadow: 0 12px 0 var(--color-black); }
    .hero-title { font-weight: 900; font-size: clamp(2.5rem, 5vw, 4rem); text-transform: uppercase; }
    .full-width-container { padding: 40px 0; }
    .brutalist-content-wrapper { border: 6px solid var(--color-black); }

    /* --- SEARCH BAR STYLING --- */
    .search-trigger { margin-top: 2rem; border: 3px solid var(--color-black); box-shadow: 6px 6px 0 var(--color-black); transition: all 0.2s cubic-bezier(0.175, 0.885, 0.32, 1.275); display: flex; align-items: center; background: #fff; padding: 1rem; cursor: pointer; text-align: left; }
    .search-trigger:hover { transform: translate(3px, 3px); box-shadow: 3px 3px 0 var(--color-black); }
    .search-trigger .search-icon { color: var(--color-black); font-size: 1.2rem; margin-right: 1rem; }
    .search-trigger .placeholder-text { font-weight: 600; color: #777; }

    /* --- FILTER BUTTON STYLING --- */
    .filter-btn { margin-top: 1.5rem; border: 3px solid #000000; box-shadow: 3px 3px 0 #000000; font-weight: 700; background: var(--color-secondary); transition: all 0.3s ease; cursor: pointer; padding: 10px 20px; }
    @media (max-width: 767px) {
        .filter-btn-sticky { position: fixed; bottom: 20px; right: 20px; z-index: 1000; margin: 0; border-radius: 50px; padding: 15px 20px; box-shadow: 6px 6px 0 var(--color-black); font-size: 1.1rem; }
    }
    
    /* --- FILE CARD STYLES --- */
    .file-card-wrapper { transition: all 0.3s ease; height: 100%; padding: var(--card-spacing); }
    .file-card-wrapper:hover { transform: translate(-8px, -8px); box-shadow: 10px 10px 0 var(--color-focus); z-index: 10; position: relative; }
    .row.g-0 { --bs-gutter-x: 0; --bs-gutter-y: 0; }
    
    .file-card {
        width: 100%; height: 100%; border: 3px solid var(--color-black); box-shadow: 8px 8px 0 var(--color-black);
        overflow: hidden; display: flex; flex-direction: column; background: var(--color-primary); 
    }

    /* 90% Image Area */
    .file-card .card-img { flex-grow: 1; min-height: 150px; background-color: #fff; overflow: hidden; padding: 5px; flex-shrink: 0; position: relative; }
    .file-card .card-img img { 
        width: 100%; height: 100%; object-fit: cover; transition: transform 0.3s ease;
        image-rendering: pixelated; image-rendering: -webkit-optimize-contrast; 
    }
    
    /* Hover Copy Icon */
    .copy-icon-hover {
        position: absolute; bottom: 15px; right: 15px; color: var(--color-accent); font-size: 1.5rem;
        padding: 5px; cursor: pointer; z-index: 10; opacity: 0; transition: opacity 0.2s ease, transform 0.2s ease;
        text-shadow: 0 0 5px rgba(0,0,0,0.8);
    }
    .file-card-wrapper:hover .copy-icon-hover { opacity: 1; transform: scale(1.1); }
    .file-card .detail-bar {
        min-height: 45px; padding: 8px 10px; border-top: 3px solid var(--color-black);
        background: var(--color-detail-bar); display: flex; align-items: center; flex-shrink: 0; gap: 5px;
    }
    .file-title-mobile { font-size: 0.9rem; font-weight: 700; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; flex-grow: 1; margin-right: 5px; color: var(--color-black); }
    .action-btn { display: inline-block; }
    .mobile-vertical-action { display: none; text-align: center; flex-shrink: 0; line-height: 1; cursor: pointer; text-decoration: none; color: var(--color-black); }

    @media (max-width: 767px) {
        .file-card .detail-bar { justify-content: space-between; padding: 8px; min-height: 55px; }
        .action-btn { display: none; }
        .mobile-vertical-action { display: flex; flex-direction: column; align-items: center; justify-content: center; gap: 2px; padding: 5px 0; }
    }
    
    /* Standard Price Badge */
    .price-badge { padding: 3px 6px; border: 2px solid var(--color-black); font-weight: 900; font-size: 0.6rem; box-shadow: 1px 1px 0 var(--color-black); text-transform: uppercase; }
    .badge-free { background-color: var(--color-free); color: var(--color-bg); }
    .badge-paid { background-color: var(--color-paid); color: var(--color-bg); }
    .stats-overlay { position: absolute; top: 0; left: 0; right: 0; padding: 8px 10px; display: flex; justify-content: flex-start; font-size: 0.8rem; font-weight: 700; color: white; text-shadow: 1px 1px 2px rgba(0,0,0,0.8); background: linear-gradient(to bottom, rgba(0,0,0,0.5), rgba(0,0,0,0)); z-index: 5; }
    .stats-item { display: flex; align-items: center; gap: 3px; }
    .stats-item i { color: var(--color-accent); }
    
    /* --- PAGINATION --- */
    .pagination-controls { display: flex; justify-content: space-between; align-items: center; margin-top: 2rem; color: #000; border-top: 3px solid var(--color-black); padding-top: 20px; }
    .pagination-btn { border: 3px solid #000; background: var(--color-black); color: #fff; padding: 8px 20px; font-size: 16px; font-weight: bold; text-transform: uppercase; cursor: pointer; transition: all 0.2s ease; }
    .pagination-numbers { display: flex; gap: 5px; }
    .page-number-btn { border: 2px solid var(--color-black); background: var(--color-bg); color: var(--color-black); padding: 4px 10px; font-size: 0.9rem; font-weight: 700; cursor: pointer; transition: all 0.2s ease; line-height: 1.5; }
    .page-number-btn.active { background: var(--color-primary); color: white; border-color: var(--color-black); }
    .page-number-btn:hover:not(.active) { background: var(--color-accent); }
    @media (max-width: 767px) {
        .pagination-controls { padding: 15px 5px; gap: 5px; }
        .pagination-btn { padding: 5px 10px; font-size: 12px; }
        .pagination-numbers { gap: 2px; }
        .page-number-btn { padding: 3px 6px; font-size: 0.7rem; line-height: 1.2; }
    }

    /* ------------------------------------------- */
    /* --- SKELETON LOADING STYLES (NEW) --- */
    /* ------------------------------------------- */
    @keyframes pulse-bg {
        0% { background-color: var(--skeleton-base); }
        50% { background-color: #f0f0f0; }
        100% { background-color: var(--skeleton-base); }
    }
    .skeleton {
        background-color: var(--skeleton-base);
        animation: pulse-bg 1.5s infinite;
        border-radius: 0; /* Keep the Brutalist sharp corners */
    }
    .skeleton-text {
        height: 12px;
        margin-bottom: 5px;
        width: 80%;
    }
    .skeleton-short { width: 50%; }

    .skeleton-card .card-img {
        /* Apply skeleton effect to the image area */
        background-color: var(--skeleton-base) !important;
        position: relative;
        overflow: hidden;
    }
    .skeleton-card .card-img::before {
        content: '';
        position: absolute;
        top: 0; left: 0; right: 0; bottom: 0;
        background: linear-gradient(90deg, transparent, var(--skeleton-wave), transparent);
        transform: translateX(-100%);
        animation: wave-bg 1.5s infinite;
    }
    .skeleton-card .detail-bar {
        background-color: #fff;
    }
    @keyframes wave-bg {
        100% { transform: translateX(100%); }
    }
    /* ------------------------------------------- */


    /* --- MODAL STYLES (Restored and Optimized) --- */
    .chunky-btn { 
        padding: 8px 15px; border: 3px solid var(--color-black); font-weight: 700; 
        box-shadow: 3px 3px 0 var(--color-black); background: var(--color-accent); 
        text-transform: uppercase; color: var(--color-black); transition: all 0.2s ease;
    }
    .chunky-btn#applyFiltersBtn { background: var(--color-secondary); }
    .filter-group-range .form-control { border: 2px solid var(--color-black) !important; }
    
    /* Search Modal Animation/Styling */
    .search-modal { 
        position: fixed; top: 0; left: 0; width: 100%; height: 100%; 
        background: var(--color-bg); z-index: 2000; display: flex; 
        flex-direction: column; opacity: 0; visibility: hidden; 
        transform: translateY(20px); transition: opacity 0.3s ease, transform 0.3s ease; 
    }
    .search-modal.is-open { opacity: 1; visibility: visible; transform: translateY(0); }
    .search-modal__header { display: flex; align-items: center; padding: 1rem; border-bottom: 4px solid var(--color-black); flex-shrink: 0; }
    .search-modal__input { 
        flex-grow: 1; border: none; outline: none; 
        font-size: clamp(1.2rem, 4vw, 2rem); font-weight: 700; 
        padding: 0.5rem; background: transparent; 
    }
    .search-modal__close-btn { font-size: 2rem; font-weight: 700; background: none; border: none; cursor: pointer; }
    .search-modal__body { padding: 1rem 2rem; overflow-y: auto; flex-grow: 1; }
    .suggestion-item { display: flex; align-items: center; gap: 1rem; padding: 0.75rem; text-decoration: none; color: var(--color-black); border-radius: 8px; transition: background-color 0.2s ease; }
    .suggestion-item:hover { background-color: #f0f0f0; }
    
    /* Filter Modal Animation/Styling */
    .filter-modal-overlay { 
        position: fixed; inset: 0; background-color: rgba(0,0,0,0.5); 
        display: flex; align-items: center; justify-content: center; z-index: 3000; 
        opacity: 0; visibility: hidden; transition: opacity 0.3s ease, visibility 0.3s ease; 
    }
    .filter-modal-overlay.is-open { opacity: 1; visibility: visible; }
    .filter-modal-content { 
        background: var(--color-bg); border: 3px solid var(--color-black); 
        box-shadow: 8px 8px 0 var(--color-black); width: 90%; max-width: 500px; 
        transform: scale(0.95); transition: transform 0.3s ease; 
    }
    .filter-modal-overlay.is-open .filter-modal-content { transform: scale(1); }
    .filter-modal-header { display: flex; justify-content: space-between; align-items: center; padding: 1rem 1.5rem; border-bottom: 3px solid var(--color-black); }
    .filter-modal-title { font-weight: 900; text-transform: uppercase; font-size: 1.2rem; }
    .filter-modal-close { font-size: 1.5rem; background: none; border: none; cursor: pointer; }
    .filter-modal-body { padding: 1.5rem; max-height: 60vh; overflow-y: auto; }
    .filter-modal-footer { display: flex; justify-content: flex-end; gap: 0.5rem; padding: 1rem 1.5rem; border-top: 3px solid var(--color-black); }
    
    /* Filter Form Elements (Brutalist Look) */
    .form-label { font-weight: 700; text-transform: uppercase; font-size: 0.8rem; margin-bottom: 0.5rem; }
    .form-select, .form-control { border: 2px solid var(--color-black) !important; box-shadow: none !important; border-radius: 0 !important; }
    .form-check-input { border: 2px solid var(--color-black) !important; box-shadow: none !important; border-radius: 0 !important; }
    .form-check-input:checked { background-color: var(--color-primary); border-color: var(--color-black) !important; }
</style>
</head>
<body>
    <div class="page-wrapper">
      <main>
        <section class="hero-section">
          <div class="container">
            <h1 class="hero-title">Find Your Edge</h1>
            <p class="lead fw-bold text-dark">The ultimate library of study documents, curated by students for students.</p>
            <div class="search-wrapper mx-auto" style="max-width: 600px;">
              <div class="search-trigger" id="searchTrigger">
                <i class="fas fa-search search-icon"></i>
                <span class="placeholder-text">Search Docs.</span>
              </div>
            </div>
            <button class="filter-btn filter-btn-sticky" id="openFilterModalBtn">
                <i class="fas fa-filter me-2"></i><span>Filter & Sort</span>
            </button>
          </div>
        </section>

        <div class="full-width-container"> 
            <div class="brutalist-content-wrapper">
                <section>
                    <h2 id="grid-main-title" class="container-title">Explore Featured Docs ðŸš€</h2>
                    <p id="resultsCounter" class="mb-4" style="color: #000 !important; font-weight: 600;"></p>
                    
                    <div class="row row-cols-2 row-cols-md-3 row-cols-lg-4 g-0" id="fileCards">
                        </div>
                    
                    <div id="loadingIndicator" class="text-center py-5 my-5" style="display: none;">
                        </div>
                    <div id="noResultsBlock" class="text-center py-5 my-5" style="display: none;">
                        <h4 class="mt-4 fw-bold" style="color:#000;">No Notes Found</h4>
                        <p style="color:#333;">Try a different keyword or adjust your filters.</p>
                    </div>
                    
                    <div id="pagination-controls" class="pagination-controls" style="display: none;">
                        <button id="prevButton" class="pagination-btn">Previous</button>
                        <div id="paginationNumbers" class="pagination-numbers">
                            </div>
                        <button id="nextButton" class="pagination-btn">Next</button>
                    </div>
                </section>
            </div>
        </div>
      </main>
    </div>

    <div class="search-modal" id="searchModal">
        <div class="search-modal__header">
            <input type="text" id="modalSearchInput" class="search-modal__input" placeholder="Search and press Enter..." autocomplete="off">
            <button class="search-modal__close-btn" id="closeSearchModal">&times;</button>
        </div>
        <div class="search-modal__body" id="modalSuggestions"></div>
    </div>
    <div class="filter-modal-overlay" id="filterModal">
      <div class="filter-modal-content">
          <div class="filter-modal-header">
            <h5 class="filter-modal-title" id="filterModalLabel">Filter & Sort</h5>
            <button type="button" class="filter-modal-close" id="closeFilterModalBtn">&times;</button>
          </div>
          <div class="filter-modal-body">
            <div class="mb-4"><label for="sortBy" class="form-label">Sort by</label>
                <select class="form-select" id="sortBy">
                    <option value="popular">Popularity</option><option value="newest">Newest</option>
                    <option value="price-asc">Price: Low to High</option><option value="price-desc">Price: High to Low</option>
                </select>
            </div>
            <div class="mb-4"><label class="form-label">Price Range (â‚¹)</label> 
                <div class="filter-group-range">
                    <input type="number" id="minPrice" class="form-control" placeholder="Min Price" min="0">
                    <span class="d-inline-block p-2 fw-bold">-</span>
                    <input type="number" id="maxPrice" class="form-control" placeholder="Max Price" min="0">
                </div>
                <div class="form-check mt-2">
                    <input class="form-check-input" type="checkbox" name="priceFilter" id="priceFreeOnly" value="free">
                    <label class="form-check-label" for="priceFreeOnly">Show FREE only (Overrides range)</label>
                </div>
            </div>
            <div class="mb-4"><label class="form-label">Category</label><div id="categoryFilters"></div></div>
            <div class="mb-4"><label class="form-label">File Type</label><div id="fileTypeFilters"></div></div>
          </div>
          <div class="filter-modal-footer">
            <button type="button" class="chunky-btn" id="clearFiltersBtn">Clear</button>
            <button type="button" class="chunky-btn" id="applyFiltersBtn">Apply</button>
          </div>
      </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            let allCategories = [], allFileTypes = [];
            let currentPage = 1, filesPerPage = 32, totalPages = 1;
            let searchDebounceTimeout;
            let currentFilters = {
                search: '', sort: 'popular', 
                minPrice: null, maxPrice: null, isFree: false, 
                categories: [], fileTypes: []
            };
            let lastSuggestions = [];

            // DOM Element References
            const searchTrigger = document.getElementById('searchTrigger');
            const searchModal = document.getElementById('searchModal');
            const closeSearchModal = document.getElementById('closeSearchModal');
            const modalSearchInput = document.getElementById('modalSearchInput');
            const modalSuggestions = document.getElementById('modalSuggestions');
            const fileCardsContainer = document.getElementById('fileCards');
            const resultsCounter = document.getElementById('resultsCounter');
            const noResultsBlock = document.getElementById('noResultsBlock');
            const paginationControls = document.getElementById('pagination-controls');
            const prevButton = document.getElementById('prevButton');
            const nextButton = document.getElementById('nextButton');
            const paginationNumbersContainer = document.getElementById('paginationNumbers');
            const loadingIndicator = document.getElementById('loadingIndicator');
            const filterModal = document.getElementById('filterModal');
            const closeFilterModalBtn = document.getElementById('closeFilterModalBtn');
            const applyFiltersBtn = document.getElementById('applyFiltersBtn');
            const clearFiltersBtn = document.getElementById('clearFiltersBtn');
            
            const sortBy = document.getElementById('sortBy');
            const minPriceInput = document.getElementById('minPrice');
            const maxPriceInput = document.getElementById('maxPrice');
            const priceFreeOnlyCheckbox = document.getElementById('priceFreeOnly');
            
            const slugifyJS = (text) => text ? text.toString().toLowerCase().trim().replace(/\s+/g, '-').replace(/[^\w\-]+/g, '').replace(/\-\-+/g, '-') : 'file';
            
            // --- Helper Functions ---
            
            const copyFileLink = (url, element) => {
                navigator.clipboard.writeText(window.location.origin + url).then(() => {
                    const originalIconClass = element.className;
                    element.classList.remove('fa-copy');
                    element.classList.add('fa-check');
                    element.style.color = 'var(--color-secondary)';
                    
                    setTimeout(() => {
                        element.classList.remove('fa-check');
                        element.classList.add('fa-copy');
                        element.style.color = 'var(--color-accent)';
                    }, 1500);
                }).catch(err => {
                    console.error('Could not copy text: ', err);
                });
            };
            
            // --- NEW: Skeleton Card HTML Function ---
            const createSkeletonCardHTML = () => {
                const wrapper = document.createElement('div');
                wrapper.className = 'col';
                wrapper.innerHTML = `
                    <div class="file-card-wrapper">
                        <div class="file-card skeleton-card">
                            <div class="card-img skeleton">
                                </div>
                            <div class="detail-bar">
                                <span class="file-title-mobile">
                                    <div class="skeleton skeleton-text"></div>
                                </span>
                                <div class="action-group">
                                    <span class="price-badge skeleton skeleton-short"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
                return wrapper;
            };

            const renderSkeletonLoader = () => {
                fileCardsContainer.innerHTML = '';
                const numSkeletons = window.innerWidth >= 992 ? 8 : 6; // Show a reasonable number of placeholders
                for (let i = 0; i < numSkeletons; i++) {
                    fileCardsContainer.appendChild(createSkeletonCardHTML());
                }
            };
            // ------------------------------------------

            // --- File Card HTML Function ---
            const createFileCardHTML = (file) => {
                const wrapper = document.createElement('div');
                wrapper.className = 'col'; 
                
                const fileSlug = file.slug || slugifyJS(file.filename); 
                const fileUrl = `/file/${fileSlug}/${file._id}`;
                const filePermalink = fileUrl; 

                const priceText = file.price > 0 ? `BUY â‚¹${file.price}` : `FREE`; 
                const priceBadgeText = file.price > 0 ? `â‚¹${file.price}` : `FREE`;
                const priceBadgeClass = file.price > 0 ? `badge-paid` : `badge-free`;
                
                wrapper.innerHTML = `
                    <div class="file-card-wrapper">
                        <div class="file-card">
                            <a href="${fileUrl}" class="card-img" style="text-decoration: none;">
                                <div class="stats-overlay">
                                    <span class="stats-item" title="Creator"><i class="fas fa-user"></i> ${file.user || 'Admin'}</span>
                                </div>
                                
                                <i class="fas fa-copy copy-icon-hover" data-url="${filePermalink}" title="Copy Link"></i>
                                
                              <img 
                                src="${file.previewUrl || './images/File_Demo.svg'}" 
                                alt="${file.filename}" 
                                loading="lazy"
                                onerror="this.onerror=null; this.src='./images/File_Demo.svg';"
                              >
                            </a>
                            
                            <div class="detail-bar">
                                <span class="file-title-mobile" title="${file.filename}">${file.filename}</span>
                                
                                <a href="${fileUrl}" class="action-btn" style="text-decoration:none;">${priceText}</a>

                                <a href="${fileUrl}" class="mobile-vertical-action">
                                    <span class="price-badge ${priceBadgeClass}" style="margin-bottom: 2px;">${priceBadgeText}</span>
                                    <span style="font-size:0.65rem; font-weight: 700;">GET/VIEW</span>
                                </a>
                            </div>
                        </div>
                    </div>`;

                // Add event listener for the copy icon dynamically
                const copyIcon = wrapper.querySelector('.copy-icon-hover');
                if (copyIcon) {
                    copyIcon.addEventListener('click', (e) => {
                        e.preventDefault(); 
                        e.stopPropagation(); 
                        copyFileLink(copyIcon.dataset.url, copyIcon);
                    });
                }

                return wrapper;
            };

            // --- Pagination Helper Function (Numbered Buttons) ---
            const updatePaginationControls = () => {
                paginationNumbersContainer.innerHTML = '';
                
                if (totalPages > 1) {
                    const maxButtons = window.innerWidth > 767 ? 5 : 3; 
                    let startPage = Math.max(1, currentPage - Math.floor(maxButtons / 2));
                    let endPage = Math.min(totalPages, startPage + maxButtons - 1);

                    if (endPage - startPage + 1 < maxButtons) {
                        startPage = Math.max(1, endPage - maxButtons + 1);
                    }

                    if (startPage > 1) {
                        paginationNumbersContainer.appendChild(createPageButton(1));
                        if (startPage > 2) {
                            const dots = document.createElement('span');
                            dots.textContent = '...';
                            dots.className = 'px-1 fw-bold';
                            paginationNumbersContainer.appendChild(dots);
                        }
                    }

                    for (let i = startPage; i <= endPage; i++) {
                        paginationNumbersContainer.appendChild(createPageButton(i));
                    }

                    if (endPage < totalPages) {
                        if (endPage < totalPages - 1) {
                            const dots = document.createElement('span');
                            dots.textContent = '...';
                            dots.className = 'px-1 fw-bold';
                            paginationNumbersContainer.appendChild(dots);
                        }
                        paginationNumbersContainer.appendChild(createPageButton(totalPages));
                    }
                    
                    paginationControls.style.display = 'flex';
                    prevButton.disabled = currentPage === 1;
                    nextButton.disabled = currentPage === totalPages;
                } else {
                    paginationControls.style.display = 'none';
                }
            };

            const createPageButton = (pageNumber) => {
                const btn = document.createElement('button');
                btn.textContent = pageNumber;
                btn.className = 'page-number-btn';
                if (pageNumber === currentPage) {
                    btn.classList.add('active');
                }
                btn.addEventListener('click', () => {
                    if (pageNumber !== currentPage) {
                        currentPage = pageNumber;
                        fetchAndRenderFiles();
                    }
                });
                return btn;
            };
            
            // --- Search Suggestions Function ---
            const updateSuggestions = async () => {
                const query = modalSearchInput.value.trim();
                currentFilters.search = query;
                document.querySelector('#searchTrigger .placeholder-text').textContent = query || 'Search Docs.';
                document.querySelector('#searchTrigger .placeholder-text').style.color = query ? 'var(--color-black)' : '#777';

                if (query.length < 2) {
                    modalSuggestions.innerHTML = '<p style="font-weight: 600; color: #777; text-align: center;">Keep typing to see suggestions...</p>';
                    lastSuggestions = [];
                    return;
                }
                
                try {
                    // Simulating delay for suggestions
                    // await new Promise(resolve => setTimeout(resolve, 200));

                    const response = await fetch(`/suggestions?q=${encodeURIComponent(query)}`); 
                    if (!response.ok) throw new Error('Suggestion fetch failed');
                    const suggestions = await response.json();
                    lastSuggestions = suggestions;

                    if (suggestions.length > 0) {
                        modalSuggestions.innerHTML = suggestions.slice(0, 10).map(file => { 
                            const fileUrl = `/file/${file.slug || slugifyJS(file.filename)}/${file._id}`;
                            const title = file.filename.replace(new RegExp(query, 'gi'), (match) => `<strong>${match}</strong>`); 
                            return `<a href="${fileUrl}" class="suggestion-item"><img src="${file.previewUrl || './images/File_Demo.svg'}" class="suggestion-thumb" alt="${file.filename}"><div class="suggestion-info"><span class="suggestion-title">${title}</span><span class="suggestion-user">by ${file.user || 'Admin'}</span></div></a>`;
                        }).join('');
                    } else {
                        modalSuggestions.innerHTML = '<p style="font-weight: 600; color: #777; text-align: center;">No suggestions found. Press Enter to search anyway.</p>';
                    }
                } catch (error) {
                    modalSuggestions.innerHTML = '<p style="font-weight: 600; color: var(--color-primary); text-align: center;">Could not fetch suggestions.</p>';
                }
            };
            
            // --- Core Fetch and Render Function (Added Skeleton Loader Logic) ---
            const fetchAndRenderFiles = async (isInitialLoad = false) => {
                // 1. Show skeleton loader while fetching
                fileCardsContainer.innerHTML = '';
                renderSkeletonLoader();
                noResultsBlock.style.display = 'none';
                loadingIndicator.style.display = 'block';

                document.getElementById('grid-main-title').textContent = currentFilters.search ? `Results for "${currentFilters.search}"` : "Explore Featured Docs ðŸš€";

                const params = new URLSearchParams({
                    page: currentPage, limit: filesPerPage,
                    search: currentFilters.search, sort: currentFilters.sort,
                });
                
                if (currentFilters.isFree) {
                    params.append('price', 'free');
                } else {
                    if (currentFilters.minPrice !== null) params.append('minPrice', currentFilters.minPrice);
                    if (currentFilters.maxPrice !== null) params.append('maxPrice', currentFilters.maxPrice);
                }

                currentFilters.categories.forEach(cat => params.append('category', cat));
                currentFilters.fileTypes.forEach(type => params.append('fileType', type));

                try {
                    // Simulate network delay for effect (remove in production)
                    // await new Promise(resolve => setTimeout(resolve, 1000));

                    const response = await fetch(`/files?${params.toString()}`);
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const data = await response.json();
                    
                    // 2. Clear skeleton and show actual results
                    fileCardsContainer.innerHTML = ''; 
                    loadingIndicator.style.display = 'none';

                    if (isInitialLoad) {
                        if (data.allCategories) {
                            allCategories = data.allCategories;
                            const categoryContainer = document.getElementById('categoryFilters');
                            if(categoryContainer) {
                                categoryContainer.innerHTML = allCategories.map(cat => `<div class="form-check"><input class="form-check-input category-checkbox" type="checkbox" value="${cat.toLowerCase()}" id="cat-${cat.toLowerCase().replace(/\s+/g, '-')}"><label class="form-check-label" for="cat-${cat.toLowerCase().replace(/\s+/g, '-')}">${cat}</label></div>`).join('');
                            }
                        }
                        if (data.allFileTypes) {
                            allFileTypes = data.allFileTypes;
                            const fileTypeContainer = document.getElementById('fileTypeFilters');
                            if(fileTypeContainer) {
                                fileTypeContainer.innerHTML = allFileTypes.map(type => `<div class="form-check"><input class="form-check-input file-type-checkbox" type="checkbox" value="${type.toLowerCase()}" id="type-${type.toLowerCase()}"><label class="form-check-label" for="type-${type.toLowerCase()}">${type.toUpperCase()}</label></div>`).join('');
                            }
                        }
                    }

                    if (!data.files || data.files.length === 0) {
                        noResultsBlock.style.display = 'block';
                        resultsCounter.textContent = 'No results found.';
                        totalPages = 1;
                        updatePaginationControls();
                        return;
                    }

                    data.files.forEach(file => fileCardsContainer.appendChild(createFileCardHTML(file)));
                    
                    totalPages = data.totalPages || 1;
                    updatePaginationControls();
                    resultsCounter.textContent = `Showing ${data.files.length} of ${data.totalFiles} results`;
                    
                    window.scrollTo({ top: fileCardsContainer.offsetTop - 150, behavior: 'smooth' });

                } catch (error) {
                    fileCardsContainer.innerHTML = '';
                    loadingIndicator.style.display = 'none';
                    noResultsBlock.style.display = 'block';
                    noResultsBlock.querySelector('h4').textContent = 'Error Loading Files';
                    noResultsBlock.querySelector('p').textContent = 'Could not connect to the server or API error.';
                    console.error('Fetch error:', error);
                }
            };

            // --- Event Listeners ---
            searchTrigger.addEventListener('click', () => {
                document.getElementById('modalSuggestions').innerHTML = ''; 
                modalSearchInput.value = currentFilters.search;
                searchModal.classList.add('is-open');
                document.body.classList.add('modal-is-open');
                modalSearchInput.focus();
                if (modalSearchInput.value) updateSuggestions();
            });
            closeSearchModal.addEventListener('click', () => {
                searchModal.classList.remove('is-open');
                document.body.classList.remove('modal-is-open');
            });
            
            modalSearchInput.addEventListener('input', () => {
                clearTimeout(searchDebounceTimeout);
                searchDebounceTimeout = setTimeout(updateSuggestions, 300);
            });
            
            // NEW FIX: Close modal on Enter and trigger search
            modalSearchInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    currentFilters.search = modalSearchInput.value.trim();
                    document.querySelector('#searchTrigger .placeholder-text').textContent = currentFilters.search || 'Search Docs.';
                    currentPage = 1;
                    closeAndResetSearch(); // Call the close function immediately
                    fetchAndRenderFiles();
                }
            });
            
            const closeAndResetSearch = () => {
                searchModal.classList.remove('is-open');
                document.body.classList.remove('modal-is-open');
            };
            
            document.getElementById('openFilterModalBtn').addEventListener('click', () => {
                minPriceInput.value = currentFilters.minPrice;
                maxPriceInput.value = currentFilters.maxPrice;
                priceFreeOnlyCheckbox.checked = currentFilters.isFree;
                sortBy.value = currentFilters.sort;

                document.querySelectorAll('.category-checkbox').forEach(cb => cb.checked = currentFilters.categories.includes(cb.value));
                document.querySelectorAll('.file-type-checkbox').forEach(cb => cb.checked = currentFilters.fileTypes.includes(cb.value));

                filterModal.classList.add('is-open');
                document.body.classList.add('modal-is-open');
            });
            closeFilterModalBtn.addEventListener('click', () => {
                filterModal.classList.remove('is-open');
                document.body.classList.remove('modal-is-open');
            });
            
            applyFiltersBtn.addEventListener('click', () => {
                currentFilters.sort = sortBy.value;
                
                currentFilters.isFree = priceFreeOnlyCheckbox.checked;
                if (currentFilters.isFree) {
                    currentFilters.minPrice = null;
                    currentFilters.maxPrice = null;
                } else {
                    const min = parseFloat(minPriceInput.value);
                    const max = parseFloat(maxPriceInput.value);
                    currentFilters.minPrice = isNaN(min) ? null : min;
                    currentFilters.maxPrice = isNaN(max) ? null : max;
                }

                currentFilters.categories = Array.from(document.querySelectorAll('.category-checkbox:checked')).map(cb => cb.value);
                currentFilters.fileTypes = Array.from(document.querySelectorAll('.file-type-checkbox:checked')).map(cb => cb.value);
                
                currentPage = 1;
                fetchAndRenderFiles();
                closeFilterModalBtn.click();
            });

            clearFiltersBtn.addEventListener('click', () => {
                sortBy.value = 'popular'; minPriceInput.value = ''; maxPriceInput.value = '';
                priceFreeOnlyCheckbox.checked = false; 
                document.querySelectorAll('.category-checkbox:checked').forEach(cb => cb.checked = false);
                document.querySelectorAll('.file-type-checkbox:checked').forEach(cb => cb.checked = false);
                currentFilters = {
                    search: '', sort: 'popular', minPrice: null, maxPrice: null, isFree: false, categories: [], fileTypes: []
                };
                currentPage = 1;
                document.querySelector('#searchTrigger .placeholder-text').textContent = 'Search Docs.';
                fetchAndRenderFiles();
                closeFilterModalBtn.click();
            });
            
            // Pagination Event Listeners
            prevButton.addEventListener('click', () => { if (currentPage > 1) { currentPage--; fetchAndRenderFiles(); } });
            nextButton.addEventListener('click', () => { if (currentPage < totalPages) { currentPage++; fetchAndRenderFiles(); } });
            
            // Initial load (render skeleton first)
            renderSkeletonLoader();
            fetchAndRenderFiles(true);
        });
    </script>
</body>
</html>
<%-include("footer")%>