<%-include("header")%>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vidyari: Find Your Study Docs</title>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3321203820490717"
     crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700;900&display=swap" rel="stylesheet">

<style>
    body {
        --font-main: 'Montserrat', sans-serif;
        --color-bg: #fff;
        --color-black: #000000;
        --color-primary: #ff66a3; /* Pink */
        --color-secondary: #4ade80; /* Green */
        --color-accent: #ffd60a;   /* Yellow */
        --color-focus: #1ac2ff;   /* Blue */
        
        font-family: var(--font-main); 
        background-color: var(--color-bg);
        position: relative;
        overflow-x: hidden;
    }
    body.search-modal-open, body.modal-is-open { overflow: hidden; }

    body::before {
        content: '';
        position: fixed;
        top: 0; left: 0; right: 0; bottom: 0;
        background: linear-gradient(135deg, var(--color-primary), var(--color-secondary), var(--color-accent), var(--color-focus));
        background-size: 400% 400%;
        animation: gradient-animation 25s ease infinite;
        z-index: -1;
        opacity: 0.15;
    }
    @keyframes gradient-animation {
        0% { background-position: 0% 50%; } 50% { background-position: 100% 50%; } 100% { background-position: 0% 50%; }
    }
    .page-wrapper {
        /* padding: 1rem; */
    }

    .hero-section {
        padding: 4rem 2rem; text-align: center; background: var(--color-bg);
        border: 4px solid var(--color-black); 
        /* margin: 1rem; */
        position: relative;
    }
    @media (min-width: 992px) {
        .hero-section {
            margin: 2rem 0;
            border-left: none;
            border-right: none;
            box-shadow: 0 12px 0 var(--color-black);
        }
    }

    .hero-title { 
        font-weight: 900; font-size: clamp(2.5rem, 5vw, 4rem); 
        text-transform: uppercase; color: var(--color-black);
    }
    .search-trigger {
        margin-top: 2rem; border: 3px solid var(--color-black);
        box-shadow: 6px 6px 0 var(--color-black);
        display: flex; align-items: center; background: #fff; padding: 1rem;
        cursor: pointer; text-align: left; transition: all 0.2s ease;
    }
    .search-trigger:hover { transform: translate(3px, 3px); box-shadow: 3px 3px 0 var(--color-black); }
    .search-trigger .search-icon { color: var(--color-black); font-size: 1.2rem; margin-right: 1rem; }
    .search-trigger .placeholder-text { font-weight: 600; color: #777; }
    .filter-btn {
        margin-top: 1.5rem; border: 3px solid #000000; box-shadow: 3px 3px 0 #000000;
        font-weight: 700; background: var(--color-secondary);
        transition: all 0.3s ease; cursor: pointer; padding: 10px 20px;
    }
    
    .search-modal {
        position: fixed; top: 0; left: 0; width: 100%; height: 100%;
        background: var(--color-bg); z-index: 2000;
        display: flex; flex-direction: column; opacity: 0; visibility: hidden;
        transform: translateY(20px); transition: opacity 0.3s ease, transform 0.3s ease;
    }
    .search-modal.is-open { opacity: 1; visibility: visible; transform: translateY(0); }
    .search-modal__header {
        display: flex; align-items: center; padding: 1rem;
        border-bottom: 4px solid var(--color-black); flex-shrink: 0;
    }
    .search-modal__input {
        flex-grow: 1; border: none; outline: none;
        font-size: clamp(1.2rem, 4vw, 2rem); font-weight: 700;
        padding: 0.5rem; background: transparent;
    }
    .search-modal__close-btn { font-size: 2rem; font-weight: 700; background: none; border: none; cursor: pointer; }
    .search-modal__body { padding: 1rem 2rem; overflow-y: auto; flex-grow: 1; }
    
    .suggestion-item {
        display: flex; align-items: center; gap: 1rem; padding: 0.75rem;
        text-decoration: none; color: var(--color-black); border-radius: 8px;
        transition: background-color 0.2s ease;
    }
    .suggestion-item:hover { background-color: #f0f0f0; }
    .suggestion-item strong { color: var(--color-primary); font-weight: 900; }
    .suggestion-thumb { 
        width: 50px; height: 50px; object-fit: cover; 
        border: 2px solid #ddd; flex-shrink: 0; border-radius: 4px;
    }
    .suggestion-info { display: flex; flex-direction: column; overflow: hidden; }
    .suggestion-title { font-size: 1rem; font-weight: 700; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .suggestion-user { font-size: 0.85rem; color: #666; font-weight: 500; }

    .brutalist-container {
        padding: 5px; background: #fff; border: 6px solid var(--color-black);
        /* box-shadow: 12px 12px 0 var(--color-black); */
    }
    @media (min-width: 768px) { .brutalist-container { padding: 40px; } }
    .container-title {
        font-size: clamp(1.5rem, 4vw, 2rem); font-weight: 900;
        color: var(--color-black); text-transform: uppercase; margin-bottom: 25px;
    }
    .file-card-wrapper { transition: all 0.3s ease; height: 100%; }
    .file-card-wrapper:hover { transform: translate(-6px, -6px); }
    .file-card {
        width: 100%; height: 100%; background: var(--color-primary);
        border: 3px solid var(--color-black); box-shadow: 8px 8px 0 var(--color-black);
        overflow: hidden; display: flex; flex-direction: column;
    }
    .file-card .head {
        font-size: 0.8rem; font-weight: 900; background: #ffffff;
        padding: 8px 12px; color: #000000; border-bottom: 3px solid #000000;
        white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
    }
    .file-card .card-img { aspect-ratio: 16 / 10; background-color: #eee; overflow: hidden; }
    .file-card .card-img img { width: 100%; height: 100%; object-fit: cover; }
    .file-card .content {
        padding: 10px; font-weight: 600; flex-grow: 1;
        display: flex; flex-direction: column; gap: 6px;
    }
    .file-card .meta-item { display: flex; align-items: center; gap: 5px; font-size: 0.75rem; }
    .file-card .button-container { padding: 0 10px 10px; margin-top: auto; }
    .file-card .button {
        padding: 8px 10px; border: 3px solid var(--color-black);
        box-shadow: 3px 3px 0 var(--color-black); font-weight: 750;
        background: var(--color-accent); font-size: 0.9rem;
        width: 100%; text-decoration: none; color: var(--color-black);
        display: block; text-align: center; transition: all 0.3s ease;
    }
    .file-card .button:hover {
        transform: translate(1.5px, 1.5px); box-shadow: 1.5px 1.5px 0 var(--color-black);
        background: var(--color-focus);
    }
    
    .pagination-controls { display: flex; justify-content: space-between; align-items: center; margin-top: 2rem; color: #000; }
    .pagination-btn {
        border: 3px solid #000; background: #000; color: #fff; padding: 8px 20px;
        font-size: 16px; font-weight: bold; text-transform: uppercase; cursor: pointer;
    }
    .pagination-btn:disabled { background: #ccc; border-color: #ccc; cursor: not-allowed; }
    
    .filter-modal-overlay {
        position: fixed; inset: 0; background-color: rgba(0,0,0,0.5);
        display: flex; align-items: center; justify-content: center;
        z-index: 3000; opacity: 0; visibility: hidden;
        transition: opacity 0.3s ease, visibility 0.3s ease;
    }
    .filter-modal-overlay.is-open { opacity: 1; visibility: visible; }
    .filter-modal-content {
        background: var(--color-bg); border: 3px solid var(--color-black);
        box-shadow: 8px 8px 0 var(--color-black);
        width: 90%; max-width: 500px;
        transform: scale(0.95); transition: transform 0.3s ease;
    }
    .filter-modal-overlay.is-open .filter-modal-content { transform: scale(1); }
    .filter-modal-header {
        display: flex; justify-content: space-between; align-items: center;
        padding: 1rem 1.5rem; border-bottom: 3px solid var(--color-black);
    }
    .filter-modal-title { font-weight: 900; text-transform: uppercase; font-size: 1.2rem; }
    .filter-modal-close { font-size: 1.5rem; background: none; border: none; cursor: pointer; }
    .filter-modal-body { padding: 1.5rem; max-height: 60vh; overflow-y: auto; }
    .filter-modal-footer {
        display: flex; justify-content: flex-end; gap: 0.5rem;
        padding: 1rem 1.5rem; border-top: 3px solid var(--color-black);
    }
    .form-label { font-weight: 700; text-transform: uppercase; font-size: 0.8rem; margin-bottom: 0.5rem; }
    .form-select, .form-check-input {
        border: 2px solid var(--color-black) !important; box-shadow: none !important;
        border-radius: 0 !important;
    }
    .form-check-input:checked { background-color: var(--color-primary); border-color: var(--color-black) !important; }
</style>
</head>
<body>
    <div class="page-wrapper">
      <main>
        <section class="hero-section">
          <div class="container">
            <h1 class="hero-title">Find Your Edge</h1>
            <div class="search-wrapper mx-auto" style="max-width: 600px;">
              <div class="search-trigger" id="searchTrigger">
                <i class="fas fa-search search-icon"></i>
                <span class="placeholder-text">Search Docs.</span>
              </div>
            </div>
            <button class="filter-btn" id="openFilterModalBtn">
                <i class="fas fa-filter me-2"></i>Filter & Sort
            </button>
          </div>
        </section>

        <div class="container-fluid my-5"> 
            <div class="brutalist-container">
                <section>
                    <h2 id="grid-main-title" class="container-title">Explore  docs</h2>
                    <p id="resultsCounter" class="mb-4" style="color: #000 !important; font-weight: 600;"></p>
                    <div class="row g-0 g-md-4" id="fileCards"></div>
                    <div id="loadingIndicator" class="text-center py-5 my-5" style="display: none;">
                        <div class="spinner-border" style="width: 3rem; height: 3rem; color: var(--color-primary);" role="status"></div>
                    </div>
                    <div id="noResultsBlock" class="text-center py-5 my-5" style="display: none;">
                        <h4 class="mt-4 fw-bold" style="color:#000;">No Notes Found</h4>
                        <p style="color:#333;">Try a different keyword or adjust your filters.</p>
                    </div>
                    <div id="pagination-controls" class="pagination-controls" style="display: none;">
                        <button id="prevButton" class="pagination-btn">Previous</button>
                        <span id="pageIndicator" class="fw-bold"></span>
                        <button id="nextButton" class="pagination-btn">Next</button>
                    </div>
                </section>
            </div>
        </div>
      </main>
    </div>

    <div class="search-modal" id="searchModal">
        <div class="search-modal__header">
            <input type="text" id="modalSearchInput" class="search-modal__input" placeholder="Search and press Enter..." autocomplete="off">
            <button class="search-modal__close-btn" id="closeSearchModal">&times;</button>
        </div>
        <div class="search-modal__body" id="modalSuggestions"></div>
    </div>

    <div class="filter-modal-overlay" id="filterModal">
      <div class="filter-modal-content">
          <div class="filter-modal-header">
            <h5 class="filter-modal-title" id="filterModalLabel">Filter & Sort</h5>
            <button type="button" class="filter-modal-close" id="closeFilterModalBtn">&times;</button>
          </div>
          <div class="filter-modal-body">
            <div class="mb-3">
                <label for="sortBy" class="form-label">Sort by</label>
                <select class="form-select" id="sortBy">
                    <option value="popular">Popularity</option><option value="newest">Newest</option>
                    <option value="price-asc">Price: Low to High</option><option value="price-desc">Price: High to Low</option>
                </select>
            </div>
            <div class="mb-3">
                <label class="form-label">Pricing</label>
                <div class="form-check"><input class="form-check-input" type="radio" name="priceFilter" id="priceAll" value="all" checked><label class="form-check-label" for="priceAll">All</label></div>
                <div class="form-check"><input class="form-check-input" type="radio" name="priceFilter" id="pricePaid" value="paid"><label class="form-check-label" for="pricePaid">Paid</label></div>
                <div class="form-check"><input class="form-check-input" type="radio" name="priceFilter" id="priceFree" value="free"><label class="form-check-label" for="priceFree">Free</label></div>
            </div>
            <div class="mb-4">
                <label class="form-label">Category</label>
                <div id="categoryFilters"></div>
            </div>
            <div class="mb-4">
                <label class="form-label">File Type</label>
                <div id="fileTypeFilters"></div>
            </div>
          </div>
          <div class="filter-modal-footer">
            <button type="button" class="chunky-btn" style="background-color: #aaa;" id="clearFiltersBtn">Clear</button>
            <button type="button" class="chunky-btn" id="applyFiltersBtn">Apply</button>
          </div>
      </div>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            let allCategories = [], allFileTypes = [];
            let currentPage = 1, filesPerPage = 32, searchDebounceTimeout;
            let currentFilters = {
                search: '', sort: 'popular', price: 'all', categories: [], fileTypes: []
            };
            let lastSuggestions = [];

            const searchTrigger = document.getElementById('searchTrigger');
            const searchModal = document.getElementById('searchModal');
            const closeSearchModal = document.getElementById('closeSearchModal');
            const modalSearchInput = document.getElementById('modalSearchInput');
            const modalSuggestions = document.getElementById('modalSuggestions');
            const fileCardsContainer = document.getElementById('fileCards');
            const resultsCounter = document.getElementById('resultsCounter');
            const noResultsBlock = document.getElementById('noResultsBlock');
            const paginationControls = document.getElementById('pagination-controls');
            const prevButton = document.getElementById('prevButton');
            const nextButton = document.getElementById('nextButton');
            const pageIndicator = document.getElementById('pageIndicator');
            const loadingIndicator = document.getElementById('loadingIndicator');
            const filterModal = document.getElementById('filterModal');
            const openFilterModalBtn = document.getElementById('openFilterModalBtn');
            const closeFilterModalBtn = document.getElementById('closeFilterModalBtn');
            const applyFiltersBtn = document.getElementById('applyFiltersBtn');
            const clearFiltersBtn = document.getElementById('clearFiltersBtn');
            const sortBy = document.getElementById('sortBy');
            
            const slugifyJS = (text) => text ? text.toString().toLowerCase().trim().replace(/\s+/g, '-').replace(/[^\w\-]+/g, '').replace(/\-\-+/g, '-') : 'file';

            const createFileCardHTML = (file) => {
                const wrapper = document.createElement('div');
                wrapper.className = 'col-lg-3 col-md-4 col-sm-6 col-6';
                const fileUrl = `/file/${file.slug || slugifyJS(file.filename)}/${file._id}`;
                const priceText = file.price > 0 ? `Buy for ₹${file.price}` : `Download`;
                wrapper.innerHTML = `
                    <div class="file-card-wrapper">
                        <div class="file-card">
                            <div class="head" title="${file.filename}">${file.filename}</div>
                            <div class="card-img"><img src="${file.previewUrl}" alt="${file.filename}" loading="lazy"></div>
                            <div class="content">
                                <span class="meta-item" title="Creator"><i class="fas fa-user"></i> ${file.user || 'Admin'}</span>
                                <span class="meta-item" title="Downloads"><i class="fas fa-download"></i> ${(file.downloadCount || 0).toLocaleString()}</span>
                            </div>
                            <div class="button-container">
                                <a href="${fileUrl}" class="button">${priceText}</a>
                            </div>
                        </div>
                    </div>`;
                return wrapper;
            };

            const openSearchModal = () => {
                modalSearchInput.value = currentFilters.search;
                searchModal.classList.add('is-open');
                document.body.classList.add('modal-is-open');
                modalSearchInput.focus();
                if (modalSearchInput.value) updateSuggestions();
            };
            const closeAndResetSearch = () => {
                searchModal.classList.remove('is-open');
                document.body.classList.remove('modal-is-open');
            };
            
            const renderResultsFromSuggestions = () => {
                fileCardsContainer.innerHTML = '';
                if (lastSuggestions.length > 0) {
                    noResultsBlock.style.display = 'none';
                    paginationControls.style.display = 'none';
                    resultsCounter.textContent = `Showing ${lastSuggestions.length} results for "${currentFilters.search}"`;
                    lastSuggestions.forEach(file => {
                        fileCardsContainer.appendChild(createFileCardHTML(file));
                    });
                } else {
                    noResultsBlock.style.display = 'block';
                    resultsCounter.textContent = 'No results found.';
                }
            };
            
            const updateSuggestions = async () => {
                const query = modalSearchInput.value.trim();
                currentFilters.search = query;
                document.querySelector('#searchTrigger .placeholder-text').textContent = query || 'Search for notes...';
                document.querySelector('#searchTrigger .placeholder-text').style.color = query ? 'var(--color-black)' : '#777';

                if (query.length < 2) {
                    modalSuggestions.innerHTML = '<p style="font-weight: 600; color: #777; text-align: center;">Keep typing to see suggestions...</p>';
                    lastSuggestions = [];
                    return;
                }
                
                try {
                    const response = await fetch(`/suggestions?q=${encodeURIComponent(query)}`);
                    if (!response.ok) throw new Error('Suggestion fetch failed');
                    const suggestions = await response.json();
                    lastSuggestions = suggestions;

                    if (suggestions.length > 0) {
                        modalSuggestions.innerHTML = suggestions.map(file => {
                            const fileUrl = `/file/${file.slug || slugifyJS(file.filename)}/${file._id}`;
                            const title = file.filename.replace(new RegExp(query, 'gi'), (match) => `<strong>${match}</strong>`);
                            return `<a href="${fileUrl}" class="suggestion-item"><img src="${file.previewUrl}" class="suggestion-thumb" alt="${file.filename}"><div class="suggestion-info"><span class="suggestion-title">${title}</span><span class="suggestion-user">by ${file.user || 'Admin'}</span></div></a>`;
                        }).join('');
                    } else {
                        modalSuggestions.innerHTML = '<p style="font-weight: 600; color: #777; text-align: center;">No suggestions found.</p>';
                    }
                } catch (error) {
                    console.error("Suggestion error:", error);
                    modalSuggestions.innerHTML = '<p style="font-weight: 600; color: var(--color-error); text-align: center;">Could not fetch suggestions.</p>';
                }
            };
            
            const fetchAndRenderFiles = async (isInitialLoad = false) => {
                loadingIndicator.style.display = 'block';
                fileCardsContainer.innerHTML = '';
                noResultsBlock.style.display = 'none';
                paginationControls.style.display = 'none';

                const params = new URLSearchParams({
                    page: currentPage, limit: filesPerPage,
                    search: currentFilters.search, sort: currentFilters.sort,
                    price: currentFilters.price,
                });
                currentFilters.categories.forEach(cat => params.append('category', cat));
                currentFilters.fileTypes.forEach(type => params.append('fileType', type));

                try {
                    const response = await fetch(`/files?${params.toString()}`);
                    if (!response.ok) throw new Error(`HTTP error! Status: ${response.status}`);
                    const data = await response.json();
                    
                    if (isInitialLoad) {
                        if (data.allCategories) {
                            allCategories = data.allCategories;
                            const categoryContainer = document.getElementById('categoryFilters');
                            if(categoryContainer) {
                                categoryContainer.innerHTML = allCategories.map(cat => `<div class="form-check"><input class="form-check-input category-checkbox" type="checkbox" value="${cat.toLowerCase()}" id="cat-${cat.toLowerCase().replace(/\s+/g, '-')}"><label class="form-check-label" for="cat-${cat.toLowerCase().replace(/\s+/g, '-')}">${cat}</label></div>`).join('');
                            }
                        }
                        if (data.allFileTypes) {
                            allFileTypes = data.allFileTypes;
                            const fileTypeContainer = document.getElementById('fileTypeFilters');
                            if(fileTypeContainer) {
                                fileTypeContainer.innerHTML = allFileTypes.map(type => `<div class="form-check"><input class="form-check-input file-type-checkbox" type="checkbox" value="${type.toLowerCase()}" id="type-${type.toLowerCase()}"><label class="form-check-label" for="type-${type.toLowerCase()}">${type.toUpperCase()}</label></div>`).join('');
                            }
                        }
                    }

                    loadingIndicator.style.display = 'none';
                    if (!data.files || data.files.length === 0) {
                        noResultsBlock.style.display = 'block';
                        resultsCounter.textContent = 'No results found.';
                        return;
                    }

                    data.files.forEach(file => fileCardsContainer.appendChild(createFileCardHTML(file)));
                    
                    if (data.totalPages > 1) {
                        paginationControls.style.display = 'flex';
                        prevButton.disabled = currentPage === 1;
                        nextButton.disabled = currentPage === data.totalPages;
                        pageIndicator.textContent = `Page ${currentPage} of ${data.totalPages}`;
                    }
                    resultsCounter.textContent = `Showing ${data.files.length} of ${data.totalFiles} results`;
                } catch (error) {
                    loadingIndicator.style.display = 'none';
                    noResultsBlock.style.display = 'block';
                    noResultsBlock.querySelector('h4').textContent = 'Error Loading Files';
                    noResultsBlock.querySelector('p').textContent = 'Could not connect to the server.';
                    console.error('Fetch error:', error);
                }
            };

            searchTrigger.addEventListener('click', openSearchModal);
            closeSearchModal.addEventListener('click', closeAndResetSearch);
            
            modalSearchInput.addEventListener('input', () => {
                clearTimeout(searchDebounceTimeout);
                searchDebounceTimeout = setTimeout(updateSuggestions, 300);
            });

            modalSearchInput.addEventListener('keydown', (e) => {
                if (e.key === 'Enter') {
                    e.preventDefault();
                    renderResultsFromSuggestions();
                    closeAndResetSearch();
                }
            });
            
            const openFilterModal = () => {
                filterModal.classList.add('is-open');
                document.body.classList.add('modal-is-open');
            };
            const closeFilterModal = () => {
                filterModal.classList.remove('is-open');
                document.body.classList.remove('modal-is-open');
            };

            openFilterModalBtn.addEventListener('click', openFilterModal);
            closeFilterModalBtn.addEventListener('click', closeFilterModal);
            filterModal.addEventListener('click', (e) => { if(e.target === filterModal) closeFilterModal(); });
            
            applyFiltersBtn.addEventListener('click', () => {
                currentFilters.sort = sortBy.value;
                currentFilters.price = document.querySelector('input[name="priceFilter"]:checked').value;
                currentFilters.categories = Array.from(document.querySelectorAll('.category-checkbox:checked')).map(cb => cb.value);
                currentFilters.fileTypes = Array.from(document.querySelectorAll('.file-type-checkbox:checked')).map(cb => cb.value);
                currentPage = 1;
                fetchAndRenderFiles();
                closeFilterModal();
            });

            clearFiltersBtn.addEventListener('click', () => {
                sortBy.value = 'popular';
                document.getElementById('priceAll').checked = true;
                document.querySelectorAll('.category-checkbox:checked').forEach(cb => cb.checked = false);
                document.querySelectorAll('.file-type-checkbox:checked').forEach(cb => cb.checked = false);
                currentFilters.search = '';
                document.querySelector('#searchTrigger .placeholder-text').textContent = 'Search for notes...';
                document.querySelector('#searchTrigger .placeholder-text').style.color = '#777';
                applyFiltersBtn.click();
            });
            
            prevButton.addEventListener('click', () => {
                if (currentPage > 1) { currentPage--; fetchAndRenderFiles(); }
            });

            nextButton.addEventListener('click', () => {
                if (!nextButton.disabled) { currentPage++; fetchAndRenderFiles(); }
            });

            fetchAndRenderFiles(true);
        });
    </script>
</body>
</html>
<%-include("footer")%> 