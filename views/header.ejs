<meta name="google-site-verification" content="Hcnu9BHn9udbxOrSebP2NCm4kTf0IwYg9mStgcwI0BU" />

<style>
  /* --- Galactic Dark Header Theme --- */
  :root {
    --color-primary: #8b5cf6;
    --color-text: #e5e7eb;
    --color-text-muted: #9ca3af;
    --color-bg-dark: #111827;
    --color-bg-card: rgba(31, 41, 55, 0.7);
    --color-border: rgba(255, 255, 255, 0.1);
    --gradient-buy: linear-gradient(90deg, #8b5cf6 0%, #ec4899 100%);
    --radius-lg: 0.75rem;
    --transition: 0.3s ease-in-out;
  }

  .site-header {
    background-color: var(--color-bg-card);
    backdrop-filter: blur(12px);
    -webkit-backdrop-filter: blur(12px);
    border-bottom: 1px solid var(--color-border);
    position: sticky;
    top: 0;
    z-index: 1020;
    padding: 0.75rem 1.5rem;
  }

  .brand-logo {
    height: 50px;
    width: 50px;
    border-radius: 10px;
  }

  .brand-name {
    font-size: 1.5rem;
    font-weight: 800;
    letter-spacing: 1px;
    color: var(--color-primary);
  }
  
  .header-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background-color: transparent;
    border: 1px solid transparent;
    color: var(--color-text-muted);
    padding: 0.5rem 1rem;
    border-radius: var(--radius-lg);
    font-weight: 600;
    text-decoration: none;
    transition: all var(--transition);
  }
  .header-btn:hover {
    background-color: var(--color-border);
    color: #fff;
  }
  .header-btn .fa-bell { font-size: 1.2em; color: var(--color-primary); }

  .hamburger-btn {
    background: none;
    border: none;
    color: var(--color-text);
    font-size: 1.5rem;
    padding: 0.5rem;
    line-height: 1;
    border-radius: var(--radius-lg);
  }
  
  .mobile-nav-panel {
    position: fixed;
    top: 0;
    left: 0;
    width: 280px;
    height: 100%;
    background-color: var(--color-bg-dark);
    border-right: 1px solid var(--color-border);
    z-index: 1045;
    transform: translateX(-100%);
    transition: transform var(--transition);
    display: flex;
    flex-direction: column;
  }
  .mobile-nav-panel.is-open { transform: translateX(0); }
  .mobile-nav-panel .panel-header { display: flex; justify-content: space-between; align-items: center; padding: 1.25rem 1.5rem; border-bottom: 1px solid var(--color-border); }
  .mobile-nav-panel .panel-title { font-size: 1.2rem; font-weight: 700; color: var(--color-primary); }
  .mobile-nav-panel .close-btn { background: none; border: none; color: var(--color-text-muted); font-size: 2rem; line-height: 1; padding: 0; }
  .mobile-nav-panel .panel-body { padding: 1.5rem; display: flex; flex-direction: column; gap: 0.5rem; }
  .mobile-nav-panel .panel-link { display: flex; align-items: center; gap: 1rem; padding: 0.75rem 1rem; border-radius: var(--radius-lg); color: var(--color-text); text-decoration: none; font-weight: 600; }
  .mobile-nav-panel .panel-link:hover { background-color: var(--color-border); }
  
  .nav-overlay {
    position: fixed;
    inset: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1040;
    opacity: 0;
    pointer-events: none;
    transition: opacity var(--transition);
  }
  .nav-overlay.is-open { opacity: 1; pointer-events: auto; }

  #notificationDot {
    display: none; position: absolute; top: 6px; right: 6px; width: 8px;
    height: 8px; background: #ef4444; border-radius: 50%; border: 1px solid var(--color-bg-dark);
  }

  #notificationBox {
    background: rgba(31, 41, 55, 0.8); backdrop-filter: blur(12px); -webkit-backdrop-filter: blur(12px);
    box-shadow: 0 8px 32px rgba(0,0,0,0.3); border-radius: var(--radius-lg); border: 1px solid var(--color-border);
    padding: 0; overflow: hidden; min-width: 360px;
  }
  #notificationBox .notification-header {
    background: var(--gradient-buy); color: #fff; padding: 1rem 1.5rem; font-weight: 700;
    font-size: 1.1em; display: flex; justify-content: space-between; align-items: center;
  }
  #notificationBox .notification-header .close-btn { background: none; border: none; color: #fff; font-size: 1.5em; line-height: 1; cursor: pointer; opacity: 0.8; }
  #notificationBox .notification-header .close-btn:hover { opacity: 1; }
  
  #notificationList { max-height: 350px; overflow-y: auto; padding: 0.5rem; }
  #notificationList .notification-item { display: flex; align-items: flex-start; gap: 1rem; padding: 1rem; border-bottom: 1px solid var(--color-border); transition: background-color var(--transition); border-radius: 0.5rem; }
  #notificationList .notification-item:hover { background-color: var(--color-border); }
  #notificationList .notification-item:last-child { border-bottom: none; }
  .notification-item .icon { font-size: 1.2rem; color: var(--color-primary); margin-top: 0.1rem; }
  .notification-item .content .notification-message { color: var(--color-text); font-weight: 600; }
  .notification-item .content .notification-time { font-size: 0.85em; color: var(--color-text-muted); margin-top: 0.25rem; }
  
  #notificationList .loading-container { display: flex; justify-content: center; align-items: center; padding: 2.5rem; }
  .spinner { width: 32px; height: 32px; border: 3px solid var(--color-border); border-top-color: var(--color-primary); border-radius: 50%; animation: spin 1s linear infinite; }
  @keyframes spin { to { transform: rotate(360deg); } }
  #notificationList .empty-text { color: var(--color-text-muted); padding: 2.5rem; text-align: center; }

  #notificationList::-webkit-scrollbar { width: 8px; }
  #notificationList::-webkit-scrollbar-track { background: transparent; }
  #notificationList::-webkit-scrollbar-thumb { background-color: var(--color-border); border-radius: 10px; }
  #notificationList::-webkit-scrollbar-thumb:hover { background-color: rgba(255,255,255,0.2); }

  @media (max-width: 576px) {
    #notificationBox {
      min-width: 0;
      width: 95vw;
      left: 50%;
      transform: translateX(-50%);
      right: auto;
      top: 75px;
    }
  }
</style>

<header class="site-header">
  <div class="container-fluid d-flex align-items-center justify-content-between">
    <a href="/" class="d-flex align-items-center gap-3 text-decoration-none">
      <img src="/images/logo.png" alt="PDF Store Logo" class="brand-logo">
      <span class="brand-name" style="font-family:'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">PDF Store</span>
    </a>

    <div class="d-flex align-items-center gap-2">
        <nav class="d-none d-lg-flex align-items-center gap-2" id="desktopNav">
          <a href="/" class="header-btn"><i class="fa fa-home"></i><span>Home</span></a>
          <a href="/admin-login" class="header-btn"><i class="fa fa-user"></i><span>Admin Login</span></a>
        </nav>
        
        <button id="notificationBellBtn" type="button" class="header-btn" style="position:relative;">
          <i class="fa fa-bell"></i>
          <span class="d-none d-md-inline">Notifications</span>
          <span id="notificationDot"></span>
        </button>
        
        <button class="hamburger-btn d-lg-none" id="hamburgerBtn" type="button" aria-label="Toggle navigation">
          <i class="fas fa-bars"></i>
        </button>
    </div>
  </div>
</header>

<div class="mobile-nav-panel" id="mobileNavPanel">
  <div class="panel-header">
    <span class="panel-title">Navigation</span>
    <button class="close-btn" id="closeNavBtn">&times;</button>
  </div>
  <div class="panel-body" id="mobileNavBody"></div>
</div>
<div class="nav-overlay" id="navOverlay"></div>

<div id="notificationBox" style="display:none; position:fixed; top:80px; right:30px; z-index:2000;">
    <div class="notification-header">
      <span>Notifications</span>
      <button onclick="closeNotificationBox()" class="close-btn">&times;</button>
    </div>
    <div id="notificationList"></div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // --- Mobile Navigation Logic ---
    const hamburgerBtn = document.getElementById('hamburgerBtn');
    const closeNavBtn = document.getElementById('closeNavBtn');
    const mobileNavPanel = document.getElementById('mobileNavPanel');
    const navOverlay = document.getElementById('navOverlay');
    const desktopNav = document.getElementById('desktopNav');
    const mobileNavBody = document.getElementById('mobileNavBody');

    if (desktopNav && mobileNavBody) {
      const navElements = desktopNav.querySelectorAll('a, button');
      navElements.forEach(el => {
        const clone = el.cloneNode(true);
        clone.classList.remove('header-btn');
        clone.classList.add('panel-link');
        mobileNavBody.appendChild(clone);
      });
    }

    const toggleMobileNav = () => {
      mobileNavPanel.classList.toggle('is-open');
      navOverlay.classList.toggle('is-open');
    };

    hamburgerBtn.addEventListener('click', toggleMobileNav);
    closeNavBtn.addEventListener('click', toggleMobileNav);
    navOverlay.addEventListener('click', toggleMobileNav);

    // --- Notification Bell Logic ---
    // (This remains the same)
    const notificationBellBtn = document.getElementById('notificationBellBtn');
    const notificationBox = document.getElementById('notificationBox');
    const notificationList = document.getElementById('notificationList');
    const notificationDot = document.getElementById('notificationDot');

    if (notificationBellBtn) {
      window.closeNotificationBox = function() {
        notificationBox.style.display = 'none';
      };

      notificationBellBtn.addEventListener('click', function (event) {
        event.stopPropagation();
        const isVisible = notificationBox.style.display === 'block';
        notificationBox.style.display = isVisible ? 'none' : 'block';

        if (!isVisible) {
          notificationList.innerHTML = '<div class="loading-container"><div class="spinner"></div></div>';
          fetch('/notifications')
            .then(res => res.json())
            .then(data => {
              if (data.notifications && data.notifications.length > 0) {
                notificationList.innerHTML = data.notifications.map(n =>
                  `<div class="notification-item">
                     <i class="fas fa-info-circle icon"></i>
                     <div class="content">
                       <div class="notification-message">${n.message}</div>
                       <div class="notification-time">${new Date(n.DateTime).toLocaleString()}</div>
                     </div>
                   </div>`
                ).join('');
              } else {
                notificationList.innerHTML = '<div class="empty-text">No new notifications.</div>';
              }
              notificationDot.style.display = 'none';
            })
            .catch(() => {
              notificationList.innerHTML = '<div class="empty-text" style="color:#ef4444;">Failed to load notifications.</div>';
            });
        }
      });

      document.addEventListener('click', function (e) {
        if (notificationBox && !notificationBox.contains(e.target) && !notificationBellBtn.contains(e.target)) {
          notificationBox.style.display = 'none';
        }
      });

      fetch('/notifications?unseen=1')
        .then(res => res.json())
        .then(data => {
          if (data.notifications && data.notifications.length > 0) {
            notificationDot.style.display = 'block';
          }
        });
    }
    
    // IP Script (as provided)
    async function getUserIP() {
        try {
            const res = await fetch('https://api64.ipify.org?format=json');
            const data = await res.json();
            await fetch('/save-location', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ ip: data.ip })
            });
        } catch (err) {
            console.error("Failed to fetch IP", err);
        }
    }
    getUserIP();
  });
</script>