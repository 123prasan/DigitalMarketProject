<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Chat UI</title>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Anton&family=Inter:wght@400;700;900&display=swap" rel="stylesheet">
<style>
/* --- STYLES APPLIED WITHOUT USING BODY OR :ROOT --- */

.page-container {
    /* CSS variables are defined here, not in :root */
    --font-main: 'Inter', sans-serif;
    --font-display: 'Anton', sans-serif;
    --reply-pipeline-color: #555; /* New color for reply lines */

    /* Styles moved from body to this wrapper */
    background-color: #000;
    font-family: var(--font-main);
    /* padding: 2rem; */
    min-height: 100vh;
    display: flex;
    box-sizing: border-box; /* Ensures padding is included in height/width */
}

/* The main chat widget is now styled as the .card */
.chat-card {
    background: #fff;
    /* border: 6px solid #000; */
    box-shadow: 12px 12px 0 #000;
    transition: transform 0.3s, box-shadow 0.3s;
    display: flex;
    flex-direction: column;
    height: 90vh;
    
    /* Occupies full width up to a max for readability */
    width: 100%;
    /* max-width: 900px; */
    margin: auto; /* Centers the card within the flex container */
    padding: 25px;
}

.chat-card:hover {
    transform: translate(-5px, -5px);
    box-shadow: 17px 17px 0 #000;
}

/* Header styled as .card__title */
.chat-header {
    font-family: var(--font-display);
    font-size: 32px;
    font-weight: 900;
    color: #000;
    text-transform: uppercase;
    margin-bottom: 20px;
    padding-bottom: 15px;
    position: relative;
    overflow: hidden;
    flex-shrink: 0;
}

.chat-header::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 4px;
    background-color: #000;
    transform: translateX(-101%);
    transition: transform 0.4s ease-out;
}

.chat-card:hover .chat-header::after {
    transform: translateX(0);
}

/* Message log with improved spacing */
.message-log {
    flex-grow: 1;
    overflow-y: auto;
    color: #000;
}

.chat-message-item {
    padding: 1rem 0.25rem;
    border-bottom: 2px solid #f0f0f0;
    display: flex;
    flex-direction: column;
    gap: 0.5rem; /* Space between header, text, and actions */
}
.chat-message-item:last-child {
    border-bottom: none;
}

.message-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.message-username b {
    color: #000;
    font-weight: 900;
    font-size: 1rem;
}
.message-timestamp {
    font-size: 0.8rem;
    color: #666;
}

.message-text {
    color: #222;
    line-height: 1.6;
    word-wrap: break-word;
}
.message-actions {
    display: flex;
    align-items: center;
    gap: 1rem;
}
.show-replies-btn {
    color: #000;
    font-weight: 700;
    font-size: 0.9rem;
    text-decoration: underline;
    cursor: pointer;
}
.reaction-btn { color: #555; cursor: pointer; }
.reaction-btn.active { color: #000; font-weight: 700; }
.message-reply-button { color: #000; cursor: pointer; font-size: 1.1rem; }

/* --- Reply Pipeline Styling --- */
.replies-container {
    padding-top: 0.5rem;
    margin-left: 1rem; /* Indent all replies */
    border-left: 3px solid var(--reply-pipeline-color);
}
.replies-container .chat-message-item {
    border-bottom: none; /* No dividers between replies */
    padding: 0.75rem 0 0.75rem 1.25rem; /* Add left padding */
    position: relative;
}
/* The "elbow" of the pipeline */
.replies-container .chat-message-item::before {
    content: "";
    position: absolute;
    top: 1.7rem; /* Align with middle of the (non-existent) avatar */
    left: -1.25rem; /* Connect to the main vertical line */
    width: 1rem;
    height: 3px;
    background-color: var(--reply-pipeline-color);
}

/* Input area styled as .card__form */
.input-area {
    display: flex;
    gap: 15px;
    margin-top: 20px;
    flex-shrink: 0;
}

.input-area input {
    flex-grow: 1;
    padding: 10px 15px;
    border: 3px solid #000;
    font-size: 16px;
    font-family: inherit;
    transition: transform 0.3s, background-color 0.3s, color 0.3s;
    width: 100%;
}

.input-area input:focus {
    outline: none;
    transform: scale(1.02);
    background-color: #000;
    color: #ffffff;
}

/* Send button styled as .card__button */
.send-button {
    border: 3px solid #000;
    background: #000;
    color: #fff;
    padding: 10px;
    font-size: 18px;
    font-weight: bold;
    text-transform: uppercase;
    cursor: pointer;
    position: relative;
    overflow: hidden;
    transition: transform 0.3s;
    flex-shrink: 0;
    width: 150px;
}

.send-button::before {
    content: "Post it!";
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 105%;
    background-color: #5ad641;
    color: #000;
    display: flex;
    align-items: center;
    justify-content: center;
    transform: translateY(100%);
    transition: transform 0.3s cubic-bezier(0.25, 1, 0.5, 1);
}

.send-button:hover::before {
    transform: translateY(0);
}
.send-button:active {
    transform: scale(0.95);
}

/* Hiding original avatar and timestamp elements to be re-created in JS for better styling control */
.message-avatar, .message-time { display: none; } 
</style>
</head>
<body>

<div class="page-container">
    <div class="chat-card">
        <div class="chat-header">Discussions</div>
        <div class="message-log" id="message-log">
            </div>
        <div class="input-area">
            <input type="text" id="message-input" placeholder="Say something..." />
            <button id="send-button" class="send-button">Send</button>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', () => {
    const CHAT_ROOM_ID = "<%=file._id%>";
    const msgInput = document.getElementById('message-input');
    const sendBtn = document.getElementById('send-button');
    const messageLog = document.getElementById('message-log');

    const isLoggedIn = <%= isLoggedin %>;
    const username = "<%= username %>";

    let currentUser = null;
    let chatMessages = [];

    if(isLoggedIn && username){
        currentUser = { userId:'user_'+Date.now()+Math.random(), username:username, badge:null };
        msgInput.disabled = false; sendBtn.disabled = false; msgInput.placeholder = "Say something...";
    }

    const scrollToBottom = () => { messageLog.scrollTop = messageLog.scrollHeight; }
    const getInitials = (n) => n ? (n.split(' ').length>1 ? n.split(' ')[0][0].toUpperCase()+n.split(' ')[1][0].toUpperCase() : n[0].toUpperCase()) : '?';
    const timeAgo = (dateValue) => {
        const diffMs = new Date() - new Date(dateValue);
        const s=Math.floor(diffMs/1000), m=Math.floor(s/60), h=Math.floor(m/60), d=Math.floor(h/24), w=Math.floor(d/7), mo=Math.floor(d/30), y=Math.floor(d/365);
        if(s<60) return `${s} seconds ago`; if(m<60) return `${m} minutes ago`; if(h<24) return `${h} hours ago`;
        if(d<7) return `${d} days ago`; if(w<5) return `${w} weeks ago`; if(mo<12) return `${mo} months ago`; return `${y} years ago`;
    }

const createMessageElement = (msgObject, isReply = false, parentId = null) => {
    const item = document.createElement('div');
    item.className = 'chat-message-item';
    item.dataset.messageId = msgObject._id;

    const avatar = document.createElement('div');
    avatar.className = 'message-avatar';
    avatar.textContent = getInitials(msgObject.author.username);
    let hash = 0;
    for (let i = 0; i < msgObject.author.username.length; i++) {
        hash = msgObject.author.username.charCodeAt(i) + ((hash << 5) - hash);
    }
    avatar.style.backgroundColor = `hsl(${hash % 360},50%,40%)`;

    const content = document.createElement('div');
    content.className = 'message-content';

    const time = timeAgo(msgObject.createdAt);
    let headerHTML = `
        <div class="message-header">
            <span class="message-username"><b>${msgObject.author.username}</b></span>
            <span class="message-timestamp">${time}</span>
        </div>`;
    if(msgObject.author.badge){
        const badgeClass=`${msgObject.author.badge}-badge`;
        const badgeIcon=msgObject.author.badge==='mod'?'üîß':'‚úî';
        headerHTML += `<span class="message-badge ${badgeClass}">${badgeIcon}</span>`;
    }
    content.innerHTML = `<div class="message-header">${headerHTML}</div><div class="message-text">${msgObject.text}</div>`;

    const actions = document.createElement('div');
    actions.className = 'message-actions';

    const likeBtn = document.createElement('span');
    likeBtn.className = 'reaction-btn like-btn';
    if(currentUser && msgObject.reactions.likes.includes(currentUser.userId)) likeBtn.classList.add('active');
    likeBtn.innerHTML = `<span class="icon">üëç</span><span class="count">${msgObject.reactions.likes.length}</span>`;

    const dislikeBtn = document.createElement('span');
    dislikeBtn.className = 'reaction-btn dislike-btn';
    if(currentUser && msgObject.reactions.dislikes.includes(currentUser.userId)) dislikeBtn.classList.add('active');
    dislikeBtn.innerHTML = `<span class="icon">üëé</span><span class="count">${msgObject.reactions.dislikes.length}</span>`;

    const reactionTargetId = isReply ? msgObject._id : msgObject._id;
    likeBtn.onclick = () => handleReaction(isReply ? parentId : msgObject._id, isReply ? msgObject._id : null, 'likes');
    dislikeBtn.onclick = () => handleReaction(isReply ? parentId : msgObject._id, isReply ? msgObject._id : null, 'dislikes');

    actions.appendChild(likeBtn);
    actions.appendChild(dislikeBtn);
    content.appendChild(actions);

    const repliesContainer = document.createElement('div');
    repliesContainer.className = 'sub-chat-container hidden';
    content.appendChild(repliesContainer);

    if(msgObject.replies && msgObject.replies.length > 0){
        const toggleBtn = document.createElement('span');
        toggleBtn.className = 'show-replies-btn';
        toggleBtn.textContent = `View ${msgObject.replies.length} ${msgObject.replies.length > 1 ? 'replies' : 'reply'}`;
        toggleBtn.onclick = () => toggleReplies(msgObject, repliesContainer, toggleBtn);
        actions.appendChild(toggleBtn);
    }

    const replyButton = document.createElement('span');
    replyButton.className = 'message-reply-button';
    // Use CSS variable for the reply icon color
    replyButton.innerHTML = `<i style="color:var(--theme-accent);" class="fa-solid fa-reply fa-flip-vertical"></i>`;
    replyButton.onclick = () => initiateInlineReply(msgObject._id, content);

    item.append(avatar, content, replyButton);
    return item;
}

    const renderAllMessages=()=>{ messageLog.innerHTML=''; chatMessages.slice().sort((a,b)=>b.reactions.likes.length-a.reactions.likes.length).forEach(msg=>{ messageLog.appendChild(createMessageElement(msg)); }); scrollToBottom(); }

    const toggleReplies = (msgObject, container, button) => {
        const isHidden = container.classList.contains('hidden');
        container.innerHTML = '';
        if (isHidden) {
            msgObject.replies.forEach(reply => container.appendChild(createMessageElement(reply, true, msgObject._id)));
            container.classList.remove('hidden');
            button.textContent = 'Hide replies';
        } else {
            container.classList.add('hidden');
            button.textContent = `View ${msgObject.replies.length} ${msgObject.replies.length > 1 ? 'replies' : 'reply'}`;
        }
    }

    const initiateInlineReply=(parentId, contentElement)=>{
        if(!currentUser){ alert("Please login to reply."); return; }
        document.querySelector('.inline-reply-form')?.remove();
        const form=document.createElement('div'); form.className='inline-reply-form';
        form.innerHTML=`<input type="text" class="inline-reply-input" placeholder="Add a reply..." autofocus/><button class="inline-reply-send">Reply</button>`;
        const sendAction=()=>{ const input=form.querySelector('input'); if(input.value.trim()){ submitReply(parentId,input.value.trim()); form.remove(); }};
        form.querySelector('button').onclick=sendAction; form.querySelector('input').onkeydown=(e)=>{if(e.key==='Enter') sendAction();};
        contentElement.appendChild(form);
    }

    const handleReaction=async (messageId, replyId, reactionType)=>{
        if(!currentUser){ alert("Please login to react."); return; }
        try{
            const res=await fetch(`/api/chat/react`, { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify({messageId,replyId,userId:currentUser.userId,reactionType})});
            if(!res.ok) throw new Error('Reaction failed');
            const updatedMsg=await res.json();
            const idx=chatMessages.findIndex(m=>m._id===messageId);
            if(idx>-1){ chatMessages[idx]=updatedMsg; renderAllMessages(); }
        }catch(e){ console.error(e); }
    }

    const submitMessage=async ()=>{
        if(!msgInput.value.trim()||!currentUser) return;
        const payload={ author: currentUser, text: msgInput.value.trim() };
        try{
            const res=await fetch(`/api/chat/${CHAT_ROOM_ID}/messages`, { method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(payload)});
            if(!res.ok) throw new Error('Failed to send message');
            const newMsg=await res.json(); chatMessages.push(newMsg); messageLog.appendChild(createMessageElement(newMsg)); msgInput.value=''; scrollToBottom();
        }catch(e){ console.error(e);}
    }

    const submitReply=async (parentId,text)=>{
        if(!currentUser) return;
        const payload={ author: currentUser, text };
        try{
            const res=await fetch(`/api/chat/messages/${parentId}/replies`,{ method:'POST', headers:{'Content-Type':'application/json'}, body:JSON.stringify(payload)});
            if(!res.ok) throw new Error('Failed to send reply');
            const updatedParent=await res.json();
            const idx=chatMessages.findIndex(m=>m._id===parentId); if(idx>-1){ chatMessages[idx]=updatedParent; renderAllMessages(); }
        }catch(e){ console.error(e);}
    }

    const startChat=async ()=>{
        try{
            const res=await fetch(`/api/chat/${CHAT_ROOM_ID}/messages`);
            if(!res.ok) throw new Error('Could not fetch chat history');
            chatMessages=await res.json();
            if(chatMessages.length===0){ messageLog.innerHTML="<div class='message-content'>No Discussions Yet<div class='message-text'></div></div>"; return; }
            document.querySelector(".chat-header").innerHTML=`${chatMessages.length} &nbsp Discussions`;
            renderAllMessages();
        }catch(e){ console.error(e); messageLog.innerHTML=`<div class="chat-message-item"><div class="message-content"><div class="message-text">Could not load chat. Is the backend server running?</div></div></div>`;}
    }

    sendBtn.addEventListener('click', submitMessage);
    msgInput.addEventListener('keydown', e=>{ if(e.key==='Enter') submitMessage(); });

    startChat();
});
    // NOTE: A small change is required in the JavaScript to create the timestamp element for styling.
    // I will use your existing `timeAgo` function.

    // Find this line in your script:
    // let headerHTML = `<span class="message-username"><b>${msgObject.author.username}</b> &nbsp <em style="opacity:0.5;font-size:12px">${time}</em></span>`;

    // And replace it with this to create separate elements for better styling:
    // const time = timeAgo(msgObject.createdAt);
    // let headerHTML = `
    //     <div class="message-header">
    //         <span class="message-username"><b>${msgObject.author.username}</b></span>
    //         <span class="message-timestamp">${time}</span>
    //     </div>`;
    
    // The rest of your Javascript can remain the same.
</script>
</body>
</html>



