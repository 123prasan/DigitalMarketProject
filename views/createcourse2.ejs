<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course Upload</title>
    <!-- <meta http-equiv="Content-Security-Policy" content="script-src 'self' 'unsafe-inline' https://cdn.tailwindcss.com https://cdnjs.cloudflare.com https://unpkg.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://fonts.gstatic.com https://cdnjs.cloudflare.com;"> -->
    <script src="https://cdn.tailwindcss.com"></script>

    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"
        xintegrity="sha512-SnH5WK+bZxgPHs44uWIX+LLJAJ9/2PkPKZ5QiAj6Ta86w+fsb2TkcmfRyVX3pBnMFcV7oQPJkl9QevSCWr3W6A=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>
    <script src="https://unpkg.com/xlsx/dist/xlsx.full.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/7.0.0/css/all.min.css"
        integrity="sha512-DxV+EoADOkOygM4IR9yXP8Sb2qwgidEmeqAEmDKIOfPRQZOWbXCzLC6vjbZyy0vPisbH2SyW27+ddLVCN+OMzQ=="
        crossorigin="anonymous" referrerpolicy="no-referrer" />
    <style>
        .tag {
            display: inline-flex;
            align-items: center;
            background-color: #2563eb;
            /* Blue-600 */
            color: white;
            padding: 4px 12px;
            border-radius: 9999px;
            /* pill shape */
            font-size: 0.875rem;
            /* text-sm */
            font-weight: 500;
            line-height: 1.25rem;
            animation: fadeIn 0.2s ease-out;
        }

        .remove-tag {
            margin-left: 8px;
            cursor: pointer;
            font-weight: bold;
            font-size: 1.1rem;
            line-height: 1;
            transition: color 0.2s;
        }

        .remove-tag:hover {
            color: #fecaca;
            /* A light red for hover */
        }

        :root {
            --primary-blue: #1A73E8;
            --light-blue: #E8F0FE;
            --text-dark: #202124;
            --text-light: #5F6368;
            --border-light: #DADCE0;
            --border-dashed: #E5E9EC;
            --hover-bg: #F8F9FA;
            --success-green: #34A853;
            --error-red: #EA4335;
            --warning-orange: #FBBC04;
            --section-bg: #F0F4F8;
            /* Background for sections */
            --card-bg: #FFFFFF;
            --shadow-light: 0 2px 6px rgba(0, 0, 0, 0.06);
            --shadow-medium: 0 4px 12px rgba(0, 0, 0, 0.08);
            --shadow-deep: 0 8px 20px rgba(0, 0, 0, 0.1);
        }


        .main-container {
            background-color: var(--card-bg);
            padding: 32px;
            border-radius: 12px;
            box-shadow: var(--shadow-medium);
            width: 100%;
            /* max-width: 650px; Slightly wider for better layout */
            animation: fadeIn 0.5s ease-out forwards;
            border: 1px solid var(--border-light);
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Section Styling */
        .section {
            background-color: var(--section-bg);
            border-radius: 10px;
            padding: 24px;
            margin-bottom: 30px;
            box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.05);
            /* Inner shadow for depth */
            border: 1px solid #E0E4E8;
            transition: all 0.3s ease-in-out;
        }

        .section:last-child {
            margin-bottom: 0;
        }

        .section-header {
            display: flex;
            align-items: center;
            margin-bottom: 20px;
            gap: 12px;
            color: var(--text-dark);
        }

        .section-header .material-symbols-rounded {
            font-size: 30px;
            /* Slightly larger icon */
            color: var(--primary-blue);
        }

        .section-header h3 {
            font-size: 22px;
            /* Larger heading */
            font-weight: 500;
            margin: 0;
        }

        /* Upload Area Styling */
        .upload-area {
            border: 2px dashed var(--border-dashed);
            border-radius: 10px;
            /* More rounded */
            padding: 35px 25px;
            /* More padding */
            cursor: pointer;
            transition: all 0.3s ease;
            background-color: #FDFDFD;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 160px;
            /* Slightly taller */
            text-align: center;
        }

        .upload-area:hover {
            border-color: var(--primary-blue);
            box-shadow: 0 3px 10px rgba(26, 115, 232, 0.15);
            background-color: rgba(26, 115, 232, 0.02);
            /* Very subtle background change */
        }

        .upload-area.dragover {
            border-color: var(--primary-blue);
            background-color: rgba(26, 115, 232, 0.08);
            /* More noticeable dragover */
            transform: translateY(-2px);
            /* Slight lift */
        }

        .upload-area input[type="file"] {
            display: none;
        }

        .upload-icon {
            width: 64px;
            /* Larger icon container */
            height: 64px;
            background-color: var(--light-blue);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 15px;
            /* More spacing */
            position: relative;
            box-shadow: var(--shadow-light);
            /* Subtle shadow on icon */
            animation: pulseFade 2s infinite ease-in-out;
        }

        @keyframes pulseFade {
            0% {
                transform: scale(1);
                opacity: 1;
            }

            50% {
                transform: scale(1.03);
                opacity: 0.9;
            }

            /* Softer pulse */
            100% {
                transform: scale(1);
                opacity: 1;
            }
        }

        .upload-icon .material-symbols-rounded {
            font-size: 36px;
            /* Larger icon */
            color: var(--primary-blue);
        }

        .upload-area-text {
            font-size: 16px;
            /* Slightly larger text */
            color: var(--text-dark);
            margin-bottom: 6px;
            font-weight: 500;
        }

        .upload-area-subtext {
            font-size: 14px;
            color: var(--text-light);
        }

        /* Preview for main image */
        #mainImagePreview {
            width: 100%;
            max-height: 220px;
            /* Slightly taller preview */
            object-fit: contain;
            border-radius: 8px;
            margin-top: 20px;
            /* More spacing */
            display: none;
            box-shadow: var(--shadow-light);
            transition: all 0.3s ease-out;
            /* Smooth preview appearance */
        }

        #mainImagePreview.show {
            display: block;
            animation: fadeIn 0.4s ease-out;
        }

        /* Main Image Specific Status */
        #mainImageStatus {
            margin-top: 20px;
            padding: 15px 20px;
            /* More padding */
            background-color: var(--card-bg);
            border-radius: 8px;
            box-shadow: var(--shadow-light);
            border-left: 5px solid var(--border-light);
            /* Thicker border */
            display: none;
            /* Hidden by default */
            align-items: center;
            gap: 15px;
            /* More spacing */
            font-size: 15px;
            color: var(--text-dark);
            transition: all 0.3s ease-in-out;
        }

        #mainImageStatus.show {
            display: flex;
        }

        #mainImageStatus.pending {
            border-left-color: var(--primary-blue);
        }

        #mainImageStatus.uploading,
        #mainImageStatus.uploading_to_storage {
            border-left-color: var(--primary-blue);
        }

        #mainImageStatus.complete {
            border-left-color: var(--success-green);
        }

        #mainImageStatus.error {
            border-left-color: var(--error-red);
        }

        #mainImageStatus.cancelled {
            border-left-color: var(--warning-orange);
        }

        #mainImageStatus .material-symbols-rounded {
            font-size: 22px;
            /* Slightly larger icon */
            color: var(--text-light);
            flex-shrink: 0;
            /* Prevent icon from shrinking */
        }

        #mainImageStatus.uploading .material-symbols-rounded,
        #mainImageStatus.uploading_to_storage .material-symbols-rounded {
            animation: spin 1s infinite linear;
            color: var(--primary-blue);
        }

        #mainImageStatus.complete .material-symbols-rounded {
            color: var(--success-green);
        }

        #mainImageStatus.error .material-symbols-rounded {
            color: var(--error-red);
        }

        #mainImageStatus.cancelled .material-symbols-rounded {
            color: var(--warning-orange);
        }

        #mainImageStatus .status-content {
            /* New wrapper for text and progress */
            flex-grow: 1;
        }

        #mainImageStatus .status-text {
            font-weight: 500;
            margin-bottom: 4px;
            /* More spacing */
        }

        #mainImageStatus .progress-info {
            font-size: 13px;
            color: var(--text-light);
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
            /* Allow wrapping on smaller screens */
        }

        #mainImageStatus .progress-bar-container {
            width: 100%;
            height: 6px;
            /* Thicker progress bar */
            background-color: #E8EAED;
            border-radius: 3px;
            margin-top: 8px;
            /* More spacing */
            overflow: hidden;
        }

        #mainImageStatus .progress-bar {
            height: 100%;
            width: 0%;
            background-color: var(--primary-blue);
            border-radius: 3px;
            transition: width 0.4s ease-out;
            /* Slower transition for smoothness */
        }

        /* Action icons for main image status */
        #mainImageStatus .action-icon-remove,
        #mainImageStatus .action-icon-retry {
            cursor: pointer;
            padding: 8px;
            /* Larger hit area */
            border-radius: 50%;
            transition: background-color 0.2s ease, color 0.2s ease;
            font-size: 20px;
        }

        #mainImageStatus .action-icon-remove:hover {
            background-color: rgba(234, 67, 53, 0.1);
            color: var(--error-red);
        }

        #mainImageStatus .action-icon-retry:hover {
            background-color: rgba(26, 115, 232, 0.1);
            color: var(--primary-blue);
        }


        /* File List for Related Files */
        .file-list {
            text-align: left;
            margin-top: 20px;
            /* More spacing */
            max-height: 300px;
            /* Taller scroll area */
            overflow-y: auto;
            padding-right: 10px;
            /* Space for scrollbar */
            border-radius: 8px;
            /* Match other elements */
            background-color: var(--card-bg);
            /* Background for the list area */
            padding-bottom: 1px;
            /* To avoid cut-off shadow on last item */
        }

        .file-item {
            display: flex;
            align-items: center;
            background-color: var(--card-bg);
            padding: 12px 16px;
            /* More padding */
            border-radius: 8px;
            margin-bottom: 10px;
            /* More spacing between items */
            box-shadow: var(--shadow-light);
            /* Subtle shadow */
            animation: slideInFromBottom 0.4s ease-out forwards;
            /* Smoother animation */
            transition: all 0.3s ease-in-out;
            border-left: 4px solid transparent;
            /* Default transparent border */
        }

        @keyframes slideInFromBottom {
            from {
                opacity: 0;
                transform: translateY(15px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .file-item:hover {
            box-shadow: var(--shadow-medium);
            /* Lift on hover */
            transform: translateY(-2px);
        }

        .file-item.complete {
            border-left-color: var(--success-green);
        }

        .file-item.error {
            border-left-color: var(--error-red);
        }

        .file-item.cancelled,
        .file-item.paused {
            border-left-color: var(--warning-orange);
        }

        .file-item.uploading,
        .file-item.uploading_to_storage {
            border-left-color: var(--primary-blue);
        }


        .file-icon-wrapper {
            width: 44px;
            /* Slightly larger icon wrapper */
            height: 44px;
            display: flex;
            align-items: center;
            justify-content: center;
            flex-shrink: 0;
            margin-right: 15px;
            /* More spacing */
            border-radius: 50%;
            background-color: #F5F5F5;
            /* Light grey background for icons */
        }

        .file-icon-wrapper .material-symbols-rounded {
            font-size: 30px;
            /* Larger file icons */
            color: var(--text-light);
            /* Default icon color */
        }

        /* Specific file type icon colors */
        .file-item[data-file-type^="image"] .file-icon-wrapper .material-symbols-rounded {
            color: #8E24AA;
        }

        /* Deep Purple */
        .file-item[data-file-type*="excel"] .file-icon-wrapper .material-symbols-rounded {
            color: #107C41;
        }

        /* Dark Green */
        .file-item[data-file-type*="word"] .file-icon-wrapper .material-symbols-rounded {
            color: #2A5699;
        }

        /* Dark Blue */
        .file-item[data-file-type*="presentation"] .file-icon-wrapper .material-symbols-rounded {
            color: #D24726;
        }

        /* Orange-Red */
        .file-item[data-file-type*="pdf"] .file-icon-wrapper .material-symbols-rounded {
            color: #DC3545;
        }

        /* Crimson Red */
        .file-item[data-file-type*="zip"] .file-icon-wrapper .material-symbols-rounded,
        .file-item[data-file-type*="archive"] .file-icon-wrapper .material-symbols-rounded {
            color: #FFC107;
        }

        /* Amber */


        .file-details {
            flex-grow: 1;
            overflow: hidden;
            padding-right: 15px;
            /* Space before actions */
        }

        .file-name {
            font-size: 16px;
            /* Larger name */
            font-weight: 500;
            color: var(--text-dark);
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            margin-bottom: 4px;
            /* More spacing */
        }

        .file-progress-info {
            font-size: 13px;
            color: var(--text-light);
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 10px;
            flex-wrap: wrap;
        }

        .file-progress-info span:last-child {
            margin-left: auto;
            /* Push speed to the right */
        }

        .file-item .progress-bar-container {
            /* Specificity for file items */
            width: 100%;
            height: 5px;
            /* Slightly thicker */
            background-color: #E8EAED;
            border-radius: 2.5px;
            margin-top: 6px;
            /* More spacing */
            overflow: hidden;
        }

        .file-item .progress-bar {
            /* Specificity for file items */
            height: 100%;
            width: 0%;
            background-color: var(--primary-blue);
            border-radius: 2.5px;
            transition: width 0.4s ease-out;
            /* Slower for smoothness */
        }

        /* Status and Actions */
        .file-actions {
            display: flex;
            align-items: center;
            flex-shrink: 0;
            margin-left: 18px;
            /* More spacing from details */
            gap: 5px;
            /* Gap between icons */
        }

        .file-actions .material-symbols-rounded {
            font-size: 22px;
            /* Slightly larger action icons */
            color: var(--text-light);
            cursor: pointer;
            padding: 7px;
            /* Larger hit area */
            border-radius: 50%;
            transition: background-color 0.2s ease, transform 0.2s ease;
        }

        .file-actions .material-symbols-rounded:hover {
            background-color: var(--hover-bg);
            transform: scale(1.1);
            /* Subtle hover effect */
        }

        /* Hide/Show logic for action icons */
        .file-item .action-icon-pause,
        .file-item .action-icon-resume,
        .file-item .action-icon-remove,
        .file-item .action-icon-retry,
        .file-item .action-icon-checkmark,
        .file-item .action-icon-spinner {
            display: none;
        }


        .file-item.pending .action-icon-remove {
            display: block;
        }

        .file-item.pending .action-icon-spinner {
            display: none;
        }

        /* No spinner when pending */

        .file-item.uploading .action-icon-pause {
            display: block;
        }

        .file-item.uploading .action-icon-spinner {
            display: block;
            animation: spin 1s infinite linear;
        }

        /* New: for server-to-supabase processing status */
        .file-item.uploading_to_storage .action-icon-pause {
            display: block;
        }

        /* Still allow pause if technically possible */
        .file-item.uploading_to_storage .action-icon-spinner {
            display: block;
            animation: spin 1s infinite linear;
            color: var(--primary-blue);
            /* Keep blue spinner */
        }


        .file-item.paused .action-icon-resume {
            display: block;
        }

        .file-item.paused .action-icon-remove {
            display: block;
        }

        .file-item.paused .action-icon-spinner {
            display: block;
            animation: none;
            /* No spin when paused */
            color: var(--warning-orange);
            /* Indication of pause */
        }

        .file-item.paused .progress-bar {
            background-color: var(--warning-orange);
        }

        .file-item.error .action-icon-retry,
        .file-item.cancelled .action-icon-retry {
            display: block;
        }

        .file-item.error .action-icon-remove,
        .file-item.cancelled .action-icon-remove {
            display: block;
        }

        .file-item.error .action-icon-spinner,
        .file-item.cancelled .action-icon-spinner {
            display: block;
            animation: none;
            /* No spin on error/cancelled */
            color: var(--error-red);
            /* Indication of error/cancelled */
        }

        .file-item.error .progress-bar,
        .file-item.cancelled .progress-bar {
            background-color: var(--error-red);
        }


        .file-item.complete .action-icon-checkmark {
            display: block;
            color: var(--success-green);
        }

        .file-item.complete .action-icon-spinner,
        .file-item.complete .action-icon-pause,
        .file-item.complete .action-icon-resume,
        .file-item.complete .action-icon-remove,
        .file-item.complete .action-icon-retry {
            display: none;
        }


        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Overall Upload Button */
        .upload-buttons {
            margin-top: 35px;
            /* More spacing */
            text-align: right;
            position: relative;
        }

        .upload-buttons button {
            background-color: var(--primary-blue);
            color: white;
            padding: 13px 28px;
            /* Larger button */
            border: none;
            border-radius: 9px;
            /* More rounded */
            cursor: pointer;
            font-size: 16px;
            /* Larger font */
            font-weight: 500;
            transition: all 0.3s ease;
            /* Smoother transition */
            box-shadow: 0 3px 8px rgba(26, 115, 232, 0.2);
            /* Stronger shadow */
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            /* More spacing */
            min-width: 160px;
            /* Wider button */
            letter-spacing: 0.5px;
        }

        .upload-buttons button:hover:not(:disabled) {
            background-color: #1565C0;
            /* Darker blue on hover */
            box-shadow: 0 6px 15px rgba(26, 115, 232, 0.3);
            /* Deeper shadow on hover */
            transform: translateY(-2px);
            /* Slight lift */
        }

        .upload-buttons button:disabled {
            background-color: var(--border-light);
            color: var(--text-light);
            cursor: not-allowed;
            box-shadow: none;
            transform: translateY(0);
        }

        .upload-buttons button .material-symbols-rounded {
            font-size: 22px;
            /* Larger icon */
        }

        .upload-buttons button .button-loader {
            display: none;
            border: 2.5px solid rgba(255, 255, 255, 0.4);
            /* Thicker loader */
            border-top: 2.5px solid #fff;
            border-radius: 50%;
            width: 18px;
            /* Larger loader */
            height: 18px;
            animation: slow-spin 1.5s linear infinite;
        }

        .upload-buttons button.loading .button-loader {
            display: block;
        }

        .upload-buttons button.loading .button-icon,
        .upload-buttons button.loading .button-text {
            display: none;
        }

        @keyframes slow-spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }


        /* Scrollbar styling for a cleaner look */
        .file-list::-webkit-scrollbar {
            width: 8px;
        }

        .file-list::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }

        .file-list::-webkit-scrollbar-thumb {
            background: #B0B5BB;
            /* Darker thumb */
            border-radius: 10px;
        }

        .file-list::-webkit-scrollbar-thumb:hover {
            background: #888E95;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .main-container {
                padding: 20px;
                margin: 20px;
            }

            .section {
                padding: 18px;
            }

            .section-header h3 {
                font-size: 20px;
            }

            .upload-area {
                padding: 25px 15px;
                min-height: 140px;
            }

            .upload-icon {
                width: 56px;
                height: 56px;
                margin-bottom: 10px;
            }

            .upload-icon .material-symbols-rounded {
                font-size: 32px;
            }

            .file-item {
                flex-direction: column;
                align-items: flex-start;
                padding: 10px 12px;
            }

            .file-icon-wrapper {
                margin-bottom: 8px;
            }

            .file-details {
                width: 100%;
                padding-right: 0;
                margin-bottom: 8px;
            }

            .file-actions {
                width: 100%;
                justify-content: flex-end;
                margin-left: 0;
            }

            .upload-buttons button {
                width: 100%;
                padding: 12px 20px;
            }
        }

        @media (max-width: 480px) {
            body {
                padding: 15px;
            }

            .main-container {
                padding: 15px;
            }

            .section-header h3 {
                font-size: 18px;
            }

            .file-progress-info {
                flex-direction: column;
                align-items: flex-start;
                gap: 4px;
            }

            .file-progress-info span:last-child {
                margin-left: unset;
            }
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #242424;
            /* Dark background */
            color: #FFFFFF;
            /* White text */
        }

        /* Custom scrollbar for better aesthetics in a dark theme */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: #333;
            /* Darker track */
        }

        ::-webkit-scrollbar-thumb {
            background: #555;
            /* Lighter thumb */
            border-radius: 4px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #777;
            /* Hover effect for thumb */
        }

        /* Custom styles for the circular loader */
        .loader {
            width: 24px;
            height: 24px;
            border: 4px solid #444;
            /* Darker grey */
            border-top: 4px solid #60A5FA;
            /* Light blue */
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% {
                transform: rotate(0deg);
            }

            100% {
                transform: rotate(360deg);
            }
        }

        /* Styling for the active navigation link */
        .nav-active {
            background-color: #BFDBFE;
            /* Slightly light blue */
            color: #242424;
            /* Dark text for contrast */
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        .nav-active:hover {
            background-color: #93C5FD;
            /* A slightly darker blue for hover */
            color: #242424;
        }

        /* Utility class to show the sidebar overlay on mobile */
        .sidebar-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 40;
            opacity: 0;
            pointer-events: none;
            /* overflow: hidden; */
            transition: opacity 0.3s ease-in-out;
        }

        .sidebar-overlay.active {
            opacity: 1;
            pointer-events: auto;
        }

        /* Styling for the active progress step */
        .progress-step-active {
            background-color: #60A5FA;
            /* Light blue */
            color: white;
        }

        .progress-step-complete {
            background-color: #34D399;
            /* A nice green */
            color: white;
        }

        .progress-line-active {
            background-color: #60A5FA;
            /* Light blue */
        }

        .editable-input {
            width: 100%;
            padding: 0.25rem 0.5rem;
            border: 1px solid #444;
            background-color: #333;
            color: white;
        }

        .editable-container {
            display: flex;
            align-items: center;
            flex-grow: 1;
        }

        /* Custom styles for the video container to maintain aspect ratio */
        .video-container {
            position: relative;
            padding-bottom: 56.25%;
            /* 16:9 aspect ratio */
            height: 0;
            overflow: hidden;
            border-radius: 0.75rem;
            /* rounded-xl */
        }

        .video-container iframe {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        /* New: Styles for the animated success icon */
        .checkmark-circle {
            stroke-dasharray: 166;
            stroke-dashoffset: 166;
            stroke-width: 2;
            stroke-miterlimit: 10;
            stroke: #38bdf8;
            /* Sky Blue */
            fill: none;
            animation: stroke 0.6s cubic-bezier(0.65, 0, 0.45, 1) forwards;
        }

        .checkmark-check {
            transform-origin: 50% 50%;
            stroke-dasharray: 48;
            stroke-dashoffset: 48;
            animation: stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.8s forwards;
        }

        @keyframes stroke {
            100% {
                stroke-dashoffset: 0;
            }
        }

        .checkmark {
            width: 80px;
            height: 80px;
            border-radius: 50%;
            display: block;
            stroke-width: 3;
            stroke: #fff;
            margin: 20px auto;
        }

        /* NEW: Styles for the circular progress bar */
        .circular-progress-container {
            position: relative;
            width: 24px;
            height: 24px;
        }

        .circular-progress-container svg {
            transform: rotate(-90deg);
        }

        .circular-progress-container .track {
            stroke: #444;
            /* Darker track */
        }

        .circular-progress-container .progress {
            stroke: #60A5FA;
            /* Light blue */
            stroke-width: 4;
            stroke-dasharray: 100;
            stroke-dashoffset: 100;
            /* Start with a full circle and animate it to 0 */
            transition: stroke-dashoffset 0.3s linear;
        }

        /* Custom style for student cards to ensure consistent height */
        .student-card {
            min-height: 220px;
            /* Adjust as needed to fit content without overflow */
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

        /* Styles for the new loading spinner */
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-top: 4px solid #ffffff;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            animation: spin 1s linear infinite;
        }

        /* NEW: Styles for the shining box loader */
        .shining-box-loader {
            width: 150px;
            /* Width of the "box" */
            height: 80px;
            /* Height of the "box" */
            background-color: #333;
            /* Darker background */
            border-radius: 8px;
            /* Slightly rounded corners */
            position: relative;
            overflow: hidden;
            /* Hide overflow of the shining effect */
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
            /* Darker shadow */
        }

        .shining-box-loader::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            /* Start off-screen to the left */
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            /* Subtle shining gradient */
            animation: shine 1.5s infinite;
            /* Animation for the shine */
        }

        @keyframes shine {
            to {
                left: 100%;
                /* Move across the box */
            }
        }

        /* Settings tab styles */
        .settings-tab-active {
            border-color: #60A5FA;
            color: #60A5FA;
        }

        /* NEW: Styles for Withdraw Modal */
        .numpad-btn {
            background-color: #333;
            transition: background-color 0.2s;
        }

        .numpad-btn:hover {
            background-color: #444;
        }

        .otp-input {
            width: 50px;
            height: 60px;
            text-align: center;
            font-size: 1.5rem;
            background-color: #333;
            border: 2px solid #555;
            border-radius: 0.5rem;
            color: white;
            transition: border-color 0.2s;
        }

        .otp-input:focus {
            border-color: #60A5FA;
            outline: none;
        }

        /* NEW: Styles for Payment Method Modal */
        .payment-option {
            border: 2px solid #444;
            transition: border-color 0.2s, background-color 0.2s;
        }

        .payment-option.selected {
            border-color: #60A5FA;
            background-color: rgba(96, 165, 250, 0.1);
        }

        .payment-radio {
            appearance: none;
            width: 20px;
            height: 20px;
            border: 2px solid #555;
            border-radius: 50%;
            transition: border-color 0.2s, background-color 0.2s;
        }

        .payment-radio:checked {
            border-color: #60A5FA;
            background-color: #60A5FA;
            background-image: url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z'/%3e%3c/svg%3e");
        }

        /* NEW: Styles for Upload Docs section */
        .upload-box {
            border: 2px dashed #4a5568;
        }

        .upload-box.dragover {
            border-color: #60A5FA;
            background-color: rgba(96, 165, 250, 0.1);
        }

        .file-tab-active {
            color: #60A5FA;
            border-color: #60A5FA;
        }

        /* NEW: Highlight for active notification bell */
        .notifications-active {
            background-color: #374151;
            /* gray-700 */
            color: #e5e7eb;
            /* gray-200 */
        }

        @media (max-width: 768px) {
            .sidebar {
                /* width: 100%; */
                position: fixed;
                top: 0;
                left: 0;
                height: 100%;
                z-index: 50;
            }

            #main-div {
                position: absolute;
                left: 0px;
                /* Full width on mobile */
            }
        }

        .sidebar {}

        #main-nav {
            overflow-y: auto;
            /* Enable scrolling for the sidebar */
            /* Adjust height to fit within the viewport */
            /* scrollbar-width: thin; */
            /* -ms-overflow-style: none; IE and Edge */

        }

        .space-y-2 {
            padding-right: 8px;
        }
    </style>
</head>

<body class="antialiased">

    <div id="sidebar-overlay" class="sidebar-overlay md:hidden"></div>

    <div class="flex h-screen ">
        <aside
            class="flex flex-col w-64 bg-[#242424] border-r border-gray-700 shadow-xl p-6 overflow-y-auto transform -translate-x-full md:translate-x-0 transition-transform duration-300 ease-in-out z-50"
            id="sidebar">
            <div class="flex items-center space-x-3 mb-8">
                <div
                    class="h-10 w-10 bg-sky-300 rounded-full flex items-center justify-center font-bold text-[#242424] text-xl">
                    R</div>
                <span class="text-xl font-semibold text-white">LEARN WITH RAKIB</span>
            </div>
            <nav class="flex-grow" id="main-nav">
                <ul class="space-y-2">
                    <li>
                        <a href="#" class="nav-link flex items-center space-x-3 p-3 rounded-xl nav-active"
                            data-target="my-courses-section">
                            <i class="fa-solid fa-book-open w-5 h-5"></i>
                            <span>My Courses</span>
                        </a>
                    </li>
                    <li>
                        <a href="#"
                            class="nav-link flex items-center space-x-3 p-3 rounded-xl text-gray-300 hover:bg-gray-700 hover:text-sky-300 transition-colors duration-200"
                            data-target="create-course-section">
                            <i class="fa-solid fa-circle-plus w-5 h-5"></i>
                            <span>Create Course</span>
                        </a>
                    </li>
                    <li>
                        <a href="#"
                            class=" student-list-1 nav-link flex items-center space-x-3 p-3 rounded-xl text-gray-300 hover:bg-gray-700 hover:text-sky-300 transition-colors duration-200"
                            data-target="student-list-section">
                            <i class="fa-solid fa-user-graduate w-5 h-5"></i>
                            <span>Student List</span>
                        </a>
                    </li>
                    <li>
                        <a href="#"
                            class="nav-link flex items-center space-x-3 p-3 rounded-xl text-gray-300 hover:bg-gray-700 hover:text-sky-300 transition-colors duration-200"
                            data-target="transactions-section">
                            <i class="fa-solid fa-arrow-right-arrow-left w-5 h-5"></i>
                            <span>Transactions</span>
                        </a>
                    </li>






                    <li>
                        <a href="#"
                            class="nav-link flex items-center space-x-3 p-3 rounded-xl text-gray-300 hover:bg-gray-700 hover:text-sky-300 transition-colors duration-200"
                            data-target="upload-docs-section">
                            <i class="fa-solid fa-file-arrow-up w-5 h-5"></i>
                            <span>Upload Docs</span>
                        </a>
                    </li>
                    <li>
                        <a href="#"
                            class="nav-link flex items-center justify-between p-3 rounded-xl text-gray-300 hover:bg-gray-700 hover:text-sky-300 transition-colors duration-200"
                            data-target="resources-section">
                            <span class="flex items-center space-x-3">
                                <i class="fa-solid fa-folder-open w-5 h-5"></i>
                                <span>Resources</span>
                            </span>
                            <i class="fas fa-chevron-right text-sm"></i>
                        </a>
                    </li>
                    <li>
                        <a href="#"
                            class="nav-link flex items-center space-x-3 p-3 rounded-xl text-gray-300 hover:bg-gray-700 hover:text-sky-300 transition-colors duration-200"
                            data-target="settings-section">
                            <i class="fa-solid fa-gear w-5 h-5"></i>
                            <span>Settings</span>
                        </a>
                    </li>

                </ul>

            </nav>

        </aside>

        <main id="main-div" class=" flex-1 flex flex-col overflow-x-hidden overflow-y-auto bg-[#242424] relative">
            <header
                class="flex-shrink-0 bg-[#242424] shadow-md shadow-gray-900 p-4 sm:p-6 flex justify-between items-center z-40">
                <div class="flex items-center space-x-4">
                    <button id="sidebar-toggle" class="md:hidden text-gray-300 focus:outline-none">
                        <i class="fas fa-bars text-xl"></i>
                    </button>

                </div>
                <div class="flex items-center gap-6 backdrop-blur-lg bg-white/20 px-5 py-3 rounded-2xl select-none">

                    <!-- Notification Button -->
                    <button id="notifications-toggle"
                        class="relative text-gray-700 w-10 h-10 flex items-center justify-center rounded-full bg-gray-100 hover:bg-gray-200 focus:outline-none focus:ring-2 focus:ring-blue-500 transition"
                        aria-label="Notifications">
                        <span class="material-symbols-rounded text-2xl">notifications</span>
                        <span
                            class="absolute -top-1 -right-1 flex items-center justify-center h-5 w-5 bg-red-500 text-white text-xs font-bold rounded-full border-2 border-white shadow-sm">5</span>
                    </button>

                    <!-- User Profile -->
                    <div class="flex items-center gap-4 rounded-xl cursor-pointer group">

                        <div class="relative">
                            <img src="https://placehold.co/40x40/cbd5e1/475569?text=RM" alt="User Profile"
                                class="w-10 h-10 rounded-full object-cover ring-4 ring-transparent group-hover:ring-gradientGlow transition-all duration-500" />
                            <span
                                class="absolute bottom-0 right-0 h-3 w-3 bg-green-500 border-2 border-white rounded-full shadow-sm"
                                aria-label="Online status"></span>
                        </div>

                        <button class="Btn" aria-label="Logout" id="logout-btn" title="Log out" type="button">
                            <div class="sign">
                                <svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"
                                    focusable="false">
                                    <path
                                        d="M377.9 105.9L500.7 228.7c7.2 7.2 11.3 17.1 11.3 27.3s-4.1 20.1-11.3 27.3L377.9 406.1c-6.4 6.4-15 9.9-24 9.9c-18.7 0-33.9-15.2-33.9-33.9l0-62.1-128 0c-17.7 0-32-14.3-32-32l0-64c0-17.7 14.3-32 32-32l128 0 0-62.1c0-18.7 15.2-33.9 33.9-33.9c9 0 17.6 3.6 24 9.9zM160 96L96 96c-17.7 0-32 14.3-32 32l0 256c0 17.7 14.3 32 32 32l64 0c17.7 0 32 14.3 32 32s-14.3 32-32 32l-64 0c-53 0-96-43-96-96L0 128C0 75 43 32 96 32l64 0c17.7 0 32 14.3 32 32s-14.3 32-32 32z"
                                        fill="white" />
                                </svg>
                            </div>
                            <div class="text" style="display:none;">Logout</div>
                        </button>

                    </div>
                </div>

                <style>
                    @keyframes glow {

                        0%,
                        100% {
                            box-shadow:
                                0 0 5px 2px rgba(59, 130, 246, 0.6),
                                0 0 15px 5px rgba(59, 130, 246, 0.4);
                        }

                        50% {
                            box-shadow:
                                0 0 10px 4px rgba(59, 130, 246, 1),
                                0 0 20px 8px rgba(59, 130, 246, 0.6);
                        }
                    }

                    .ring-gradientGlow {
                        animation: glow 2.5s ease-in-out infinite;
                        border-radius: 9999px;
                        border-color: transparent !important;
                    }

                    .Btn {
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        width: 45px;
                        height: 45px;
                        border: none;
                        border-radius: 50%;
                        cursor: pointer;
                        position: relative;
                        overflow: hidden;
                        background-color: #242424;
                        transition: background-color 0.3s ease, box-shadow 0.3s ease;
                        box-shadow: none;
                    }

                    .Btn:hover {
                        background-color: #3a3a3a;
                    }

                    .Btn:focus {
                        outline: none;
                        box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.7);
                        background-color: #3a3a3a;
                    }

                    .sign {
                        width: 100%;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                    }

                    .sign svg {
                        width: 17px;
                        height: 17px;
                    }

                    .text {
                        display: none !important;
                    }
                </style>


                <!-- Google Material Icons -->
                <link href="https://fonts.googleapis.com/css2?family=Material+Symbols+Rounded" rel="stylesheet" />
            </header>

            <!-- Notifications Panel -->
            <div id="notifications-panel"
                class="absolute top-20 right-10 w-80 max-w-md bg-[#1E1F21] text-white rounded-xl shadow-lg z-50 hidden">
                <div class="p-4 border-b border-gray-700 flex justify-between items-center">
                    <h2 class="text-xl font-bold">Notifications</h2>
                    <i id="close-notification" class="fa-solid fa-circle-xmark"
                        style="font-size: 30px; cursor: pointer;"></i>
                </div>
                <div class="p-4">
                    <div class="flex border-b border-gray-700 mb-4">
                        <button
                            class="notification-tab-btn flex-1 pb-2 border-b-2 border-white text-white font-semibold"
                            data-target="inbox-content-panel">Inbox</button>
                        <button class="notification-tab-btn flex-1 pb-2 border-b-2 border-transparent text-gray-400"
                            data-target="reports-content-panel">Reports</button>
                    </div>

                    <div id="inbox-content-panel" class="notification-content space-y-4">
                        <div class="flex items-start space-x-4 p-2 rounded-lg hover:bg-gray-800/50">
                            <img class="w-10 h-10 rounded-full" src="https://placehold.co/40x40/B794F4/FFFFFF?text=C"
                                alt="Caitlyn">
                            <div class="flex-1">
                                <p class="text-sm"><span class="font-semibold">Caitlyn</span> commented in </p>

                                <p class="text-xs text-gray-500 mt-2">Friday 3:12 PM</p>
                            </div>
                            <span class="w-2 h-2 bg-green-500 rounded-full mt-1"></span>
                        </div>
                        <div class="flex items-start space-x-4 p-2 rounded-lg hover:bg-gray-800/50">
                            <img class="w-10 h-10 rounded-full" src="https://placehold.co/40x40/F6AD55/FFFFFF?text=M"
                                alt="Mathilde">
                            <div class="flex-1">
                                <p class="text-sm"><span class="font-semibold">Mathilde</span> followed you</p>
                                <p class="text-xs text-gray-500 mt-1">Friday 3:04 PM</p>
                            </div>
                            <span class="w-2 h-2 bg-green-500 rounded-full mt-1"></span>
                        </div>
                    </div>
                    <div id="reports-content-panel" class="notification-content hidden">
                        <p class="text-center text-gray-400 py-8">No new reports.</p>
                    </div>
                </div>
            </div>

            <div id="content-container" class="flex-1 p-4 lg:p-10 transition-opacity duration-300 ease-in-out">

                <!-- <div id="create-course-section" class="content-section hidden">
                    <div class="bg-[#333333] p-4 sm:p-6 rounded-xl shadow-lg mb-6">
                        <div class="flex flex-col sm:flex-row justify-around items-center">
                            <div class="flex flex-col items-center">
                                <div
                                    class="progress-step-1 flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-sky-400 text-white font-bold text-lg">
                                    1</div>
                                <span class="mt-2 text-sm text-center text-gray-300 font-medium">Course Details</span>
                            </div>
                            <div class="progress-line-1 flex-1 h-0.5 bg-gray-700 my-4 sm:my-0 sm:mx-4 w-1/2 sm:w-auto">
                            </div>
                            <div class="flex flex-col items-center">
                                <div
                                    class="progress-step-2 flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-gray-700 text-gray-400 font-bold text-lg">
                                    2</div>
                                <span class="mt-2 text-sm text-center text-gray-400">Curriculum</span>
                            </div>
                            <div class="progress-line-2 flex-1 h-0.5 bg-gray-700 my-4 sm:my-0 sm:mx-4 w-1/2 sm:w-auto">
                            </div>
                            <div class="flex flex-col items-center">
                                <div
                                    class="progress-step-3 flex items-center justify-center w-8 h-8 sm:w-10 sm:h-10 rounded-full bg-gray-700 text-gray-400 font-bold text-lg">
                                    3</div>
                                <span class="mt-2 text-sm text-center text-gray-400">Tags</span>
                            </div>
                        </div>
                    </div>

                    <div class="bg-[#333333] p-4 sm:p-6 rounded-xl shadow-lg">
                        <form id="multi-step-form" class="space-y-6">

                            <div id="step-1" class="form-step">
                                <h2 class="text-xl sm:text-2xl font-bold text-white mb-6">Course Details</h2>
                                <div class="space-y-4">
                                    <div>
                                        <label for="course-title"
                                            class="block text-sm font-medium text-gray-300 mb-1">Course Title <span
                                                class="text-red-500">*</span></label>
                                        <input type="text" id="course-title" name="course-title"
                                            class="w-full bg-gray-800 border-gray-600 text-white rounded-md shadow-sm p-2 focus:ring-sky-400 focus:border-sky-400"
                                            placeholder="Enter course title" required maxlength="80">
                                    </div>
                                    <div>
                                        <label for="course-description"
                                            class="block text-sm font-medium text-gray-300 mb-1">Course Description
                                            <span class="text-red-500">*</span></label>
                                        <textarea id="course-description" name="course-description" rows="4"
                                            class="w-full bg-gray-800 border-gray-600 text-white rounded-md shadow-sm p-2 focus:ring-sky-400 focus:border-sky-400"
                                            placeholder="Describe the course content" required
                                            maxlength="500"></textarea>
                                    </div>
                                    <div>
                                        <label for="course-price"
                                            class="block text-sm font-medium text-gray-300 mb-1">Price (in ₹) <span
                                                class="text-red-500">*</span></label>
                                        <input type="number" id="course-price" name="course-price"
                                            class="w-full bg-gray-800 border-gray-600 text-white rounded-md shadow-sm p-2 focus:ring-sky-400 focus:border-sky-400"
                                            placeholder="e.g., 499" required>
                                    </div>
                                    <div>
                                        <label for="course-category"
                                            class="block text-sm font-medium text-gray-300 mb-1">Category <span
                                                class="text-red-500">*</span></label>
                                        <input type="text" id="course-category" name="course-category"
                                            class="w-full bg-gray-800 border-gray-600 text-white rounded-md shadow-sm p-2 focus:ring-sky-400 focus:border-sky-400"
                                            placeholder="e.g., Web Development" required>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-300 mb-2">Introductory Video
                                            <span class="text-red-500">*</span></label>

                                        <div class="flex items-center space-x-6 mb-4">
                                            <label for="video-option-url"
                                                class="flex items-center space-x-2 cursor-pointer">
                                                <input type="radio" id="video-option-url" name="video-option"
                                                    value="url"
                                                    class="bg-gray-700 border-gray-500 text-sky-500 focus:ring-sky-500"
                                                    checked>
                                                <span class="text-gray-300">YouTube URL</span>
                                            </label>
                                            <label for="video-option-file"
                                                class="flex items-center space-x-2 cursor-pointer">
                                                <input type="radio" id="video-option-file" name="video-option"
                                                    value="file"
                                                    class="bg-gray-700 border-gray-500 text-sky-500 focus:ring-sky-500">
                                                <span class="text-gray-300">Upload File</span>
                                            </label>
                                        </div>

<div id="video-url-container">
    <label for="intro-video-url"
        class="block text-xs font-medium text-gray-400 mb-1">Paste YouTube Video URL</label>
    <input type="url" id="intro-video-url" name="intro-video-url"
        class="w-full bg-gray-800 border-gray-600 text-white rounded-md shadow-sm p-2 focus:ring-sky-400 focus:border-sky-400"
        placeholder="e.g., https://www.youtube.com/watch?v=...">
    <p id="intro-video-url-error" class="text-red-400 text-sm mt-1 hidden"></p>
    
    <div id="intro-video-preview-iframe" class="video-container mt-4 hidden">
        <iframe id="video-iframe" src="" frameborder="0"
            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen></iframe>
    </div>
</div>

                                        <div id="video-file-container" class="hidden">
                                            <label for="intro-video-file"
                                                class="block text-xs font-medium text-gray-400 mb-1">Upload Video
                                                File</label>
                                            <input type="file" id="intro-video-file" name="intro-video-file"
                                                accept="video/*"
                                                class="w-full border-gray-600 rounded-md shadow-sm p-2 text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-sky-100 file:text-sky-700 hover:file:bg-sky-200">
                                            <div id="intro-video-preview-upload" class="mt-4 hidden">
                                                <video class="w-full rounded-lg" controls></video>
                                            </div>
                                        </div>
                                    </div>
                                    <div>
                                        <label for="course-image-file"
                                            class="block text-sm font-medium text-gray-300 mb-1">Course Image</label>
                                        <input type="file" id="course-image-file" name="course-image-file"
                                            accept="image/*"
                                            class="w-full border-gray-600 rounded-md shadow-sm p-2 text-gray-300 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-sky-100 file:text-sky-700 hover:file:bg-sky-200">
                                        <img id="course-image-preview" src="#" alt="Course image preview"
                                            class="mt-4 w-full h-auto object-cover rounded-md hidden">
                                    </div>
                                </div>
                            </div>

                            <div id="step-2" class="form-step hidden">
                                <div
                                    class="flex flex-col sm:flex-row justify-between items-center mb-6 space-y-4 sm:space-y-0">
                                    <h2 class="text-xl sm:text-2xl font-bold text-white">Course Curriculum <span
                                            class="text-red-500">*</span></h2>
                                    <button type="button" id="add-module-btn"
                                        class="w-full sm:w-auto bg-sky-400 hover:bg-sky-500 text-white font-semibold py-2 px-4 rounded-full shadow-md transition-all duration-200 flex items-center justify-center space-x-2">
                                        <i class="fas fa-plus text-sm"></i>
                                        <span>Add Module</span>
                                    </button>
                                </div>

                                <div id="modules-container" class="space-y-6">
                                    <div
                                        class="module-item p-4 bg-gray-800 border border-gray-700 rounded-lg shadow-sm">
                                        <div class="flex justify-between items-center mb-4">
                                            <div class="editable-container">
                                                <h3 class="module-title font-bold text-md sm:text-lg text-white">Module
                                                    1 : Introduction</h3>
                                            </div>
                                            <div class="flex items-center space-x-2">
                                                <button type="button"
                                                    class="edit-module-btn text-sky-400 hover:text-sky-300 focus:outline-none"><i
                                                        class="fas fa-edit"></i></button>
                                                <button type="button"
                                                    class="delete-module-btn text-red-500 hover:text-red-400 focus:outline-none"><i
                                                        class="fas fa-trash-alt"></i></button>
                                            </div>
                                        </div>
                                        <div class="space-y-4">
                                            <div class="flex justify-between items-center flex-wrap gap-2">
                                                <span class="text-sm text-gray-400">Lesson Resources</span>
                                                <button type="button"
                                                    class="add-resource-btn bg-sky-200 text-sky-800 font-semibold py-1 px-3 rounded-full hover:bg-sky-300 transition-colors duration-200 text-sm">
                                                    + Add Resource
                                                </button>
                                            </div>
                                            <div class="resources-container space-y-2">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div id="step-3" class="form-step hidden">
                                <div
                                    class="flex flex-col sm:flex-row justify-between items-center mb-6 space-y-4 sm:space-y-0">
                                    <h2 class="text-xl sm:text-2xl font-bold text-white">Tags <span
                                            class="text-red-500">*</span></h2>
                                </div>
                                <div id="tags-container"
                                    class="bg-gray-800 border border-gray-600 text-white rounded-md shadow-sm p-2 flex items-center flex-wrap gap-2 focus-within:ring-2 focus-within:ring-sky-400 focus-within:border-sky-400">
                                    <input type="text" id="tag-input"
                                        class="bg-transparent flex-1 focus:outline-none placeholder-gray-500 min-w-[180px] h-8"
                                        placeholder="Add a tag and press Enter...">
                                </div>

                                <div id="upload-progress-container" class="mt-8 p-4 bg-gray-800 rounded-xl hidden">
                                    <h3 class="text-lg font-bold text-white mb-4">Upload Progress</h3>
                                    <div id="upload-list" class="space-y-4 max-h-60 overflow-y-auto">
                                    </div>
                                    <div id="overall-progress-container"
                                        class="flex items-center justify-between mt-4 border-t pt-4 border-gray-700">
                                        <span class="text-sm font-medium text-gray-400">Overall Progress</span>
                                        <div class="flex items-center space-x-3">
                                            <div class="circular-progress-container">
                                                <svg viewBox="0 0 36 36" class="w-6 h-6">
                                                    <path class="track"
                                                        d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                                                        fill="none" stroke-width="4" />
                                                    <path id="overall-progress-bar" class="progress"
                                                        d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                                                        fill="none" stroke-width="4" />
                                                </svg>
                                            </div>
                                            <span id="overall-progress-text"
                                                class="text-sky-400 font-semibold text-sm">0%</span>
                                        </div>
                                    </div>
                                    <div id="upload-status-message"
                                        class="text-center text-sm font-medium text-gray-400 mt-4 hidden">
                                        Upload complete!
                                    </div>
                                </div>
                            </div>
                        </form>
                    </div>

                    <div class="flex justify-between mt-8">
                        <button type="button" id="prev-btn"
                            class="px-4 py-2 sm:px-6 sm:py-2 border border-gray-600 rounded-md text-white font-medium hover:bg-gray-700 transition-colors duration-200 hidden">
                            <i class="fas fa-chevron-left mr-2"></i> Previous
                        </button>
                        <button type="button" id="next-btn"
                            class="ml-auto px-4 py-2 sm:px-6 sm:py-2 bg-sky-500 text-white rounded-md font-medium shadow-md hover:bg-sky-600 transition-colors duration-200">
                            Next <i class="fas fa-chevron-right ml-2"></i>
                        </button>
                        <button type="button" id="submit-btn"
                            class="px-4 py-2 sm:px-6 sm:py-2 bg-sky-500 text-white rounded-md font-medium shadow-md hover:bg-sky-600 transition-colors duration-200 flex items-center justify-center space-x-2 hidden">
                            <span>Save Course</span>
                        </button>
                    </div>

                </div> -->

                <div id="my-courses-section" class="content-section">
                    <div class="bg-[#333333] p-4 sm:p-6 rounded-xl shadow-lg">
                        <div class="flex justify-between items-center mb-6">
                            <h2 class="text-xl sm:text-2xl font-bold text-white">My Created Courses</h2>
                        </div>
                        <div id="course-list-container" >
                            <%-include("card")%>
                        </div>
                    </div>
                </div>

                <div id="student-list-section" class="content-section hidden">
                </div>
                <div id="transactions-section" class="content-section hidden">
                </div>

                <div id="upload-docs-section"class="content-section hidden px-4 sm:px-6 lg:px-8 w-full max-w-full overflow-x-hidden">
                  <%-include("fileupload")%>
                </div>


                <div id="resources-section" class="content-section hidden">
                    <div class="bg-[#333333] p-4 sm:p-6 rounded-xl shadow-lg">
                        <h2 class="text-xl sm:text-2xl font-bold text-white">Resources</h2>
                        <p class="mt-4 text-gray-300">This is your resource library.</p>
                    </div>
                </div>
                <div id="settings-section" class="content-section hidden">
                    <div class="space-y-8">
                        <div>
                            <h2 class="text-3xl font-bold text-white">Settings</h2>
                            <p class="mt-1 text-gray-400">Manage your account settings and preferences.</p>
                        </div>

                        <div class="border-b border-gray-700">
                            <nav id="settings-tabs" class="-mb-px flex space-x-6 overflow-x-auto">
                                <a href="#" data-target="profile-settings"
                                    class="settings-tab whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">Profile</a>
                                <a href="#" data-target="billings-settings"
                                    class="settings-tab whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm">Billings</a>
                            </nav>
                        </div>

                        <!-- Profile Settings -->
                        <div id="profile-settings" class="settings-content space-y-10">
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-10">

                                <!-- Left Column: Section Title -->
                                <div class="md:col-span-1">
                                    <h3 class="text-2xl font-semibold text-white tracking-wide">Profile</h3>
                                    <p class="mt-2 text-sm text-gray-400 leading-relaxed">
                                        This information will be displayed publicly, so choose carefully what you share.
                                    </p>
                                </div>

                                <!-- Right Column: Form -->
                                <div class="md:col-span-2 bg-[#2a2a2a] p-8 rounded-xl shadow-lg border border-gray-700">
                                    <div class="space-y-8">

                                        <!-- Profile Photo -->
                                        <div>
                                            <label
                                                class="block text-sm font-medium text-gray-300 uppercase tracking-wide">Photo</label>
                                            <div class="mt-3 flex items-center space-x-5">
                                                <div class="relative">
                                                    <img id="profile-image-preview"
                                                        class="h-24 w-24 rounded-full object-cover ring-4 ring-gray-700 shadow-lg"
                                                        src="https://placehold.co/96x96/cbd5e1/475569?text=RM"
                                                        alt="Current profile photo">
                                                    <label for="profile-image-upload"
                                                        class="absolute bottom-1 right-1 bg-sky-500 rounded-full h-7 w-7 flex items-center justify-center cursor-pointer hover:bg-sky-600 shadow-md transition-colors">
                                                        <i class="fa-solid fa-camera text-white text-xs"></i>
                                                        <input id="profile-image-upload" name="profile-image-upload"
                                                            type="file" class="sr-only" accept="image/*">
                                                    </label>
                                                </div>
                                            </div>
                                        </div>

                                        <!-- Profile Details -->
                                        <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6">
                                            <div class="sm:col-span-6">
                                                <label for="profile-name"
                                                    class="block text-sm font-semibold text-gray-200">Full Name</label>
                                                <span id="profile-name-text"
                                                    class="mt-2 block w-full px-4 py-2 rounded-lg bg-gray-800 border border-gray-700 text-white shadow-sm">
                                                    Rasel Mondol
                                                </span>
                                            </div>

                                            <div class="sm:col-span-6">
                                                <label for="profile-email"
                                                    class="block text-sm font-semibold text-gray-200">Email
                                                    Address</label>
                                                <span id="profile-email-text"
                                                    class="mt-2 block w-full px-4 py-2 rounded-lg bg-gray-800 border border-gray-700 text-white shadow-sm">
                                                    mayadahmed@ofspace.co
                                                </span>
                                            </div>

                                            <div class="sm:col-span-6">
                                                <label for="profile-phone"
                                                    class="block text-sm font-semibold text-gray-200">Phone
                                                    Number</label>
                                                <span id="profile-phone-text"
                                                    class="mt-2 block w-full px-4 py-2 rounded-lg bg-gray-800 border border-gray-700 text-white shadow-sm">
                                                    +1 234 567 8900
                                                </span>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Save Button -->
                                    <div class="pt-6 flex justify-end">
                                        <button type="button" id="save-profile-btn"
                                            class="px-6 py-2 text-sm font-semibold rounded-lg text-white bg-sky-600 hover:bg-sky-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-sky-500 shadow-md transition-colors">
                                            Save Changes
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>


                        <!-- Billings Settings -->
                        <div id="billings-settings" class="settings-content hidden space-y-8">
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                                <div class="md:col-span-1">
                                    <h3 class="text-lg font-medium leading-6 text-white">Payment Method</h3>
                                    <p class="mt-1 text-sm text-gray-400">Update your billing details and address.</p>
                                </div>
                                <div class="md:col-span-2 bg-[#333333] p-6 rounded-lg shadow">
                                    <div class="space-y-6">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-300">Card Details</label>
                                            <div class="grid grid-cols-1 gap-y-6 gap-x-4 sm:grid-cols-6 mt-2">
                                                <div class="sm:col-span-3">
                                                    <label for="name-on-card"
                                                        class="block text-sm font-medium text-gray-300">Name on your
                                                        Card</label>
                                                    <input type="text" id="name-on-card" value="Mayad Ahmed"
                                                        class="mt-1 block w-full bg-gray-800 border-gray-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-sky-400 focus:border-sky-400 sm:text-sm">
                                                </div>
                                                <div class="sm:col-span-3">
                                                    <label for="expiry"
                                                        class="block text-sm font-medium text-gray-300">Expiry</label>
                                                    <input type="text" id="expiry" value="02 / 2028"
                                                        class="mt-1 block w-full bg-gray-800 border-gray-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-sky-400 focus:border-sky-400 sm:text-sm">
                                                </div>
                                                <div class="sm:col-span-4">
                                                    <label for="card-number"
                                                        class="block text-sm font-medium text-gray-300">Card
                                                        Number</label>
                                                    <div class="relative mt-1">
                                                        <div
                                                            class="pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3">
                                                            <i class="fab fa-cc-mastercard text-red-500"></i>
                                                        </div>
                                                        <input type="text" id="card-number" value="8269 9620 9292 2538"
                                                            class="block w-full bg-gray-800 border-gray-600 rounded-md shadow-sm py-2 pl-10 pr-3 focus:outline-none focus:ring-sky-400 focus:border-sky-400 sm:text-sm">
                                                    </div>
                                                </div>
                                                <div class="sm:col-span-2">
                                                    <label for="cvv"
                                                        class="block text-sm font-medium text-gray-300">CVV</label>
                                                    <input type="text" id="cvv" value="•••"
                                                        class="mt-1 block w-full bg-gray-800 border-gray-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-sky-400 focus:border-sky-400 sm:text-sm">
                                                </div>
                                            </div>
                                        </div>
                                        <!-- UPI Section -->
                                        <div>
                                            <label class="block text-sm font-medium text-gray-300">UPI</label>
                                            <div class="mt-2 space-y-3">
                                                <input type="text" id="upi-id" placeholder="Enter your UPI ID"
                                                    class="block w-full bg-gray-800 border-gray-600 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-sky-400 focus:border-sky-400 sm:text-sm">
                                                <div class="flex justify-end">
                                                    <button id="save-upi-btn" type="button"
                                                        class="inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-sky-600 hover:bg-sky-700">Save
                                                        UPI</button>
                                                </div>
                                            </div>
                                        </div>
                                        <button id="add-payment-method-btn" type="button"
                                            class="flex items-center space-x-2 text-sky-400 hover:text-sky-300 font-medium text-sm">
                                            <i class="fas fa-plus-circle"></i>
                                            <span>Add another payment method</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                            <div class="pt-8 border-t border-gray-700">
                                <h3 class="text-lg font-medium leading-6 text-white">Billing History</h3>
                                <div class="mt-6 bg-[#333333] rounded-lg shadow overflow-hidden">
                                    <table id="billing-history-table" class="min-w-full divide-y divide-gray-700">
                                        <thead class="bg-gray-800">
                                            <tr>
                                                <th scope="col"
                                                    class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-white sm:pl-6">
                                                    <input type="checkbox"
                                                        class="h-4 w-4 rounded border-gray-600 bg-gray-700 text-sky-500 focus:ring-sky-400">
                                                </th>
                                                <th scope="col"
                                                    class="px-3 py-3.5 text-left text-sm font-semibold text-white">
                                                    Invoice</th>
                                                <th scope="col"
                                                    class="px-3 py-3.5 text-left text-sm font-semibold text-white">Date
                                                </th>
                                                <th scope="col"
                                                    class="px-3 py-3.5 text-left text-sm font-semibold text-white">
                                                    Amount</th>
                                                <th scope="col"
                                                    class="px-3 py-3.5 text-left text-sm font-semibold text-white">
                                                    Status</th>
                                                <th scope="col"
                                                    class="px-3 py-3.5 text-left text-sm font-semibold text-white">
                                                    Tracking & Address</th>
                                                <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6"><span
                                                        class="sr-only">Edit</span></th>
                                            </tr>
                                        </thead>
                                        <tbody class="divide-y divide-gray-700">
                                            <tr>
                                                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm text-white sm:pl-6">
                                                    <input type="checkbox"
                                                        class="h-4 w-4 rounded border-gray-600 bg-gray-700 text-sky-500 focus:ring-sky-400">
                                                </td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm font-medium text-white">
                                                    Account Sale</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-400">Apr 14,
                                                    2024</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-white">$3,050</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm"><span
                                                        class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-900 text-yellow-300">Pending</span>
                                                </td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-sky-400">
                                                    LM5804055575CN</td>
                                                <td
                                                    class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                                    <a href="#" class="text-gray-400 hover:text-white"><i
                                                            class="fas fa-ellipsis-v"></i></a>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm text-white sm:pl-6">
                                                    <input type="checkbox"
                                                        class="h-4 w-4 rounded border-gray-600 bg-gray-700 text-sky-500 focus:ring-sky-400">
                                                </td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm font-medium text-white">
                                                    Account Sale</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-400">Jun 24,
                                                    2024</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-white">$1,050</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm"><span
                                                        class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-900 text-red-300">Cancelled</span>
                                                </td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-sky-400">
                                                    AZ938540353US</td>
                                                <td
                                                    class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                                    <a href="#" class="text-gray-400 hover:text-white"><i
                                                            class="fas fa-ellipsis-v"></i></a>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm text-white sm:pl-6">
                                                    <input type="checkbox"
                                                        class="h-4 w-4 rounded border-gray-600 bg-gray-700 text-sky-500 focus:ring-sky-400">
                                                </td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm font-medium text-white">
                                                    Netflix Subscription</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-gray-400">Feb 28,
                                                    2024</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-white">$800</td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm"><span
                                                        class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-900 text-green-300">Refund</span>
                                                </td>
                                                <td class="whitespace-nowrap px-3 py-4 text-sm text-sky-400">
                                                    3S331605504US</td>
                                                <td
                                                    class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                                    <a href="#" class="text-gray-400 hover:text-white"><i
                                                            class="fas fa-ellipsis-v"></i></a>
                                                </td>
                                            </tr>
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </main>
    </div>

    <div id="modal-backdrop"
        class="fixed flex inset-0 bg-black bg-opacity-70 hidden items-center justify-center z-[100] transition-opacity duration-300">
        <div
            class="bg-[#242424] absolute  border border-gray-700 p-6 sm:p-8 rounded-lg shadow-2xl max-w-sm w-full transform scale-95 opacity-0 transition-all duration-300 ease-in-out ">
            <h3 id="modal-title" class="text-xl font-bold mb-4 text-white"></h3>
            <div id="modal-icon" class="hidden">
                <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                    <circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none" />
                    <path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                </svg>
            </div>
            <p id="modal-body" class="text-gray-300 mb-6"></p>
            <div class="flex justify-end space-x-2">
                <button id="modal-cancel-btn"
                    class="px-4 py-2 border border-gray-600 rounded-md text-gray-300 hover:bg-gray-700">Cancel</button>
                <button id="modal-close-btn"
                    class="px-4 py-2 bg-sky-500 text-white rounded-md hover:bg-sky-600">OK</button>
            </div>
        </div>
    </div>

    <!-- NEW: Withdraw Modal -->
    <div id="withdraw-modal-backdrop"
        class="fixed flex inset-0 bg-black bg-opacity-70 hidden items-center justify-center z-[100] transition-opacity duration-300">
        <div id="withdraw-modal-dialog"
            class="bg-[#242424] border border-gray-700 p-6 rounded-lg shadow-2xl max-w-sm w-full transform scale-95 opacity-0 transition-all duration-300 ease-in-out flex flex-col"
            style="height: 90vh; max-height: 700px;">
            <!-- Step 1: Enter Amount -->
            <div id="withdraw-step-1" class="flex flex-col h-full">
                <div class="flex justify-between items-center mb-6">
                    <button id="withdraw-back-btn" class="text-gray-400 hover:text-white"><i
                            class="fa-solid fa-arrow-left text-xl"></i></button>
                    <h3 class="text-xl font-bold text-white">Withdraw Money</h3>
                    <div class="w-6"></div>
                </div>
                <div class="text-center my-auto">
                    <div id="withdraw-amount-display" class="text-5xl font-bold text-white mb-2">$0.00</div>
                    <p class="text-sm text-gray-400">$1,215 available</p>
                </div>
                <div id="numpad-amount" class="grid grid-cols-3 gap-2 mt-auto">
                    <!-- Numpad buttons will be inserted here by JS -->
                </div>
                <button id="withdraw-continue-btn"
                    class="w-full bg-sky-600 text-white font-bold py-4 rounded-lg mt-4 hover:bg-sky-700 transition-colors duration-200 disabled:bg-gray-600 disabled:cursor-not-allowed"
                    disabled>Continue</button>
            </div>

            <!-- Step 2: OTP Verification -->
            <div id="withdraw-step-2" class="hidden flex-col h-full">
                <div class="flex justify-between items-center mb-6">
                    <button id="otp-back-btn" class="text-gray-400 hover:text-white"><i
                            class="fa-solid fa-arrow-left text-xl"></i></button>
                    <h3 class="text-xl font-bold text-white">Verify Withdrawal</h3>
                    <div class="w-6"></div>
                </div>
                <div class="text-center my-auto">
                    <p class="text-gray-300 mb-2">Verify your <span id="otp-amount" class="font-bold text-white"></span>
                        Withdrawal</p>
                    <p class="text-sm text-gray-400 mb-6">Please verify the passcode that we sent to your primary phone
                        number.</p>
                    <div id="otp-inputs" class="flex justify-center space-x-3">
                        <input type="text" class="otp-input" maxlength="1">
                        <input type="text" class="otp-input" maxlength="1">
                        <input type="text" class="otp-input" maxlength="1">
                        <input type="text" class="otp-input" maxlength="1">
                    </div>
                </div>
                <div id="numpad-otp" class="grid grid-cols-3 gap-2 mt-auto">
                    <!-- Numpad buttons will be inserted here by JS -->
                </div>
                <button id="withdraw-verify-btn"
                    class="w-full bg-sky-600 text-white font-bold py-4 rounded-lg mt-4 hover:bg-sky-700 transition-colors duration-200 disabled:bg-gray-600 disabled:cursor-not-allowed"
                    disabled>Verify</button>
            </div>

            <!-- Step 3: Success -->
            <div id="withdraw-step-3" class="hidden flex-col h-full text-center">
                <div class="my-auto">
                    <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                        <circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none" />
                        <path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                    </svg>
                    <h3 class="text-2xl font-bold text-white mt-4">Withdrawal in Process</h3>
                    <p class="text-gray-300 mt-2">Your withdrawal will be reflected in your bank account within 24
                        hours.</p>
                </div>
                <button id="withdraw-done-btn"
                    class="w-full bg-sky-600 text-white font-bold py-4 rounded-lg mt-auto hover:bg-sky-700 transition-colors duration-200">Done</button>
            </div>
        </div>
    </div>

    <!-- NEW: Payment Method Modal -->
    <div id="payment-method-modal-backdrop"
        class="fixed flex inset-0 bg-black bg-opacity-70 hidden items-center justify-center z-[100] transition-opacity duration-300">
        <div id="payment-method-modal-dialog"
            class="bg-[#242424] border border-gray-700 p-6 rounded-lg shadow-2xl max-w-md w-full transform scale-95 opacity-0 transition-all duration-300 ease-in-out flex flex-col">
            <!-- Step 1: Select Method -->
            <div id="payment-step-1">
                <div class="flex justify-between items-center mb-6">
                    <button id="payment-back-btn-1" class="text-gray-400 hover:text-white"><i
                            class="fa-solid fa-arrow-left text-xl"></i></button>
                    <h3 class="text-xl font-bold text-white">Payment Method</h3>
                    <div class="w-6"></div>
                </div>
                <div class="space-y-4">
                    <label class="payment-option flex items-center p-4 rounded-lg cursor-pointer selected">
                        <i class="fa-brands fa-cc-mastercard text-2xl text-red-500 mr-4"></i>
                        <div class="flex-grow">
                            <p class="font-semibold text-white">Master Card</p>
                            <p class="text-sm text-gray-400">**** **** **** 4325</p>
                        </div>
                        <input type="radio" name="payment-method" class="payment-radio" checked>
                    </label>
                    <label class="payment-option flex items-center p-4 rounded-lg cursor-pointer">
                        <i class="fa-brands fa-cc-visa text-2xl text-blue-500 mr-4"></i>
                        <div class="flex-grow">
                            <p class="font-semibold text-white">Visa</p>
                            <p class="text-sm text-gray-400">Not Registered</p>
                        </div>
                        <input type="radio" name="payment-method" class="payment-radio">
                    </label>
                    <label class="payment-option flex items-center p-4 rounded-lg cursor-pointer">
                        <i class="fa-brands fa-paypal text-2xl text-sky-400 mr-4"></i>
                        <div class="flex-grow">
                            <p class="font-semibold text-white">Paypal</p>
                            <p class="text-sm text-gray-400">mayadahmed@ofspace.co</p>
                        </div>
                        <input type="radio" name="payment-method" class="payment-radio">
                    </label>
                    <label class="payment-option flex items-center p-4 rounded-lg cursor-pointer">
                        <i class="fa-solid fa-building-columns text-2xl text-gray-400 mr-4"></i>
                        <div class="flex-grow">
                            <p class="font-semibold text-white">Add Local Bank</p>
                            <p class="text-sm text-gray-400">Different bank in every country</p>
                        </div>
                        <input type="radio" name="payment-method" class="payment-radio">
                    </label>
                </div>
                <div class="flex space-x-4 mt-6">
                    <button id="set-default-payment-btn"
                        class="w-full bg-gray-700 text-white font-bold py-3 rounded-lg hover:bg-gray-600 transition-colors">Set
                        As Default</button>
                    <button id="add-new-payment-btn"
                        class="w-full bg-sky-600 text-white font-bold py-3 rounded-lg hover:bg-sky-700 transition-colors">Add
                        New</button>
                </div>
            </div>
            <!-- Step 2: Add Bank Details -->
            <div id="payment-step-2" class="hidden">
                <div class="flex justify-between items-center mb-6">
                    <button id="payment-back-btn-2" class="text-gray-400 hover:text-white"><i
                            class="fa-solid fa-arrow-left text-xl"></i></button>
                    <h3 class="text-xl font-bold text-white">Add Bank Account</h3>
                    <div class="w-6"></div>
                </div>
                <div class="space-y-4">
                    <div>
                        <label for="account-holder-name" class="block text-sm font-medium text-gray-300 mb-1">Account
                            Holder Name</label>
                        <input type="text" id="account-holder-name"
                            class="w-full bg-gray-800 border-gray-600 text-white rounded-md shadow-sm p-2 focus:ring-sky-400 focus:border-sky-400"
                            placeholder="e.g., Rasel Mondol">
                    </div>
                    <div>
                        <label for="account-number" class="block text-sm font-medium text-gray-300 mb-1">Account
                            Number</label>
                        <input type="text" id="account-number"
                            class="w-full bg-gray-800 border-gray-600 text-white rounded-md shadow-sm p-2 focus:ring-sky-400 focus:border-sky-400"
                            placeholder="Enter account number">
                    </div>
                    <div>
                        <label for="ifsc-code" class="block text-sm font-medium text-gray-300 mb-1">IFSC Code / SWIFT
                            Code</label>
                        <input type="text" id="ifsc-code"
                            class="w-full bg-gray-800 border-gray-600 text-white rounded-md shadow-sm p-2 focus:ring-sky-400 focus:border-sky-400"
                            placeholder="Enter bank code">
                    </div>
                </div>
                <button id="save-payment-method-btn"
                    class="w-full bg-sky-600 text-white font-bold py-3 rounded-lg mt-6 hover:bg-sky-700 transition-colors">Save</button>
            </div>
            <!-- Step 3: Success -->
            <div id="payment-step-3" class="hidden text-center">
                <svg class="checkmark" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 52 52">
                    <circle class="checkmark-circle" cx="26" cy="26" r="25" fill="none" />
                    <path class="checkmark-check" fill="none" d="M14.1 27.2l7.1 7.2 16.7-16.8" />
                </svg>
                <h3 class="text-2xl font-bold text-white mt-4">Payment Method Added</h3>
                <p class="text-gray-300 mt-2">Your new payment method has been successfully added.</p>
                <button id="payment-done-btn"
                    class="w-full bg-sky-600 text-white font-bold py-3 rounded-lg mt-6 hover:bg-sky-700 transition-colors">Done</button>
            </div>
        </div>
    </div>

    <!-- Loader Backdrop -->
    <div id="dynamic-content-loader"
        class="fixed inset-0 bg-gray-900 bg-opacity-75 hidden flex items-center justify-center z-[99]">
        <div class="flex flex-col items-center space-y-6">

            <!-- SVG Loader -->
            <svg class="w-16" viewBox="25 25 50 50"
                style="transform-origin: center; animation: rotate4 2s linear infinite;">
                <circle r="20" cy="50" cx="50"
                    style="fill: none; stroke: hsl(214, 97%, 59%); stroke-width: 2; stroke-dasharray: 1, 200; stroke-dashoffset: 0; stroke-linecap: round; animation: dash4 1.5s ease-in-out infinite;">
                </circle>
            </svg>

            <!-- Loading Text -->
            <p class="text-white text-lg font-semibold tracking-wide opacity-90 animate-pulse">
                Loading content...
            </p>
        </div>
    </div>

    <style>
        @keyframes rotate4 {
            100% {
                transform: rotate(360deg);
            }
        }

        @keyframes dash4 {
            0% {
                stroke-dasharray: 1, 200;
                stroke-dashoffset: 0;
            }

            50% {
                stroke-dasharray: 90, 200;
                stroke-dashoffset: -35px;
            }

            100% {
                stroke-dashoffset: -125px;
            }
        }
    </style>


    <script>
        document.addEventListener('DOMContentLoaded', () => {
    //      document.getElementById('course-title').addEventListener('input', validateTitle);
    // document.getElementById('course-description').addEventListener('input', validateDescription);
    // document.getElementById('course-price').addEventListener('input', validatePrice);
    // document.getElementById('course-category').addEventListener('input', validateCategory);
    
    // // Video and Image Listeners
    // document.getElementById('course-image-file').addEventListener('change', validateImageFile);
    // document.getElementById('intro-video-url').addEventListener('input', validateIntroVideo);
    // document.getElementById('intro-video-file').addEventListener('change', validateIntroVideo);
    // document.getElementById('video-option-url').addEventListener('change', validateIntroVideo);
    // document.getElementById('video-option-file').addEventListener('change', validateIntroVideo);
            const tagsContainer = document.getElementById('tags-container');
            const tagInput = document.getElementById('tag-input');

            if (tagsContainer && tagInput) {
                // Add a tag when Enter or Comma is pressed
                tagInput.addEventListener('keydown', function (e) {
                    if (e.key === 'Enter' || e.key === ',') {
                        e.preventDefault(); // Prevent default behavior

                        // --- START: LIMITS DEFINED HERE ---
                        const MAX_TAG_COUNT = 200; // Set the maximum number of tags allowed
                        const MAX_TAG_LENGTH = 25; // Set the maximum character length for a single tag
                        // --- END: LIMITS DEFINED HERE ---

                        const currentTags = tagsContainer.querySelectorAll('.tag');
                        if (currentTags.length >= MAX_TAG_COUNT) {
                            alert(`You can add a maximum of ${MAX_TAG_COUNT} tags.`);
                            return; // Stop if the max number of tags is reached
                        }

                        const tagText = tagInput.value.trim();

                        if (tagText.length > 0) {
                            if (tagText.length > MAX_TAG_LENGTH) {
                                alert(`A single tag cannot be longer than ${MAX_TAG_LENGTH} characters.`);
                                return; // Stop if the tag is too long
                            }

                            const tag = document.createElement('div');
                            tag.className = 'tag';

                            const tagTextSpan = document.createElement('span');
                            tagTextSpan.textContent = tagText;

                            const removeBtn = document.createElement('span');
                            removeBtn.className = 'remove-tag';
                            removeBtn.innerHTML = '&times;';

                            tag.appendChild(tagTextSpan);
                            tag.appendChild(removeBtn);

                            tagsContainer.insertBefore(tag, tagInput);

                            tagInput.value = '';
                        }
                    }
                });

                // Use event delegation to handle removing tags (this part remains the same)
                tagsContainer.addEventListener('click', function (e) {
                    if (e.target.classList.contains('remove-tag')) {
                        e.target.parentElement.remove();
                    } else if (e.target === tagsContainer) {
                        tagInput.focus();
                    }
                });
            }
            // Cache for dynamically loaded content
            let studentListCache = null;
            let transactionsCache = null; // NEW: Cache for transactions

            // -- Sidebar Toggle for Mobile --
            const sidebar = document.getElementById('sidebar');
            const sidebarToggle = document.getElementById('sidebar-toggle');
            const sidebarOverlay = document.getElementById('sidebar-overlay');
            const toggleIcon = sidebarToggle.querySelector('i');

            const toggleSidebar = () => {
                sidebar.classList.toggle('-translate-x-full');
                sidebarOverlay.classList.toggle('active');
                document.body.classList.toggle('overflow-hidden');
                if (sidebar.classList.contains('-translate-x-full')) {
                    toggleIcon.classList.remove('fa-xmark');
                    toggleIcon.classList.add('fa-bars');
                } else {
                    toggleIcon.classList.remove('fa-bars');
                    toggleIcon.classList.add('fa-xmark');
                }
            };

            sidebarToggle.addEventListener('click', toggleSidebar);
            sidebarOverlay.addEventListener('click', toggleSidebar);


            // -- Modal Logic with Animations (Reusable modal for success/error) --
            const modalBackdrop = document.getElementById('modal-backdrop');
            const modalDialog = modalBackdrop.querySelector('div');
            const modalTitle = document.getElementById('modal-title');
            const modalBody = document.getElementById('modal-body');
            const modalCloseBtn = document.getElementById('modal-close-btn');
            const modalCancelBtn = document.getElementById('modal-cancel-btn');
            const modalIcon = document.getElementById('modal-icon');
            let confirmCallback = null; // To store the callback for confirmation

            const showModal = (title, message, isConfirmation = false, isSuccess = false, onConfirm = () => { }) => {
                modalTitle.textContent = title;
                modalBody.textContent = message;
                modalBody.classList.remove('hidden');

                if (isSuccess) {
                    modalDialog.classList.remove('bg-[#242424]');
                    modalDialog.classList.add('bg-green-900');
                    modalIcon.classList.remove('hidden');
                    modalCloseBtn.classList.remove('bg-sky-500', 'hover:bg-sky-600');
                    modalCloseBtn.classList.add('bg-green-600', 'hover:bg-green-700');
                } else {
                    modalDialog.classList.remove('bg-green-900');
                    modalDialog.classList.add('bg-[#242424]');
                    modalIcon.classList.add('hidden');
                    modalCloseBtn.classList.remove('bg-green-600', 'hover:bg-green-700');
                    modalCloseBtn.classList.add('bg-sky-500', 'hover:bg-sky-600');
                }

                if (isConfirmation) {
                    confirmCallback = onConfirm;
                    modalCancelBtn.classList.remove('hidden');
                    modalCloseBtn.textContent = "Confirm";
                } else {
                    confirmCallback = null;
                    modalCancelBtn.classList.add('hidden');
                    modalCloseBtn.textContent = "OK";
                }

                modalBackdrop.classList.remove('hidden');
                setTimeout(() => {
                    modalBackdrop.classList.add('opacity-100');
                    modalDialog.classList.remove('scale-95', 'opacity-0');
                    modalDialog.classList.add('scale-100', 'opacity-100');
                }, 10);
            };

            const hideModal = () => {
                modalBackdrop.classList.remove('opacity-100');
                modalDialog.classList.remove('scale-100', 'opacity-100');
                modalDialog.classList.add('scale-95', 'opacity-0');
                setTimeout(() => {
                    modalBackdrop.classList.add('hidden');
                    confirmCallback = null;
                }, 300);
            };

            modalCloseBtn.addEventListener('click', () => {
                if (confirmCallback) {
                    confirmCallback();
                    hideModal();
                } else {
                    hideModal();
                }
            });

            modalCancelBtn.addEventListener('click', hideModal);

            // -- Loading Spinner for Dynamic Content --
            const dynamicContentLoader = document.getElementById('dynamic-content-loader');

            const showDynamicLoader = () => {
                dynamicContentLoader.classList.add('flex');
                dynamicContentLoader.classList.remove('hidden');

            };

            const hideDynamicLoader = () => {
                dynamicContentLoader.classList.add('hidden');
                dynamicContentLoader.classList.remove('flex');
            };


            // -- Navigation Logic --
            const navLinks = document.querySelectorAll('.nav-link');
            const contentSections = document.querySelectorAll('.content-section');
            const mainNav = document.getElementById('main-nav');
            const logoutBtn = document.getElementById('logout-btn');
            const studentListSection = document.getElementById('student-list-section');
            const transactionsSection = document.getElementById('transactions-section'); // NEW

            mainNav.addEventListener('click', async (e) => {
                const link = e.target.closest('.nav-link');
                if (!link) return;

                e.preventDefault();

                // Remove active state from all links and hide all sections
                navLinks.forEach(item => {
                    item.classList.remove('nav-active');
                    item.classList.add('text-gray-300', 'hover:bg-gray-700', 'hover:text-sky-300');
                });
                contentSections.forEach(section => section.classList.add('hidden'));

                // Add active state to the clicked link
                link.classList.add('nav-active');
                link.classList.remove('text-gray-300', 'hover:bg-gray-700', 'hover:text-sky-300');

                const targetId = link.dataset.target;
                const targetSection = document.getElementById(targetId);

                // --- DYNAMIC CONTENT LOADING LOGIC ---
                if (targetId === 'student-list-section') {
                    if (studentListCache) {
                        studentListSection.innerHTML = studentListCache;
                        // Re-run scripts if any
                    } else {
                        showDynamicLoader();
                        try {
                            // MOCK: Replace with actual fetch('/student-list')
                            await new Promise(res => setTimeout(res, 1500));
                            const mockResponse = `<div class="bg-[#333333] p-6 rounded-lg"><h2 class="text-2xl font-bold text-white">Student List</h2><p class="text-gray-400 mt-2">Student data would be loaded here from the backend.</p></div>`;
                            studentListCache = mockResponse;
                            studentListSection.innerHTML = mockResponse;
                        } catch (error) {
                            studentListSection.innerHTML = `<p class="text-center text-red-500">Could not load student list.</p>`;
                        } finally {
                            hideDynamicLoader();
                        }
                    }
                    targetSection.classList.remove('hidden');
                } else if (targetId === 'transactions-section') { // NEW LOGIC FOR TRANSACTIONS
                    if (transactionsCache) {
                        transactionsSection.innerHTML = transactionsCache;
                    } else {
                        showDynamicLoader();
                        try {
                            // MOCK: Replace with actual fetch('/transactions')
                            await new Promise(res => setTimeout(res, 1500));
                            const transactionsHTML = `
                        <div class="space-y-8">
                            <div class="flex flex-wrap items-center justify-between gap-4">
                                <h2 class="text-3xl font-bold text-white">Transactions</h2>
                                <div class="flex items-center gap-2">
                                    <button id="withdraw-btn" class="bg-indigo-500 text-white px-4 py-2 rounded-lg font-semibold text-sm hover:bg-indigo-600 transition flex items-center gap-2">
                                        <i class="fa-solid fa-money-bill-transfer"></i> Withdraw
                                    </button>
                                    <button id="export-report-btn" class="bg-[#333333] border border-gray-600 text-white px-4 py-2 rounded-lg font-semibold text-sm hover:bg-gray-700 transition flex items-center gap-2">
                                        <span class="btn-text">Export Report</span>
                                        <i class="fa-solid fa-file-export ml-2"></i>
                                        <div class="spinner hidden"></div>
                                    </button>
                                </div>
                            </div>

                            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                                <div class="lg:col-span-2 space-y-6">
                                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                                        <div class="bg-[#333333] p-4 rounded-lg">
                                            <p class="text-sm text-gray-400">Total Transactions This Month</p>
                                            <p class="text-3xl font-bold text-white mt-2">$125,430</p>
                                            <p class="text-sm text-green-400 mt-1">+12.5% compared to last month</p>
                                        </div>
                                        <div class="bg-[#333333] p-4 rounded-lg">
                                            <p class="text-sm text-gray-400">Total Income</p>
                                            <p class="text-3xl font-bold text-white mt-2">$92,000</p>
                                            <p class="text-sm text-green-400 mt-1">+15.5% compared to last month</p>
                                        </div>
                                        <div class="bg-[#333333] p-4 rounded-lg">
                                            <p class="text-sm text-gray-400">Total Expenses</p>
                                            <p class="text-3xl font-bold text-white mt-2">$58,500</p>
                                            <p class="text-sm text-red-400 mt-1">+8.5% compared to last month</p>
                                        </div>
                                    </div>

                                    <div class="bg-[#333333] p-6 rounded-lg">
                                        <div class="flex flex-wrap justify-between items-center gap-4 mb-4">
                                            <h3 class="text-xl font-bold text-white">Transactions</h3>
                                            <div class="flex items-center gap-2">
                                                <input type="text" placeholder="Search..." class="bg-gray-800 border-gray-600 rounded-lg px-3 py-1.5 text-sm w-40">
                                                <select class="bg-gray-800 border-gray-600 rounded-lg px-3 py-1.5 text-sm"><option>All Status</option></select>
                                            </div>
                                        </div>
                                        <div class="space-y-3">
                                            <div class="grid grid-cols-5 items-center gap-4 p-2 rounded-lg hover:bg-gray-700/50">
                                                <div class="flex items-center gap-3 col-span-2">
                                                    <div class="w-8 h-8 rounded-full bg-blue-500 flex items-center justify-center"><i class="fas fa-university text-white"></i></div>
                                                    <div>
                                                        <p class="font-semibold text-white">Transfer from Bank</p>
                                                        <p class="text-xs text-gray-400">TXN-24020110</p>
                                                    </div>
                                                </div>
                                                <p class="text-green-400 font-semibold text-sm">+$980</p>
                                                <p class="text-gray-400 text-sm">Feb 29, 2025</p>
                                                <p class="text-green-400 font-semibold text-sm">Completed</p>
                                            </div>
                                             <div class="grid grid-cols-5 items-center gap-4 p-2 rounded-lg hover:bg-gray-700/50">
                                                <div class="flex items-center gap-3 col-span-2">
                                                    <div class="w-8 h-8 rounded-full bg-red-600 flex items-center justify-center"><i class="fab fa-youtube text-white"></i></div>
                                                    <div>
                                                        <p class="font-semibold text-white">Youtube Premium</p>
                                                        <p class="text-xs text-gray-400">TXN-24020109</p>
                                                    </div>
                                                </div>
                                                <p class="text-red-400 font-semibold text-sm">-$20</p>
                                                <p class="text-gray-400 text-sm">Feb 29, 2025</p>
                                                <p class="text-green-400 font-semibold text-sm">Completed</p>
                                            </div>
                                            <div class="grid grid-cols-5 items-center gap-4 p-2 rounded-lg hover:bg-gray-700/50">
                                                <div class="flex items-center gap-3 col-span-2">
                                                    <div class="w-8 h-8 rounded-full bg-red-600 flex items-center justify-center"><i class="fab fa-youtube text-white"></i></div>
                                                    <div>
                                                        <p class="font-semibold text-white">Youtube Premium</p>
                                                        <p class="text-xs text-gray-400">TXN-24020109</p>
                                                    </div>
                                                </div>
                                                <p class="text-red-400 font-semibold text-sm">-$20</p>
                                                <p class="text-gray-400 text-sm">Feb 29, 2025</p>
                                                <p class="text-green-400 font-semibold text-sm">Completed</p>
                                            </div>
                                            <div class="grid grid-cols-5 items-center gap-4 p-2 rounded-lg hover:bg-gray-700/50">
                                                <div class="flex items-center gap-3 col-span-2">
                                                    <div class="w-8 h-8 rounded-full bg-red-600 flex items-center justify-center"><i class="fab fa-youtube text-white"></i></div>
                                                    <div>
                                                        <p class="font-semibold text-white">Youtube Premium</p>
                                                        <p class="text-xs text-gray-400">TXN-24020109</p>
                                                    </div>
                                                </div>
                                                <p class="text-red-400 font-semibold text-sm">-$20</p>
                                                <p class="text-gray-400 text-sm">Feb 29, 2025</p>
                                                <p class="text-green-400 font-semibold text-sm">Completed</p>
                                            </div><div class="grid grid-cols-5 items-center gap-4 p-2 rounded-lg hover:bg-gray-700/50">
                                                <div class="flex items-center gap-3 col-span-2">
                                                    <div class="w-8 h-8 rounded-full bg-red-600 flex items-center justify-center"><i class="fab fa-youtube text-white"></i></div>
                                                    <div>
                                                        <p class="font-semibold text-white">Youtube Premium</p>
                                                        <p class="text-xs text-gray-400">TXN-24020109</p>
                                                    </div>
                                                </div>
                                                <p class="text-red-400 font-semibold text-sm">-$20</p>
                                                <p class="text-gray-400 text-sm">Feb 29, 2025</p>
                                                <p class="text-green-400 font-semibold text-sm">Completed</p>
                                            </div>
                                            <div class="grid grid-cols-5 items-center gap-4 p-2 rounded-lg hover:bg-gray-700/50">
                                                <div class="flex items-center gap-3 col-span-2">
                                                    <div class="w-8 h-8 rounded-full bg-red-600 flex items-center justify-center"><i class="fab fa-youtube text-white"></i></div>
                                                    <div>
                                                        <p class="font-semibold text-white">Youtube Premium</p>
                                                        <p class="text-xs text-gray-400">TXN-24020109</p>
                                                    </div>
                                                </div>
                                                <p class="text-red-400 font-semibold text-sm">-$20</p>
                                                <p class="text-gray-400 text-sm">Feb 29, 2025</p>
                                                <p class="text-green-400 font-semibold text-sm">Completed</p>
                                            </div>
                                            <div class="grid grid-cols-5 items-center gap-4 p-2 rounded-lg hover:bg-gray-700/50">
                                                <div class="flex items-center gap-3 col-span-2">
                                                    <div class="w-8 h-8 rounded-full bg-yellow-500 flex items-center justify-center"><i class="fas fa-wifi text-white"></i></div>
                                                    <div>
                                                        <p class="font-semibold text-white">Internet</p>
                                                        <p class="text-xs text-gray-400">TXN-24020108</p>
                                                    </div>
                                                </div>
                                                <p class="text-red-400 font-semibold text-sm">-$120</p>
                                                <p class="text-gray-400 text-sm">Feb 29, 2025</p>
                                                <p class="text-green-400 font-semibold text-sm">Completed</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                
                                
                            </div>
                        </div>
                        `;
                            transactionsCache = transactionsHTML;
                            transactionsSection.innerHTML = transactionsHTML;
                        } catch (error) {
                            transactionsSection.innerHTML = `<p class="text-center text-red-500">Could not load transactions.</p>`;
                        } finally {
                            hideDynamicLoader();
                        }
                    }
                    targetSection.classList.remove('hidden');
                } else {
                    // For other static sections, just show them
                    if (targetSection) {
                        targetSection.classList.remove('hidden');
                    }
                }

                if (window.innerWidth < 768) {
                    toggleSidebar();
                }
            });

            logoutBtn.addEventListener('click', (e) => {
                e.preventDefault();
                showModal("Log Out", "Are you sure you want to log out?", true, false, () => {
                    console.log("User logged out");
                    showModal("Logged Out", "You have been successfully logged out.");
                });
            });

            // -- Multi-step Form Logic (for Create Course section) --
            let currentStep = 1;
            const formSteps = document.querySelectorAll('.form-step');
            const nextBtn = document.getElementById('next-btn');
            const prevBtn = document.getElementById('prev-btn');
            const submitBtn = document.getElementById('submit-btn');

            const updateStep = (step) => {
                formSteps.forEach(s => s.classList.add('hidden'));
                const stepElement = document.getElementById(`step-${step}`);
                if (stepElement) {
                    stepElement.classList.remove('hidden');
                }
                updateProgress(step);

                prevBtn.classList.toggle('hidden', step === 1);
                nextBtn.classList.toggle('hidden', step === formSteps.length);
                submitBtn.classList.toggle('hidden', step !== formSteps.length);
            };

            const updateProgress = (step) => {
                const steps = document.querySelectorAll('[class*="progress-step-"]');
                const lines = document.querySelectorAll('[class*="progress-line-"]');

                steps.forEach((s, index) => {
                    s.classList.remove('progress-step-active', 'progress-step-complete', 'bg-sky-400', 'text-white', 'bg-green-500');
                    s.classList.add('bg-gray-700', 'text-gray-400');

                    if (index + 1 < step) {
                        s.classList.remove('bg-gray-700', 'text-gray-400');
                        s.classList.add('bg-green-500', 'text-white', 'progress-step-complete');
                    } else if (index + 1 === step) {
                        s.classList.remove('bg-gray-700', 'text-gray-400');
                        s.classList.add('bg-sky-400', 'text-white', 'progress-step-active');
                    }
                });

                lines.forEach((l, index) => {
                    l.classList.remove('progress-line-active', 'bg-sky-400');
                    l.classList.add('bg-gray-700');
                    if (index + 1 < step) {
                        l.classList.add('progress-line-active', 'bg-sky-400');
                    }
                });
            };

            nextBtn.addEventListener('click', () => {
                if (currentStep < formSteps.length) {
                    currentStep++;
                    updateStep(currentStep);
                }
            });

            prevBtn.addEventListener('click', () => {
                if (currentStep > 1) {
                    currentStep--;
                    updateStep(currentStep);
                }
            });

            const resetForm = () => {
                document.getElementById('multi-step-form').reset();

                const modulesContainer = document.getElementById('modules-container');
                if (modulesContainer) {
                    modulesContainer.innerHTML = `
                    <div class="module-item p-4 bg-gray-800 border border-gray-700 rounded-lg shadow-sm">
                        <div class="flex justify-between items-center mb-4">
                            <div class="editable-container">
                                <h3 class="module-title font-bold text-md sm:text-lg text-white">Module 1 : Introduction</h3>
                            </div>
                            <div class="flex items-center space-x-2">
                                <button type="button" class="edit-module-btn text-sky-400 hover:text-sky-300 focus:outline-none"><i class="fas fa-edit"></i></button>
                                <button type="button" class="delete-module-btn text-red-500 hover:text-red-400 focus:outline-none"><i class="fas fa-trash-alt"></i></button>
                            </div>
                        </div>
                        <div class="space-y-4">
                            <div class="flex justify-between items-center flex-wrap gap-2">
                                <span class="text-sm text-gray-400">Lesson Resources</span>
                                <button type="button" class="add-resource-btn bg-sky-200 text-sky-800 font-semibold py-1 px-3 rounded-full hover:bg-sky-300 transition-colors duration-200 text-sm">
                                    + Add Resource
                                </button>
                            </div>
                            <div class="resources-container space-y-2"></div>
                        </div>
                    </div>`;
                }
                // --- REPLACE THIS BLOCK in resetForm() ---
                const tagsContainer = document.getElementById('tags-container');
                if (tagsContainer) {
                    // Remove all child elements that are tags
                    tagsContainer.querySelectorAll('.tag').forEach(tagEl => tagEl.remove());
                    // Clear the value of the input if it exists
                    const input = tagsContainer.querySelector('#tag-input');
                    if (input) {
                        input.value = '';
                    }
                }

                const introVideoPreviewContainer = document.getElementById('intro-video-preview');
                const courseImagePreview = document.getElementById('course-image-preview');
                const courseImageFileInput = document.getElementById('course-image-file');

                if (introVideoPreviewContainer) introVideoPreviewContainer.classList.add('hidden');
                if (courseImagePreview) {
                    courseImagePreview.src = '#';
                    courseImagePreview.classList.add('hidden');
                }
                if (courseImageFileInput) {
                    courseImageFileInput.value = '';
                }

                moduleCount = 1;
                resourceCount = 0;
                tagCount = 0;

                const uploadProgressContainer = document.getElementById('upload-progress-container');
                const uploadList = document.getElementById('upload-list');
                const uploadStatusMessage = document.getElementById('upload-status-message');
                const overallProgressBar = document.getElementById('overall-progress-bar');
                const overallProgressText = document.getElementById('overall-progress-text');

                if (uploadProgressContainer) uploadProgressContainer.classList.add('hidden');
                if (uploadList) uploadList.innerHTML = '';
                if (uploadStatusMessage) uploadStatusMessage.classList.add('hidden');
                if (overallProgressBar && overallProgressText) updateOverallProgress(0);

                currentStep = 1;
                updateStep(currentStep);
            };

            updateStep(currentStep);


            // -- Accordion for Resources using event delegation --
            document.addEventListener('click', (e) => {
                const toggle = e.target.closest('[data-accordion-toggle]');
                if (!toggle) return;

                const parent = toggle.closest('.resource-item');
                const details = parent.querySelector('.resource-details');
                const chevron = toggle.querySelector('.fa-chevron-down');

                details.classList.toggle('hidden');
                chevron.classList.toggle('rotate-180');
            });


            // -- Dynamic Form Logic (for 'Curriculum' and 'Tags' sections) --
            const modulesContainer = document.getElementById('modules-container');
            const addModuleBtn = document.getElementById('add-module-btn');
            // const tagsContainer = document.getElementById('tags-container');
            // const addTagBtn = document.getElementById('add-tag-btn');

            let moduleCount = 1;
            let resourceCount = 0;
            // let tagCount = 0;

            const createModuleElement = (count) => {
                return `
            <div class="module-item p-4 bg-gray-800 border border-gray-700 rounded-lg shadow-sm">
                <div class="flex justify-between items-center mb-4">
                    <div class="editable-container">
                        <h3 class="module-title font-bold text-md sm:text-lg text-white">Module ${count}</h3>
                    </div>
                    <div class="flex items-center space-x-2">
                        <button type="button" class="edit-module-btn text-sky-400 hover:text-sky-300 focus:outline-none"><i class="fas fa-edit"></i></button>
                        <button type="button" class="delete-module-btn text-red-500 hover:text-red-400 focus:outline-none"><i class="fas fa-trash-alt"></i></button>
                    </div>
                </div>
                <div class="space-y-4">
                    <div class="flex justify-between items-center flex-wrap gap-2">
                        <span class="text-sm text-gray-400">Lesson Resources</span>
                        <button type="button" class="add-resource-btn bg-sky-200 text-sky-800 font-semibold py-1 px-3 rounded-full hover:bg-sky-300 transition-colors duration-200 text-sm">
                            + Add Resource
                        </button>
                    </div>
                    <div class="resources-container space-y-2"></div>
                </div>
            </div>`;
            };

            const createResourceElement = (id) => {
                return `
            <div class="resource-item bg-gray-900 border border-gray-700 rounded-lg overflow-hidden" data-resource-id="${id}">
                <div class="flex justify-between items-center p-4 cursor-pointer" data-accordion-toggle>
                    <div class="flex items-center space-x-3 flex-grow">
                        <i class="fas fa-grip-vertical text-gray-500 hidden sm:block"></i>
                        <div class="editable-container">
                            <h4 class="resource-title font-medium text-white text-sm sm:text-base">New Resource</h4>
                        </div>
                    </div>
                    <div class="flex items-center space-x-3">
                        <span class="edit-resource-btn text-sky-400 hover:text-sky-300 cursor-pointer"><i class="fas fa-edit"></i></span>
                        <span class="delete-resource-btn text-red-500 hover:text-red-400 cursor-pointer"><i class="fas fa-trash-alt"></i></span>
                        <i class="fas fa-chevron-down text-gray-400 transform transition-transform duration-200"></i>
                    </div>
                </div>
                <div class="resource-details p-4 pt-0 hidden space-y-4">
                    <div class="flex justify-around mb-4 p-1 bg-gray-700 rounded-xl">
                        <button type="button" class="resource-type-btn flex items-center justify-center gap-2 p-3 w-1/2 rounded-xl transition-all duration-300 bg-sky-500 text-white shadow-lg" data-type="video">
                            <i class="fas fa-video w-5 h-5"></i><span class="font-semibold text-sm sm:text-base">Video</span>
                        </button>
                        <button type="button" class="resource-type-btn flex items-center justify-center gap-2 p-3 w-1/2 rounded-xl transition-all duration-300 text-gray-300 hover:bg-gray-600" data-type="document">
                            <i class="fas fa-file-alt w-5 h-5"></i><span class="font-semibold text-sm sm:text-base">Document</span>
                        </button>
                    </div>
                    <div class="dynamic-input-container space-y-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">Resource Content</label>
                            <div class="flex items-center gap-4 bg-gray-800 p-4 rounded-lg shadow-sm border border-gray-700 mb-2">
                                <i class="fas fa-upload text-sky-400 w-5 h-5"></i>
                                <button type="button" class="flex-1 text-left text-gray-300 font-medium truncate upload-btn" data-type="video" data-resource-id="${id}">Upload Video File</button>
                                <input type="file" id="video-file-input-${id}" class="hidden file-input" accept="video/*" data-resource-id="${id}" data-type="video">
                            </div>
                            <div class="flex items-center gap-4 bg-gray-800 p-4 rounded-lg shadow-sm border border-gray-700">
                                <i class="fas fa-link text-green-400 w-5 h-5"></i>
                                <input type="text" placeholder="Paste URL here..." class="flex-1 bg-transparent focus:outline-none placeholder-gray-500 text-white font-medium">
                            </div>
                        </div>
                    </div>
                </div>
            </div>`;
            };

            // const createTagElement = (id) => {
            //     return `
            //     <div class="tag-item flex items-center bg-gray-800 p-3 rounded-lg border border-gray-700">
            //         <input type="text" class="flex-1 bg-transparent focus:outline-none text-white placeholder-gray-500" placeholder="Enter tag name...">
            //         <button type="button" class="delete-tag-btn text-red-500 hover:text-red-400 ml-3">
            //             <i class="fas fa-trash-alt"></i>
            //         </button>
            //     </div>`;
            // };

            if (addModuleBtn) {
                addModuleBtn.addEventListener('click', () => {
                    moduleCount++;
                    const newModule = createModuleElement(moduleCount);
                    if (modulesContainer) modulesContainer.insertAdjacentHTML('beforeend', newModule);
                });
            }

            // if (addTagBtn) {
            //     // addTagBtn.addEventListener('click', () => {
            //     //     tagCount++;
            //     //     const newTag = createTagElement(tagCount);
            //     //     if (tagsContainer) tagsContainer.insertAdjacentHTML('beforeend', newTag);
            //     // });
            // }


            document.addEventListener('click', (e) => {
                if (e.target.closest('.add-resource-btn')) {
                    const moduleElement = e.target.closest('.module-item');
                    resourceCount++;
                    const resourcesContainer = moduleElement.querySelector('.resources-container');
                    const newResource = createResourceElement(resourceCount);
                    if (resourcesContainer) resourcesContainer.insertAdjacentHTML('beforeend', newResource);
                } else if (e.target.closest('.delete-module-btn')) {
                    e.target.closest('.module-item')?.remove();
                } else if (e.target.closest('.delete-resource-btn')) {
                    e.target.closest('.resource-item')?.remove();
                }
                // } else if (e.target.closest('.delete-tag-btn')) {
                // //     e.target.closest('.tag-item')?.remove();
                // // }
            });

            document.addEventListener('click', (e) => {
                const button = e.target.closest('.resource-type-btn');
                if (!button) return;

                const resourceItem = button.closest('.resource-item');
                const dynamicInputContainer = resourceItem.querySelector('.dynamic-input-container');
                const resourceType = button.dataset.type;
                const resourceId = resourceItem.dataset.resourceId;

                const allButtons = resourceItem.querySelectorAll('.resource-type-btn');
                allButtons.forEach(btn => {
                    btn.classList.remove('bg-sky-500', 'text-white', 'shadow-lg');
                    btn.classList.add('text-gray-300', 'hover:bg-gray-600');
                });
                button.classList.remove('text-gray-300', 'hover:bg-gray-600');
                button.classList.add('bg-sky-500', 'text-white', 'shadow-lg');

                if (dynamicInputContainer) {
                    if (resourceType === 'video') {
                        dynamicInputContainer.innerHTML = `
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">Resource Content</label>
                            <div class="flex items-center gap-4 bg-gray-800 p-4 rounded-lg shadow-sm border border-gray-700 mb-2">
                                <i class="fas fa-upload text-sky-400 w-5 h-5"></i>
                                <button type="button" class="flex-1 text-left text-gray-300 font-medium truncate upload-btn" data-type="video" data-resource-id="${resourceId}">Upload Video File</button>
                                <input type="file" id="video-file-input-${resourceId}" class="hidden file-input" accept="video/*" data-resource-id="${resourceId}" data-type="video">
                            </div>
                            <div class="flex items-center gap-4 bg-gray-800 p-4 rounded-lg shadow-sm border border-gray-700">
                                <i class="fas fa-link text-green-400 w-5 h-5"></i>
                                <input type="text" placeholder="Paste URL here..." class="flex-1 bg-transparent focus:outline-none placeholder-gray-500 text-white font-medium">
                            </div>
                        </div>`;
                    } else if (resourceType === 'document') {
                        dynamicInputContainer.innerHTML = `
                        <div>
                            <label class="block text-sm font-medium text-gray-300 mb-1">Resource Content</label>
                            <div class="flex items-center gap-4 bg-gray-800 p-4 rounded-lg shadow-sm border border-gray-700">
                                <i class="fas fa-upload text-purple-400 w-5 h-5"></i>
                                <button type="button" class="flex-1 text-left text-gray-300 font-medium truncate upload-btn" data-type="document" data-resource-id="${resourceId}">Upload Document File</button>
                                <input type="file" id="document-file-input-${resourceId}" class="hidden file-input" accept=".pdf,.doc,.docx,.txt" data-resource-id="${resourceId}" data-type="document">
                            </div>
                        </div>`;
                    }
                }
            });

            document.addEventListener('click', (e) => {
                const uploadBtn = e.target.closest('.upload-btn');
                if (uploadBtn) {
                    e.preventDefault();
                    const resourceId = uploadBtn.dataset.resourceId;
                    const inputType = uploadBtn.dataset.type;
                    const hiddenInput = document.querySelector(`#${inputType}-file-input-${resourceId}`);
                    if (hiddenInput) {
                        hiddenInput.click();
                    }
                }
            });

            document.addEventListener('change', (e) => {
                const fileInput = e.target.closest('.file-input');
                if (fileInput && fileInput.files.length > 0) {
                    const fileName = fileInput.files[0].name;
                    const resourceId = fileInput.dataset.resourceId;
                    const inputType = fileInput.dataset.type;
                    const uploadBtn = document.querySelector(`.upload-btn[data-resource-id="${resourceId}"][data-type="${inputType}"]`);
                    if (uploadBtn) {
                        uploadBtn.textContent = fileName;
                        uploadBtn.classList.remove('text-gray-300');
                        uploadBtn.classList.add('text-sky-400');
                    }
                }
            });

            // MODIFIED FUNCTION
            function createEditInput(textElement, onSave) {
                const originalText = textElement.textContent;
                const input = document.createElement('input');
                input.type = 'text';
                // Use classes that fit the theme for a text input
                input.className = 'bg-gray-700 text-white border border-gray-600 rounded-md p-1 w-full focus:ring-sky-400 focus:border-sky-400';
                input.value = originalText;

                // Replace the title element with the new input field
                textElement.replaceWith(input);
                input.focus();
                input.select(); // Automatically select the text for easy editing

                const saveChanges = () => {
                    const newText = input.value.trim();
                    // If the input is empty, revert to the original text
                    textElement.textContent = newText === '' ? originalText : newText;

                    // Replace the input field back with the updated title element
                    input.replaceWith(textElement);
                    if (onSave) onSave(newText);
                };

                // Save when the input loses focus (e.g., user clicks away)
                input.addEventListener('blur', saveChanges);

                // Add keyboard controls: Enter to save, Escape to cancel
                input.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter') {
                        saveChanges();
                    } else if (e.key === 'Escape') {
                        input.value = originalText; // Revert text
                        saveChanges(); // Trigger the replacement
                    }
                });
            }

            // MODIFIED EVENT LISTENER
            document.addEventListener('click', (e) => {
                const editModuleBtn = e.target.closest('.edit-module-btn');
                if (editModuleBtn) {
                    const moduleItem = editModuleBtn.closest('.module-item');
                    const moduleTitle = moduleItem.querySelector('.module-title');
                    // Check if the title exists and is not already being edited
                    if (moduleItem && moduleTitle && !moduleItem.querySelector('.editable-container input')) {
                        createEditInput(moduleTitle);
                    }
                }

                const editResourceBtn = e.target.closest('.edit-resource-btn');
                if (editResourceBtn) {
                    const resourceItem = editResourceBtn.closest('.resource-item');
                    const resourceTitle = resourceItem.querySelector('.resource-title');
                    // Check if the title exists and is not already being edited
                    if (resourceItem && resourceTitle && !resourceItem.querySelector('.editable-container input')) {
                        createEditInput(resourceTitle);
                    }
                }
            });

            // --- START: NEW UI LOGIC FOR INTRO VIDEO SELECTION ---

            const videoOptionUrl = document.getElementById('video-option-url');
            const videoOptionFile = document.getElementById('video-option-file');
            const videoUrlContainer = document.getElementById('video-url-container');
            const videoFileContainer = document.getElementById('video-file-container');
            const introVideoUrlInput = document.getElementById('intro-video-url');
            const introVideoFileInput = document.getElementById('intro-video-file');

            const handleVideoOptionChange = () => {
                if (videoOptionUrl.checked) {
                    videoUrlContainer.classList.remove('hidden');
                    videoFileContainer.classList.add('hidden');
                    // Clear the file input when switching to URL to prevent submitting both
                    introVideoFileInput.value = '';
                    document.getElementById('intro-video-preview-upload').classList.add('hidden');
                } else {
                    videoUrlContainer.classList.add('hidden');
                    videoFileContainer.classList.remove('hidden');
                    // Clear the url input when switching to file upload
                    introVideoUrlInput.value = '';
                    document.getElementById('intro-video-preview-iframe').classList.add('hidden');
                }
            };

            if (videoOptionUrl && videoOptionFile) {
                videoOptionUrl.addEventListener('change', handleVideoOptionChange);
                videoOptionFile.addEventListener('change', handleVideoOptionChange);
            }

            // Preview logic for URL input (remains the same)
            const introVideoIframePreview = document.getElementById('intro-video-preview-iframe');
            if (introVideoUrlInput && introVideoIframePreview) {
                introVideoUrlInput.addEventListener('input', () => {
                    const url = introVideoUrlInput.value.trim();
                    const videoIframe = document.getElementById('video-iframe');
                    const regExp = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/ ]{11})/i;
                    const match = url.match(regExp);
                    if (match && match[1]) {
                        videoIframe.src = `https://www.youtube.com/embed/${match[1]}`;
                        introVideoIframePreview.classList.remove('hidden');
                    } else {
                        introVideoIframePreview.classList.add('hidden');
                    }
                });
            }

            // Preview logic for File input (remains the same)
            const introVideoUploadPreview = document.getElementById('intro-video-preview-upload');
            if (introVideoFileInput && introVideoUploadPreview) {
                introVideoFileInput.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    const videoPlayer = introVideoUploadPreview.querySelector('video');
                    if (file) {
                        const objectUrl = URL.createObjectURL(file);
                        videoPlayer.src = objectUrl;
                        introVideoUploadPreview.classList.remove('hidden');
                    } else {
                        introVideoUploadPreview.classList.add('hidden');
                    }
                });
            }

            // --- END: NEW UI LOGIC FOR INTRO VIDEO SELECTION ---

            const courseImageFileInput = document.getElementById('course-image-file');
            const courseImagePreview = document.getElementById('course-image-preview');

            if (courseImageFileInput && courseImagePreview) {
                courseImageFileInput.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            courseImagePreview.src = e.target.result;
                            courseImagePreview.classList.remove('hidden');
                        };
                        reader.readAsDataURL(file);
                    } else {
                        courseImagePreview.src = '#';
                        courseImagePreview.classList.add('hidden');
                    }
                });
            }

            const uploadProgressContainer = document.getElementById('upload-progress-container');
            const uploadList = document.getElementById('upload-list');
            const overallProgressBar = document.getElementById('overall-progress-bar');
            const overallProgressText = document.getElementById('overall-progress-text');
            const uploadStatusMessage = document.getElementById('upload-status-message');

function displayError(inputId, message) {
    const inputElement = document.getElementById(inputId);
    const errorElement = document.getElementById(inputId + '-error');
    if (!errorElement) return;

    if (message) {
        errorElement.textContent = message;
        errorElement.classList.remove('hidden');
        if (inputElement) {
            inputElement.classList.add('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
            inputElement.classList.remove('border-gray-600', 'focus:border-sky-400', 'focus:ring-sky-400');
        }
    } else {
        errorElement.classList.add('hidden');
        if (inputElement) {
            inputElement.classList.remove('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
            inputElement.classList.add('border-gray-600', 'focus:border-sky-400', 'focus:ring-sky-400');
        }
    }
}


// --- Individual validation functions ---

function validateTitle() {
    const input = document.getElementById('course-title');
    const value = input.value.trim();
    if (value.length < 5) {
        displayError('course-title', 'Title must be at least 5 characters long.');
        return false;
    }
    if (value.length > 80) {
        displayError('course-title', 'Title cannot be more than 80 characters.');
        return false;
    }
    displayError('course-title', '');
    return true;
}

function validateDescription() {
    const input = document.getElementById('course-description');
    const value = input.value.trim();
    if (value.length < 20) {
        displayError('course-description', 'Description must be at least 20 characters long.');
        return false;
    }
     if (value.length > 500) {
        displayError('course-description', 'Description cannot be more than 500 characters.');
        return false;
    }
    displayError('course-description', '');
    return true;
}

function validatePrice() {
    const input = document.getElementById('course-price');
    const valueStr = input.value.trim();
    if (valueStr === '') {
        displayError('course-price', 'Price is required.');
        return false;
    }
    const value = parseFloat(valueStr);
    if (isNaN(value)) {
        displayError('course-price', 'Please enter a valid number.');
        return false;
    }
    if (value < 300) {
        displayError('course-price', 'Price must be at least ₹300.');
        return false;
    }
    if (value > 1000000) {
        displayError('course-price', 'Price cannot exceed ₹1,000,000.');
        return false;
    }
    displayError('course-price', '');
    return true;
}


function validateCategory() {
    const input = document.getElementById('course-category');
    const value = input.value.trim();
    if (value.length < 3) {
        displayError('course-category', 'Category must be at least 3 characters long.');
        return false;
    }
    displayError('course-category', '');
    return true;
}

function validateFiles() {
    let isImageValid = true;
    let isVideoValid = true;
    
    const imageInput = document.getElementById('course-image-file');
    if (imageInput.files.length === 0) {
        displayError('course-image-file', 'A course image is required.');
        isImageValid = false;
    } else {
         displayError('course-image-file', '');
    }

    const videoUrlInput = document.getElementById('intro-video-url');
    const videoFileInput = document.getElementById('intro-video-file');
    if (videoUrlInput.value.trim() === '' && videoFileInput.files.length === 0) {
        displayError('intro-video-file', 'An intro video (URL or file) is required.');
        isVideoValid = false;
    } else {
        // Use the intro-video-file's error ID for both to simplify
        displayError('intro-video-file', '');
    }
    return isImageValid && isVideoValid;
}
function validateIntroVideo() {
    const isUrlOption = document.getElementById('video-option-url').checked;
    const urlInput = document.getElementById('intro-video-url');
    const fileInput = document.getElementById('intro-video-file');
    const urlValue = urlInput.value.trim();

    // This is a pattern that matches various YouTube URL formats
    const youtubeRegex = /^(https?:\/\/)?(www\.)?(youtube\.com|youtu\.?be)\/.+$/;

    // Only validate the URL if the URL option is selected
    if (isUrlOption) {
        if (urlValue === '') {
            displayError('intro-video-url', 'YouTube URL is required.');
            return false;
        }
        if (!youtubeRegex.test(urlValue)) {
            displayError('intro-video-url', 'Please enter a valid YouTube URL.');
            return false;
        }
    }

    // Now, check the overall requirement: one of the two must be filled
    if (urlValue === '' && fileInput.files.length === 0) {
        displayError('intro-video-url', 'An intro video (URL or file) is required.');
        return false;
    }

    // If everything is fine, clear any previous errors
    displayError('intro-video-url', '');
    return true;
}


function validateImageFile() {
    const imageInput = document.getElementById('course-image-file');
    if (imageInput.files.length === 0) {
        displayError('course-image-file', 'A course image is required.');
        return false;
    }
    displayError('course-image-file', '');
    return true;
}
// The main validation function that runs all checks before submitting
function validateForm() {
const isTitleValid = validateTitle();
    const isDescriptionValid = validateDescription();
    const isPriceValid = validatePrice();
    const isCategoryValid = validateCategory();
    const isImageValid = validateImageFile();
    const isVideoValid = validateIntroVideo(); 
    const modules = document.querySelectorAll('.module-item');
    const tags = document.querySelectorAll('#tags-container .tag');
    let areModulesValid = true;
    if (modules.length === 0) {
        showModal('Validation Error', 'Please add at least one curriculum module.');
        areModulesValid = false;
    }
    let areTagsValid = true;
    if (tags.length < 2) {
        showModal('Validation Error', 'Please add at least two tags for the course.');
        areTagsValid = false;
    }
    return isTitleValid && isDescriptionValid && isPriceValid && isCategoryValid && isImageValid && isVideoValid;
}


            const createUploadItem = (fileName) => {
                const item = document.createElement('div');
                item.className = 'flex items-center space-x-3 p-3 bg-gray-900 rounded-lg shadow-sm';
                item.innerHTML = `
                <div class="circular-progress-container w-6 h-6">
                    <svg viewBox="0 0 36 36" class="w-full h-full">
                        <path class="track" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke-width="4"/>
                        <path class="progress" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" fill="none" stroke-width="4"/>
                    </svg>
                </div>
                <span class="text-sm font-medium text-gray-300 truncate flex-1">${fileName}</span>
                <span class="progress-percentage text-sm font-semibold text-sky-400">0%</span>
            `;
                if (uploadList) uploadList.appendChild(item);
                return item;
            };

            const updateItemProgress = (item, percentage) => {
                const progressCircle = item.querySelector('.progress');
                const progressText = item.querySelector('.progress-percentage');
                const circumference = 100;
                const offset = circumference - (percentage / 100) * circumference;
                if (progressCircle) progressCircle.style.strokeDashoffset = offset;
                if (progressText) progressText.textContent = `${percentage}%`;

                if (percentage >= 100) {
                    if (progressCircle) progressCircle.style.stroke = '#34D399';
                    if (progressText) {
                        progressText.textContent = 'Done';
                        progressText.classList.remove('text-sky-400');
                        progressText.classList.add('text-green-400');
                    }
                    const svgElement = item.querySelector('svg');
                    if (svgElement) {
                        svgElement.insertAdjacentHTML('beforebegin', '<i class="fas fa-check-circle text-green-400 w-6 h-6"></i>');
                        svgElement.remove();
                    }
                }
            };

            const updateOverallProgress = (totalPercentage) => {
                const circumference = 100;
                const offset = circumference - (totalPercentage / 100) * circumference;
                if (overallProgressBar) overallProgressBar.style.strokeDashoffset = offset;
                if (overallProgressText) overallProgressText.textContent = `${Math.round(totalPercentage)}%`;

                if (totalPercentage >= 100) {
                    if (overallProgressBar) overallProgressBar.style.stroke = '#34D399';
                    if (uploadStatusMessage) uploadStatusMessage.classList.remove('hidden');
                }
            };

// -----------------------------------------------------------------------------
        // --- REPLACE your entire `submitBtn` event listener with this new block ---
        // -----------------------------------------------------------------------------

        if (submitBtn) {
            submitBtn.addEventListener('click', async (event) => {
                event.preventDefault();
                
                if (!validateForm()) {
                    return;
                }

                // 1. GATHER ALL DATA FROM THE FORM INTO THE courseData OBJECT
                const courseData = {
                    title: document.getElementById('course-title').value.trim(),
                    description: document.getElementById('course-description').value.trim(),
                    price: document.getElementById('course-price').value,
                    category: document.getElementById('course-category').value.trim(),
                    introVideoUrl: document.getElementById('intro-video-url').value.trim() || null,
                    introVideoFile: document.getElementById('intro-video-file').files[0] || null,
                    courseImage: document.getElementById('course-image-file').files[0] || null,
                    modules: [],
                    tags: []
                };

                // Gather Modules and their Resources
                document.querySelectorAll('.module-item').forEach((moduleEl, moduleIndex) => {
                    const module = {
                        title: moduleEl.querySelector('.module-title').textContent.trim(),
                        order: moduleIndex + 1,
                        resources: []
                    };
                    moduleEl.querySelectorAll('.resource-item').forEach((resourceEl, resourceIndex) => {
                        const resourceType = resourceEl.querySelector('.resource-type-btn.bg-sky-500').dataset.type;
                        const resource = {
                            title: resourceEl.querySelector('.resource-title').textContent.trim(),
                            type: resourceType.charAt(0).toUpperCase() + resourceType.slice(1),
                            url: resourceEl.querySelector('.dynamic-input-container input[type="text"]')?.value.trim() || null,
                            file: resourceEl.querySelector('.file-input').files[0] || null,
                            order: resourceIndex + 1
                        };
                        module.resources.push(resource);
                    });
                    courseData.modules.push(module);
                });

                // Gather Tags
                document.querySelectorAll('#tags-container .tag').forEach(tagEl => {
                    courseData.tags.push(tagEl.querySelector('span:first-child').textContent.trim());
                });

                console.log("Final data collected from form:", courseData);

                // 2. CALL THE NEW UPLOAD ORCHESTRATOR
                uploadOrchestrator(courseData);
            });
        }

        /**
         * Asks your backend for a pre-signed URL for a specific file.
         * @param {File} file - The file you intend to upload.
         * @returns {Promise<Object>} A promise that resolves to { signedUrl, finalUrl }.
         */
/**
         * Asks your backend for a pre-signed URL for a specific file.
         * @param {File} file - The file you intend to upload.
         * @returns {Promise<Object>} A promise that resolves to { signedUrl, finalUrl }.
         */
        async function getPresignedUrl(file) {
            // --- FIX IS HERE: Corrected the URL ---
            const backendUrl = 'http://localhost:8000/api/courses/generate-presigned-url';

            const response = await fetch(backendUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    fileName: file.name,
                    fileType: file.type
                })
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to get pre-signed URL from server.');
            }
            // Your backend should return an object like: { signedUrl: "...", finalUrl: "..." }
            return await response.json();
        }

        /**
         * Uploads a file directly to S3 using the provided pre-signed URL.
         * @param {string} signedUrl - The temporary URL from your backend for uploading.
         * @param {File} file - The file to upload.
         * @param {Function} onProgress - A callback function to report progress (0-100).
         */
        function uploadFileToS3(signedUrl, file, onProgress) {
            return new Promise((resolve, reject) => {
                const xhr = new XMLHttpRequest();
                xhr.open('PUT', signedUrl, true);
                xhr.setRequestHeader('Content-Type', file.type);

                xhr.upload.onprogress = (event) => {
                    if (event.lengthComputable) {
                        const percentComplete = Math.round((event.loaded / event.total) * 100);
                        onProgress(percentComplete);
                    }
                };

                xhr.onload = () => {
                    if (xhr.status === 200) {
                        resolve();
                    } else {
                        reject(new Error(`S3 Upload failed with status: ${xhr.status}`));
                    }
                };
                xhr.onerror = () => reject(new Error('Network error during S3 upload.'));
                xhr.send(file);
            });
        }

        /**
         * The main function that orchestrates the entire upload process.
         * @param {Object} courseData - The complete data object collected from the form.
         */
        async function uploadOrchestrator(courseData) {
            uploadProgressContainer.classList.remove('hidden');
            uploadList.innerHTML = '';
            updateOverallProgress(0);

            try {
                // 1. Identify all files that need to be uploaded (This part is unchanged)
                const filesToUpload = [];
                if (courseData.courseImage) {
                    filesToUpload.push({ type: 'thumbnail', file: courseData.courseImage });
                }
                if (courseData.introVideoFile) {
                    filesToUpload.push({ type: 'introVideo', file: courseData.introVideoFile });
                }
                courseData.modules.forEach((module, mIndex) => {
                    module.resources.forEach((resource, rIndex) => {
                        if (resource.file) {
                            filesToUpload.push({ type: 'resource', file: resource.file, moduleIndex: mIndex, resourceIndex: rIndex });
                        }
                    });
                });

                // 2. Create progress UI and upload tasks for each file (This part is unchanged)
                const uploadTasks = filesToUpload.map(fileInfo => {
                    const progressItem = createUploadItem(fileInfo.file.name);
                    const onProgress = (percentage) => updateItemProgress(progressItem, percentage);
                    
                    return async () => {
                        const { signedUrl, finalUrl } = await getPresignedUrl(fileInfo.file);
                        await uploadFileToS3(signedUrl, fileInfo.file, onProgress);
                        return { ...fileInfo, finalUrl };
                    };
                });

                // 3. Execute all upload tasks (This part is unchanged)
                const uploadedFileResults = await Promise.all(uploadTasks.map(task => task()));

                // 4. Update the courseData object with the final S3 URLs (This part is unchanged)
                const finalCoursePayload = { ...courseData };
                uploadedFileResults.forEach(result => {
                    if (result.type === 'thumbnail') {
                        finalCoursePayload.thumbnailUrl = result.finalUrl;
                    } else if (result.type === 'introVideo') {
                        finalCoursePayload.introVideoUrl = result.finalUrl;
                    } else if (result.type === 'resource') {
                        finalCoursePayload.modules[result.moduleIndex].resources[result.resourceIndex].fileUrl = result.finalUrl;
                    }
                });

                delete finalCoursePayload.courseImage;
                delete finalCoursePayload.introVideoFile;
                finalCoursePayload.modules.forEach(m => m.resources.forEach(r => delete r.file));
                
                // 5. Send the final metadata to your backend to create the course
                console.log("Final payload to be sent to server:", finalCoursePayload);
                
                // --- FIX IS HERE: Corrected the URL ---
                const finalBackendUrl = 'http://localhost:8000/api/courses/create-course';

                const finalResponse = await fetch(finalBackendUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(finalCoursePayload)
                });

                if (!finalResponse.ok) {
                    const error = await finalResponse.json();
                    throw new Error(error.message || 'Failed to create course on the server.');
                }

                updateOverallProgress(100);
                showModal("Success!", "Course has been uploaded and created successfully.", false, true);
                resetForm();

            } catch (error) {
                console.error("Upload process failed:", error);
                showModal("Error!", error.message);
                uploadProgressContainer.classList.add('hidden');
            }
        }

           
            // --- NEW LOGIC FOR DYNAMICALLY LOADED CONTENT ---
            document.addEventListener('click', (e) => {
                // Export Report Button
                const exportBtn = e.target.closest('#export-report-btn');
                if (exportBtn) {
                    const btnText = exportBtn.querySelector('.btn-text');
                    const spinner = exportBtn.querySelector('.spinner');
                    const icon = exportBtn.querySelector('i');

                    btnText.classList.add('hidden');
                    icon.classList.add('hidden');
                    spinner.classList.remove('hidden');
                    exportBtn.disabled = true;

                    setTimeout(() => {
                        const { jsPDF } = window.jspdf;
                        const doc = new jsPDF();

                        doc.autoTable({ html: '#billing-history-table' });
                        doc.save('transactions-report.pdf');

                        btnText.classList.remove('hidden');
                        icon.classList.remove('hidden');
                        spinner.classList.add('hidden');
                        exportBtn.disabled = false;
                        showModal('Success', 'Report has been downloaded successfully!', false, true);
                    }, 2000); // Simulate loading time
                }

                // Save UPI Button
                const saveUpiBtn = e.target.closest('#save-upi-btn');
                if (saveUpiBtn) {
                    const upiId = document.getElementById('upi-id').value;
                    if (upiId.trim() === '') {
                        showModal('Error', 'Please enter a valid UPI ID.');
                    } else {
                        showModal('Success', `UPI ID "${upiId}" has been saved.`, false, true);
                    }
                }
            });

            // --- NEW LOGIC FOR SETTINGS SECTION ---
            const settingsTabsContainer = document.getElementById('settings-tabs');
            const settingsTabs = document.querySelectorAll('.settings-tab');
            const settingsContents = document.querySelectorAll('.settings-content');

            const switchSettingsTab = (targetId) => {
                settingsTabs.forEach(tab => {
                    tab.classList.remove('settings-tab-active', 'text-sky-400', 'border-sky-400');
                    tab.classList.add('text-gray-400', 'border-transparent', 'hover:text-white', 'hover:border-gray-300');
                });
                settingsContents.forEach(content => content.classList.add('hidden'));

                const activeTab = document.querySelector(`.settings-tab[data-target="${targetId}"]`);
                const activeContent = document.getElementById(targetId);

                if (activeTab) {
                    activeTab.classList.add('settings-tab-active', 'text-sky-400', 'border-sky-400');
                    activeTab.classList.remove('text-gray-400', 'border-transparent', 'hover:text-white', 'hover:border-gray-300');
                }
                if (activeContent) {
                    activeContent.classList.remove('hidden');
                }
            };

            if (settingsTabsContainer) {
                settingsTabsContainer.addEventListener('click', (e) => {
                    e.preventDefault();
                    const tab = e.target.closest('.settings-tab');
                    if (tab && tab.dataset.target) {
                        switchSettingsTab(tab.dataset.target);
                    }
                });
                // Set Profile as default
                switchSettingsTab('profile-settings');
            }

            // Profile editing logic
            const profileImageUpload = document.getElementById('profile-image-upload');
            const profileImagePreview = document.getElementById('profile-image-preview');

            if (profileImageUpload && profileImagePreview) {
                profileImageUpload.addEventListener('change', (event) => {
                    const file = event.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            profileImagePreview.src = e.target.result;
                        };
                        reader.readAsDataURL(file);
                    }
                });
            }

            ['profile-name-text', 'profile-email-text', 'profile-phone-text'].forEach(id => {
                const element = document.getElementById(id);
                if (element) {
                    element.addEventListener('click', () => {
                        if (!element.parentElement.querySelector('input')) {
                            createEditInput(element);
                        }
                    });
                }
            });

            const saveProfileBtn = document.getElementById('save-profile-btn');
            if (saveProfileBtn) {
                saveProfileBtn.addEventListener('click', () => {
                    const name = document.getElementById('profile-name-text').textContent;
                    const email = document.getElementById('profile-email-text').textContent;
                    const phone = document.getElementById('profile-phone-text').textContent;
                    console.log('Saving profile:', { name, email, phone });
                    showModal('Profile Saved', 'Your profile details have been updated successfully!', false, true);
                });
            }

            // --- NEW LOGIC FOR NOTIFICATIONS SECTION ---
            const notificationsToggle = document.getElementById('notifications-toggle');
            const notificationsPanel = document.getElementById('notifications-panel');
            const notificationTabs = document.querySelectorAll('#notifications-panel .notification-tab-btn');

            if (notificationsToggle && notificationsPanel) {
                notificationsToggle.addEventListener('click', (e) => {
                    e.stopPropagation();
                    notificationsPanel.classList.toggle('hidden');
                    notificationsToggle.classList.toggle('notifications-active');
                });
            }

            notificationTabs.forEach(tab => {
                tab.addEventListener('click', (e) => {
                    const parentNotificationSection = e.target.closest('#notifications-panel');
                    if (!parentNotificationSection) return;

                    const allTabsInContext = parentNotificationSection.querySelectorAll('.notification-tab-btn');
                    const allContentsInContext = parentNotificationSection.querySelectorAll('.notification-content');

                    allTabsInContext.forEach(t => {
                        t.classList.remove('border-white', 'text-white', 'font-semibold');
                        t.classList.add('border-transparent', 'text-gray-400');
                    });
                    tab.classList.add('border-white', 'text-white', 'font-semibold');
                    tab.classList.remove('border-transparent', 'text-gray-400');

                    const targetId = tab.dataset.target;
                    allContentsInContext.forEach(content => {
                        if (content.id === targetId) {
                            content.classList.remove('hidden');
                        } else {
                            content.classList.add('hidden');
                        }
                    });
                });
            });
            //notification closing
            document.querySelector("#close-notification").addEventListener("click", () => {
                notificationsPanel.classList.add('hidden');
                notificationsToggle.classList.remove('notifications-active');
            })
            // --- NEW LOGIC FOR WITHDRAW MODAL ---
            const withdrawModalBackdrop = document.getElementById('withdraw-modal-backdrop');
            const withdrawModalDialog = document.getElementById('withdraw-modal-dialog');
            const withdrawSteps = {
                1: document.getElementById('withdraw-step-1'),
                2: document.getElementById('withdraw-step-2'),
                3: document.getElementById('withdraw-step-3'),
            };
            let withdrawAmount = '';
            let currentWithdrawStep = 1;

            const showWithdrawModal = () => {
                withdrawModalBackdrop.classList.remove('hidden');
                setTimeout(() => {
                    withdrawModalBackdrop.classList.add('opacity-100');
                    withdrawModalDialog.classList.remove('scale-95', 'opacity-0');
                    withdrawModalDialog.classList.add('scale-100', 'opacity-100');
                }, 10);
            };

            const hideWithdrawModal = () => {
                withdrawModalBackdrop.classList.remove('opacity-100');
                withdrawModalDialog.classList.remove('scale-100', 'opacity-100');
                withdrawModalDialog.classList.add('scale-95', 'opacity-0');
                setTimeout(() => {
                    withdrawModalBackdrop.classList.add('hidden');
                    // Reset to step 1 for next time
                    setWithdrawStep(1);
                    withdrawAmount = '';
                    updateAmountDisplay();
                    clearOtpInputs();
                }, 300);
            };

            const setWithdrawStep = (step) => {
                Object.values(withdrawSteps).forEach(s => s.classList.add('hidden'));
                withdrawSteps[step].classList.remove('hidden');
                withdrawSteps[step].classList.add('flex');
                currentWithdrawStep = step;
            };

            // Populate Numpads
            const numpadAmount = document.getElementById('numpad-amount');
            const numpadOtp = document.getElementById('numpad-otp');
            const numpadKeys = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '.', '0', '<i class="fa-solid fa-delete-left"></i>'];

            const createNumpad = (container, type) => {
                if (container.children.length > 0) return; // Already populated
                numpadKeys.forEach(key => {
                    const button = document.createElement('button');
                    button.innerHTML = key;
                    button.className = 'numpad-btn text-2xl font-bold p-4 rounded-lg';
                    button.dataset.key = key.includes('fa-delete-left') ? 'backspace' : key;
                    button.dataset.type = type;
                    container.appendChild(button);
                });
            }
            createNumpad(numpadAmount, 'amount');
            createNumpad(numpadOtp, 'otp');

            const updateAmountDisplay = () => {
                const display = document.getElementById('withdraw-amount-display');
                const continueBtn = document.getElementById('withdraw-continue-btn');
                let amountNumber = parseFloat(withdrawAmount) || 0;
                display.textContent = `$${amountNumber.toFixed(2)}`;
                if (amountNumber > 0) {
                    continueBtn.disabled = false;
                } else {
                    continueBtn.disabled = true;
                }
            };

            const handleNumpad = (key, type) => {
                if (type === 'amount') {
                    if (key === 'backspace') {
                        withdrawAmount = withdrawAmount.slice(0, -1);
                    } else if (key === '.' && !withdrawAmount.includes('.')) {
                        withdrawAmount += key;
                    } else if (!isNaN(parseInt(key))) {
                        withdrawAmount += key;
                    }
                    updateAmountDisplay();
                } else if (type === 'otp') {
                    const inputs = document.querySelectorAll('.otp-input');
                    let currentInput = Array.from(inputs).find(input => !input.value);
                    if (key === 'backspace') {
                        let lastFilledInput = Array.from(inputs).reverse().find(input => input.value);
                        if (lastFilledInput) {
                            lastFilledInput.value = '';
                            lastFilledInput.focus();
                        }
                    } else if (!isNaN(parseInt(key)) && currentInput) {
                        currentInput.value = key;
                        const nextInput = currentInput.nextElementSibling;
                        if (nextInput) {
                            nextInput.focus();
                        } else {
                            currentInput.blur();
                        }
                    }
                    checkOtpCompletion();
                }
            };

            const clearOtpInputs = () => {
                document.querySelectorAll('.otp-input').forEach(input => input.value = '');
            }

            const checkOtpCompletion = () => {
                const inputs = document.querySelectorAll('.otp-input');
                const isComplete = Array.from(inputs).every(input => input.value);
                document.getElementById('withdraw-verify-btn').disabled = !isComplete;
            }

            const otpInputs = document.getElementById('otp-inputs');
            if (otpInputs) {
                otpInputs.addEventListener('input', (e) => {
                    const target = e.target;
                    const nextInput = target.nextElementSibling;
                    if (target.value && nextInput) {
                        nextInput.focus();
                    }
                    checkOtpCompletion();
                });
            }

            // --- NEW LOGIC FOR PAYMENT METHOD MODAL ---
            const paymentModalBackdrop = document.getElementById('payment-method-modal-backdrop');
            const paymentModalDialog = document.getElementById('payment-method-modal-dialog');
            const paymentSteps = {
                1: document.getElementById('payment-step-1'),
                2: document.getElementById('payment-step-2'),
                3: document.getElementById('payment-step-3'),
            };

            const showPaymentModal = () => {
                paymentModalBackdrop.classList.remove('hidden');
                setTimeout(() => {
                    paymentModalBackdrop.classList.add('opacity-100');
                    paymentModalDialog.classList.remove('scale-95', 'opacity-0');
                    paymentModalDialog.classList.add('scale-100', 'opacity-100');
                }, 10);
            };

            const hidePaymentModal = () => {
                paymentModalBackdrop.classList.remove('opacity-100');
                paymentModalDialog.classList.remove('scale-100', 'opacity-100');
                paymentModalDialog.classList.add('scale-95', 'opacity-0');
                setTimeout(() => {
                    paymentModalBackdrop.classList.add('hidden');
                    setPaymentStep(1); // Reset to step 1
                }, 300);
            };

            const setPaymentStep = (step) => {
                Object.values(paymentSteps).forEach(s => s.classList.add('hidden'));
                paymentSteps[step].classList.remove('hidden');
            };

            document.addEventListener('click', (e) => {
                if (e.target.closest('#withdraw-btn')) { showWithdrawModal(); }
                if (e.target.closest('#withdraw-back-btn') || e.target.closest('#withdraw-done-btn')) { hideWithdrawModal(); }
                if (e.target.closest('#otp-back-btn')) { setWithdrawStep(1); }
                if (e.target.closest('#withdraw-continue-btn')) {
                    document.getElementById('otp-amount').textContent = `$${parseFloat(withdrawAmount).toFixed(2)}`;
                    setWithdrawStep(2);
                }
                if (e.target.closest('#withdraw-verify-btn')) { setTimeout(() => setWithdrawStep(3), 500); }
                const numpadBtn = e.target.closest('.numpad-btn');
                if (numpadBtn) { handleNumpad(numpadBtn.dataset.key, numpadBtn.dataset.type); }

                // Payment Modal Logic
                if (e.target.closest('#add-payment-method-btn')) { showPaymentModal(); }
                if (e.target.closest('#payment-back-btn-1') || e.target.closest('#payment-done-btn')) { hidePaymentModal(); }
                if (e.target.closest('#payment-back-btn-2')) { setPaymentStep(1); }
                if (e.target.closest('#add-new-payment-btn')) { setPaymentStep(2); }
                if (e.target.closest('#save-payment-method-btn')) { setPaymentStep(3); }
                if (e.target.closest('.payment-option')) {
                    document.querySelectorAll('.payment-option').forEach(opt => opt.classList.remove('selected'));
                    e.target.closest('.payment-option').classList.add('selected');
                }
            });
            // --- START: UPLOAD DOCS SECTION LOGIC ---

            const dropZone = document.getElementById('drop-zone');
            const fileUploadInput = document.getElementById('file-upload-input');
            const uploadProgressList = document.getElementById('upload-progress-list');
            const attachedFilesContainer = document.getElementById('attached-files-container');

            // Mock data to simulate fetching from /attached-files
            // In a real application, this would be an array of objects from your backend
            let attachedFilesData = [
                { id: 1, name: 'Tech requirements.pdf', description: 'Detailed tech specs for the new project.', size: '200 KB', dateUploaded: 'Jan 4, 2024', lastUpdated: 'Jan 4, 2024', price: 500.00 },
                { id: 2, name: 'Dashboard screenshot.jpg', description: 'A screenshot of the new dashboard design.', size: '720 KB', dateUploaded: 'Jan 4, 2024', lastUpdated: 'Jan 4, 2024', price: 150.00 },
                { id: 3, name: 'Dashboard prototype.mp4', description: 'Video walkthrough of the prototype.', size: '16 MB', dateUploaded: 'Jan 2, 2024', lastUpdated: 'Jan 2, 2024', price: 1250.00 },
                { id: 4, name: 'Dashboard prototype FINAL.fig', description: 'Final Figma design file.', size: '4.2 MB', dateUploaded: 'Jan 6, 2024', lastUpdated: 'Jan 6, 2024', price: 2500.00 },
                { id: 5, name: 'UX Design Guidelines.docx', description: 'Official guidelines for UX.', size: '400 KB', dateUploaded: 'Jan 8, 2024', lastUpdated: 'Jan 8, 2024', price: 750.00 },
            ];

            /**
             * Handles the file upload process for selected or dropped files.
             * @param {FileList} files - The list of files to upload.
             */
            const handleFiles = (files) => {
                [...files].forEach(file => {
                    // Create a progress bar element for each file
                    const progressItem = createUploadProgressItem(file);
                    uploadProgressList.appendChild(progressItem);
                    // Start the simulated upload animation
                    simulateUpload(file, progressItem);
                });
            };

            /**
             * Creates the HTML element for a file upload progress bar.
             * @param {File} file - The file being uploaded.
             * @returns {HTMLElement} The created progress bar element.
             */
            const createUploadProgressItem = (file) => {
                const item = document.createElement('div');
                item.className = 'bg-[#333333] p-4 rounded-lg flex items-center gap-4';
                item.innerHTML = `
                <div class="w-10 h-10 rounded-md bg-sky-100 flex items-center justify-center">
                    <i class="fa-solid fa-file-lines text-sky-600 text-xl"></i>
                </div>
                <div class="flex-grow">
                    <p class="text-sm font-semibold text-white">${file.name}</p>
                    <p class="text-xs text-gray-400">${(file.size / 1024).toFixed(2)} KB</p>
                    <div class="flex items-center gap-2 mt-1">
                        <div class="w-full bg-gray-700 rounded-full h-1.5">
                            <div class="progress-bar bg-sky-500 h-1.5 rounded-full" style="width: 0%"></div>
                        </div>
                        <span class="progress-text text-xs font-medium text-gray-400">0%</span>
                    </div>
                </div>
                <button class="cancel-upload-btn text-gray-400 hover:text-white">
                    <i class="fa-solid fa-trash-can"></i>
                </button>
            `;
                return item;
            };

            /**
             * Simulates the file upload progress and updates the UI.
             * @param {File} file - The file being uploaded.
             * @param {HTMLElement} progressItem - The progress bar element for this file.
             */
            const simulateUpload = (file, progressItem) => {
                let progress = 0;
                const progressBar = progressItem.querySelector('.progress-bar');
                const progressText = progressItem.querySelector('.progress-text');

                const interval = setInterval(() => {
                    progress += Math.floor(Math.random() * 10) + 5;
                    if (progress >= 100) {
                        progress = 100;
                        clearInterval(interval);
                        // After 1 second, remove the progress bar and add to the table
                        setTimeout(() => {
                            progressItem.remove();
                            addFileToTable(file);
                        }, 1000);
                    }
                    progressBar.style.width = `${progress}%`;
                    progressText.textContent = `${progress}%`;
                }, 200);

                // Allow cancelling the "upload"
                progressItem.querySelector('.cancel-upload-btn').addEventListener('click', () => {
                    clearInterval(interval);
                    progressItem.remove();
                });
            };

            /**
             * Adds a newly "uploaded" file to the attached files table.
             * @param {File} file - The file that was uploaded.
             */
            const addFileToTable = (file) => {
                const today = new Date();
                const formattedDate = today.toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' });

                const newFile = {
                    id: Date.now(), // Unique ID based on timestamp
                    name: file.name,
                    description: 'Newly uploaded file.',
                    size: `${(file.size / 1024).toFixed(2)} KB`,
                    dateUploaded: formattedDate,
                    lastUpdated: formattedDate,
                    price: 0.00 // Default price
                };

                attachedFilesData.unshift(newFile); // Add to the beginning of the array
                renderAttachedFiles(); // Re-render the entire table
            };

            /**
             * Renders all files from the `attachedFilesData` array into the table.
             */
            const renderAttachedFiles = () => {
                if (!attachedFilesContainer) return;
                attachedFilesContainer.innerHTML = ''; // Clear existing rows
                attachedFilesData.forEach(file => {
                    const row = createAttachedFileRow(file);
                    attachedFilesContainer.appendChild(row);
                });
            };

            /**
             * Creates a table row element for a single file.
             * @param {object} file - The file data object.
             * @returns {HTMLElement} The created table row (<tr>) element.
             */
            const createAttachedFileRow = (file) => {
                const row = document.createElement('tr');
                row.className = 'hover:bg-gray-800/50';
                row.dataset.fileId = file.id;
                row.innerHTML = `
                <td class="py-3 pr-3">
                    <div class="flex items-center gap-3">
                        <div class="w-8 h-8 rounded-md bg-gray-700 flex items-center justify-center">
                            <i class="fa-solid fa-file-lines text-sky-400"></i>
                        </div>
                        <div>
                            <p class="font-semibold text-white file-name">${file.name}</p>
                            <p class="text-xs text-gray-400 file-description">${file.description}</p>
                        </div>
                    </div>
                </td>
                <td class="py-3 px-3 text-sm text-gray-400">${file.size}</td>
                <td class="py-3 px-3 text-sm text-gray-400">${file.dateUploaded}</td>
                <td class="py-3 px-3 text-sm text-gray-400">${file.lastUpdated}</td>
                <td class="py-3 pl-3 text-sm font-semibold text-green-400 file-price">₹${file.price.toFixed(2)}</td>
                <td class="py-3 text-right">
                    <button class="delete-file-btn text-gray-400 hover:text-red-500 px-2"><i class="fa-solid fa-trash-can"></i></button>
                    <button class="edit-file-btn text-gray-400 hover:text-sky-400 px-2"><i class="fa-solid fa-pencil"></i></button>
                </td>
            `;
                return row;
            };

            /**
             * Makes a table row's content editable by replacing text with input fields.
             * @param {HTMLElement} row - The table row to make editable.
             */
            const makeRowEditable = (row) => {
                const nameCell = row.querySelector('.file-name');
                const descriptionCell = row.querySelector('.file-description');
                const priceCell = row.querySelector('.file-price');
                const editButton = row.querySelector('.edit-file-btn');

                // Store original values in case user cancels
                const originalName = nameCell.textContent;
                const originalDescription = descriptionCell.textContent;
                const originalPrice = priceCell.textContent.replace('₹', '');

                nameCell.innerHTML = `<input type="text" class="bg-gray-700 p-1 rounded-md w-full" value="${originalName}">`;
                descriptionCell.innerHTML = `<input type="text" class="bg-gray-700 p-1 rounded-md w-full text-xs" value="${originalDescription}">`;
                priceCell.innerHTML = `<input type="number" class="bg-gray-700 p-1 rounded-md w-24" value="${originalPrice}">`;

                // Change Edit button to Save button
                editButton.innerHTML = `<i class="fa-solid fa-save"></i>`;
                editButton.classList.remove('edit-file-btn');
                editButton.classList.add('save-file-btn');
            };

            /**
             * Saves the edits from the input fields back to the table row.
             * @param {HTMLElement} row - The table row to save.
             */
            const saveRowEdits = (row) => {
                const fileId = parseInt(row.dataset.fileId);
                const nameInput = row.querySelector('.file-name input');
                const descriptionInput = row.querySelector('.file-description input');
                const priceInput = row.querySelector('.file-price input');
                const saveButton = row.querySelector('.save-file-btn');

                const newName = nameInput.value;
                const newDescription = descriptionInput.value;
                const newPrice = parseFloat(priceInput.value).toFixed(2);

                // Update the data source
                const fileIndex = attachedFilesData.findIndex(f => f.id === fileId);
                if (fileIndex > -1) {
                    attachedFilesData[fileIndex].name = newName;
                    attachedFilesData[fileIndex].description = newDescription;
                    attachedFilesData[fileIndex].price = parseFloat(newPrice);
                }

                // Update the UI
                row.querySelector('.file-name').textContent = newName;
                row.querySelector('.file-description').textContent = newDescription;
                row.querySelector('.file-price').textContent = `₹${newPrice}`;

                // Change Save button back to Edit button
                saveButton.innerHTML = `<i class="fa-solid fa-pencil"></i>`;
                saveButton.classList.remove('save-file-btn');
                saveButton.classList.add('edit-file-btn');
            };

            // --- Event Listeners for Upload Docs ---

            // Trigger file input when the drop zone is clicked
            if (dropZone) {
                dropZone.addEventListener('click', () => fileUploadInput.click());

                // Handle drag and drop events
                dropZone.addEventListener('dragover', (e) => {
                    e.preventDefault();
                    dropZone.classList.add('dragover');
                });
                dropZone.addEventListener('dragleave', () => {
                    dropZone.classList.remove('dragover');
                });
                dropZone.addEventListener('drop', (e) => {
                    e.preventDefault();
                    dropZone.classList.remove('dragover');
                    handleFiles(e.dataTransfer.files);
                });
            }

            // Handle file selection from the file input
            if (fileUploadInput) {
                fileUploadInput.addEventListener('change', (e) => {
                    handleFiles(e.target.files);
                });
            }

            // Event delegation for edit and delete buttons on the file table
            if (attachedFilesContainer) {
                attachedFilesContainer.addEventListener('click', (e) => {
                    const editBtn = e.target.closest('.edit-file-btn');
                    const saveBtn = e.target.closest('.save-file-btn');
                    const deleteBtn = e.target.closest('.delete-file-btn');

                    if (editBtn) {
                        makeRowEditable(editBtn.closest('tr'));
                    } else if (saveBtn) {
                        saveRowEdits(saveBtn.closest('tr'));
                    } else if (deleteBtn) {
                        const row = deleteBtn.closest('tr');
                        const fileId = parseInt(row.dataset.fileId);
                        showModal('Delete File', 'Are you sure you want to delete this file?', true, false, () => {
                            // Filter out the deleted file from the data source
                            attachedFilesData = attachedFilesData.filter(f => f.id !== fileId);
                            // Re-render the table
                            renderAttachedFiles();
                        });
                    }
                });
            }

            // Initial render of the attached files
            renderAttachedFiles();
        });
    </script>
</body>

</html>